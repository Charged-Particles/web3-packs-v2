{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC4906.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\nimport \"./IERC721.sol\";\n\n/// @title EIP-721 Metadata Update Extension\ninterface IERC4906 is IERC165, IERC721 {\n    /// @dev This event emits when the metadata of a token is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFT.\n    event MetadataUpdate(uint256 _tokenId);\n\n    /// @dev This event emits when the metadata of a range of tokens is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFTs.\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/IERC721.sol\";\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../interfaces/IERC4906.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC165-supportsInterface}\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Emits {MetadataUpdate}.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n\n        emit MetadataUpdate(tokenId);\n    }\n\n    /**\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\n     * the storage mapping.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IWETH.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nlibrary TransferHelper {\n    /// @notice Transfers tokens from the targeted address to the given destination\n    /// @notice Errors with 'STF' if transfer fails\n    /// @param token The contract address of the token to be transferred\n    /// @param from The originating address from which the tokens will be transferred\n    /// @param to The destination address of the transfer\n    /// @param value The amount to be transferred\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\n    }\n\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Errors with ST if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\n    }\n\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\n    /// @dev Errors with 'SA' if transfer fails\n    /// @param token The contract address of the token to be approved\n    /// @param to The target of the approval\n    /// @param value The amount of the given token the target will be allowed to spend\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\n    }\n\n    /// @notice Transfers ETH to the recipient address\n    /// @dev Fails with `STE`\n    /// @param to The destination of the transfer\n    /// @param value The value to be transferred\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'STE');\n    }\n}\n"
    },
    "contracts/interfaces/IBaseProton.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// IBaseProton.sol -- Part of the Charged Particles Protocol\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\ninterface IBaseProton {\n  function createProton(\n    address creator,\n    address receiver,\n    string memory tokenMetaUri\n  ) external returns (uint256 newTokenId);\n\n  function createBasicProton(\n    address creator,\n    address receiver,\n    string memory tokenMetaUri\n  )\n    external\n    payable\n    returns (uint256 newTokenId);\n\n  function safeTransferFrom(address from, address to, uint256 tokenId) external;\n}"
    },
    "contracts/interfaces/IChargedParticles.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// IChargedParticles.sol -- Part of the Charged Particles Protocol\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\n/**\n * @notice Interface for Charged Particles\n */\ninterface IChargedParticles {\n    /***********************************|\n  |             Public API            |\n  |__________________________________*/\n\n    function getStateAddress() external view returns (address stateAddress);\n\n    function getSettingsAddress()\n        external\n        view\n        returns (address settingsAddress);\n\n    function getManagersAddress()\n        external\n        view\n        returns (address managersAddress);\n\n    function getFeesForDeposit(uint256 assetAmount)\n        external\n        view\n        returns (uint256 protocolFee);\n\n    function baseParticleMass(\n        address contractAddress,\n        uint256 tokenId,\n        string calldata walletManagerId,\n        address assetToken\n    ) external returns (uint256);\n\n    function currentParticleCharge(\n        address contractAddress,\n        uint256 tokenId,\n        string calldata walletManagerId,\n        address assetToken\n    ) external returns (uint256);\n\n    function currentParticleKinetics(\n        address contractAddress,\n        uint256 tokenId,\n        string calldata walletManagerId,\n        address assetToken\n    ) external returns (uint256);\n\n    function currentParticleCovalentBonds(\n        address contractAddress,\n        uint256 tokenId,\n        string calldata basketManagerId\n    ) external view returns (uint256);\n\n    /***********************************|\n  |        Particle Mechanics         |\n  |__________________________________*/\n\n    function energizeParticle(\n        address contractAddress,\n        uint256 tokenId,\n        string calldata walletManagerId,\n        address assetToken,\n        uint256 assetAmount,\n        address referrer\n    ) external returns (uint256 yieldTokensAmount);\n\n    function dischargeParticle(\n        address receiver,\n        address contractAddress,\n        uint256 tokenId,\n        string calldata walletManagerId,\n        address assetToken\n    ) external returns (uint256 creatorAmount, uint256 receiverAmount);\n\n    function dischargeParticleAmount(\n        address receiver,\n        address contractAddress,\n        uint256 tokenId,\n        string calldata walletManagerId,\n        address assetToken,\n        uint256 assetAmount\n    ) external returns (uint256 creatorAmount, uint256 receiverAmount);\n\n    function dischargeParticleForCreator(\n        address receiver,\n        address contractAddress,\n        uint256 tokenId,\n        string calldata walletManagerId,\n        address assetToken,\n        uint256 assetAmount\n    ) external returns (uint256 receiverAmount);\n\n    function releaseParticle(\n        address receiver,\n        address contractAddress,\n        uint256 tokenId,\n        string calldata walletManagerId,\n        address assetToken\n    ) external returns (uint256 creatorAmount, uint256 receiverAmount);\n\n    function releaseParticleAmount(\n        address receiver,\n        address contractAddress,\n        uint256 tokenId,\n        string calldata walletManagerId,\n        address assetToken,\n        uint256 assetAmount\n    ) external returns (uint256 creatorAmount, uint256 receiverAmount);\n\n    function covalentBond(\n        address contractAddress,\n        uint256 tokenId,\n        string calldata basketManagerId,\n        address nftTokenAddress,\n        uint256 nftTokenId,\n        uint256 nftTokenAmount\n    ) external returns (bool success);\n\n    function breakCovalentBond(\n        address receiver,\n        address contractAddress,\n        uint256 tokenId,\n        string calldata basketManagerId,\n        address nftTokenAddress,\n        uint256 nftTokenId,\n        uint256 nftTokenAmount\n    ) external returns (bool success);\n\n    /***********************************|\n  |          Particle Events          |\n  |__________________________________*/\n\n    event Initialized(address indexed initiator);\n    event ControllerSet(address indexed controllerAddress, string controllerId);\n    event DepositFeeSet(uint256 depositFee);\n    event ProtocolFeesCollected(\n        address indexed assetToken,\n        uint256 depositAmount,\n        uint256 feesCollected\n    );\n}\n"
    },
    "contracts/interfaces/IChargedState.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// IChargedState.sol -- Part of the Charged Particles Protocol\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\n/**\n * @notice Interface for Charged State\n */\ninterface IChargedState {\n  /***********************************|\n  |             Public API            |\n  |__________________________________*/\n\n    function getDischargeTimelockExpiry(\n        address contractAddress,\n        uint256 tokenId\n    ) external view returns (uint256 lockExpiry);\n\n    function getReleaseTimelockExpiry(address contractAddress, uint256 tokenId)\n        external\n        view\n        returns (uint256 lockExpiry);\n\n    function getBreakBondTimelockExpiry(\n        address contractAddress,\n        uint256 tokenId\n    ) external view returns (uint256 lockExpiry);\n\n    function isApprovedForDischarge(\n        address contractAddress,\n        uint256 tokenId,\n        address operator\n    ) external returns (bool);\n\n    function isApprovedForRelease(\n        address contractAddress,\n        uint256 tokenId,\n        address operator\n    ) external returns (bool);\n\n    function isApprovedForBreakBond(\n        address contractAddress,\n        uint256 tokenId,\n        address operator\n    ) external returns (bool);\n\n    function isApprovedForTimelock(\n        address contractAddress,\n        uint256 tokenId,\n        address operator\n    ) external returns (bool);\n\n    function isEnergizeRestricted(address contractAddress, uint256 tokenId)\n        external\n        view\n        returns (bool);\n\n    function isCovalentBondRestricted(address contractAddress, uint256 tokenId)\n        external\n        view\n        returns (bool);\n\n    function getDischargeState(\n        address contractAddress,\n        uint256 tokenId,\n        address sender\n    )\n        external\n        returns (\n            bool allowFromAll,\n            bool isApproved,\n            uint256 timelock,\n            uint256 tempLockExpiry\n        );\n\n    function getReleaseState(\n        address contractAddress,\n        uint256 tokenId,\n        address sender\n    )\n        external\n        returns (\n            bool allowFromAll,\n            bool isApproved,\n            uint256 timelock,\n            uint256 tempLockExpiry\n        );\n\n    function getBreakBondState(\n        address contractAddress,\n        uint256 tokenId,\n        address sender\n    )\n        external\n        returns (\n            bool allowFromAll,\n            bool isApproved,\n            uint256 timelock,\n            uint256 tempLockExpiry\n        );\n\n    /***********************************|\n  |      Only NFT Owner/Operator      |\n  |__________________________________*/\n\n    function setDischargeApproval(\n        address contractAddress,\n        uint256 tokenId,\n        address operator\n    ) external;\n\n    function setReleaseApproval(\n        address contractAddress,\n        uint256 tokenId,\n        address operator\n    ) external;\n\n    function setBreakBondApproval(\n        address contractAddress,\n        uint256 tokenId,\n        address operator\n    ) external;\n\n    function setTimelockApproval(\n        address contractAddress,\n        uint256 tokenId,\n        address operator\n    ) external;\n\n    function setApprovalForAll(\n        address contractAddress,\n        uint256 tokenId,\n        address operator\n    ) external;\n\n    function setPermsForRestrictCharge(\n        address contractAddress,\n        uint256 tokenId,\n        bool state\n    ) external;\n\n    function setPermsForAllowDischarge(\n        address contractAddress,\n        uint256 tokenId,\n        bool state\n    ) external;\n\n    function setPermsForAllowRelease(\n        address contractAddress,\n        uint256 tokenId,\n        bool state\n    ) external;\n\n    function setPermsForRestrictBond(\n        address contractAddress,\n        uint256 tokenId,\n        bool state\n    ) external;\n\n    function setPermsForAllowBreakBond(\n        address contractAddress,\n        uint256 tokenId,\n        bool state\n    ) external;\n\n    function setDischargeTimelock(\n        address contractAddress,\n        uint256 tokenId,\n        uint256 unlockBlock\n    ) external;\n\n    function setReleaseTimelock(\n        address contractAddress,\n        uint256 tokenId,\n        uint256 unlockBlock\n    ) external;\n\n    function setBreakBondTimelock(\n        address contractAddress,\n        uint256 tokenId,\n        uint256 unlockBlock\n    ) external;\n\n    /***********************************|\n  |         Only NFT Contract         |\n  |__________________________________*/\n\n    function setTemporaryLock(\n        address contractAddress,\n        uint256 tokenId,\n        bool isLocked\n    ) external;\n\n    /***********************************|\n  |          Particle Events          |\n  |__________________________________*/\n\n    event Initialized(address indexed initiator);\n    event ControllerSet(address indexed controllerAddress, string controllerId);\n\n    event DischargeApproval(\n        address indexed contractAddress,\n        uint256 indexed tokenId,\n        address indexed owner,\n        address operator\n    );\n    event ReleaseApproval(\n        address indexed contractAddress,\n        uint256 indexed tokenId,\n        address indexed owner,\n        address operator\n    );\n    event BreakBondApproval(\n        address indexed contractAddress,\n        uint256 indexed tokenId,\n        address indexed owner,\n        address operator\n    );\n    event TimelockApproval(\n        address indexed contractAddress,\n        uint256 indexed tokenId,\n        address indexed owner,\n        address operator\n    );\n\n    event TokenDischargeTimelock(\n        address indexed contractAddress,\n        uint256 indexed tokenId,\n        address indexed operator,\n        uint256 unlockBlock\n    );\n    event TokenReleaseTimelock(\n        address indexed contractAddress,\n        uint256 indexed tokenId,\n        address indexed operator,\n        uint256 unlockBlock\n    );\n    event TokenBreakBondTimelock(\n        address indexed contractAddress,\n        uint256 indexed tokenId,\n        address indexed operator,\n        uint256 unlockBlock\n    );\n    event TokenTempLock(\n        address indexed contractAddress,\n        uint256 indexed tokenId,\n        uint256 unlockBlock\n    );\n\n    event PermsSetForRestrictCharge(\n        address indexed contractAddress,\n        uint256 indexed tokenId,\n        bool state\n    );\n    event PermsSetForAllowDischarge(\n        address indexed contractAddress,\n        uint256 indexed tokenId,\n        bool state\n    );\n    event PermsSetForAllowRelease(\n        address indexed contractAddress,\n        uint256 indexed tokenId,\n        bool state\n    );\n    event PermsSetForRestrictBond(\n        address indexed contractAddress,\n        uint256 indexed tokenId,\n        bool state\n    );\n    event PermsSetForAllowBreakBond(\n        address indexed contractAddress,\n        uint256 indexed tokenId,\n        bool state\n    );\n}\n"
    },
    "contracts/interfaces/IWeb3Packs.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// IWeb3Packs.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\npragma solidity 0.8.17;\n\nimport \"./IWeb3PacksDefs.sol\";\n\ninterface IWeb3Packs is IWeb3PacksDefs {\n  event BundledERC20(address indexed tokenAddress, uint256 amountOut);\n  event BundledERC721(address indexed tokenAddress, uint256 nftTokenId);\n\n  // BUNDLE\n  function bundle(\n    IWeb3PacksDefs.BundleChunk[] calldata bundleChunks,\n    address[] calldata referrals,\n    string calldata tokenMetaUri,\n    IWeb3PacksDefs.LockState calldata lockState,\n    bytes32 packType,\n    uint256 ethPackPrice\n  ) external\n    payable\n    returns(uint256 tokenId);\n\n  // UNBUNDLE\n  function unbundle(\n    address payable receiver,\n    address tokenAddress,\n    uint256 tokenId,\n    bool sellAll\n  ) external\n    payable;\n\n  // QUERY\n  function getPackBalances(\n    address tokenAddress,\n    uint256 tokenId\n  ) external\n    returns (TokenAmount[] memory);\n\n  function getPackPriceEth(uint256 tokenId)\n    external\n    returns (uint256 packPriceEth);\n\n  function getReferralRewardsOf(address account)\n    external\n    returns (uint256 balance);\n\n  function claimReferralRewards(address payable account)\n    external;\n}\n"
    },
    "contracts/interfaces/IWeb3PacksBundler.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// IWeb3PacksBundler.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\npragma solidity 0.8.17;\n\n\ninterface IWeb3PacksBundler {\n  event BundledTokenSS(address indexed token, uint256 amount);\n  event BundledTokenLP(address indexed token0, address indexed token1, uint256 amount0, uint256 amount1, uint256 liquidity);\n\n  function getLiquidityToken(uint256 packTokenId) external returns (address tokenAddress, uint256 tokenId);\n\n  function bundle(uint256 packTokenId, address sender)\n    payable\n    external\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    );\n\n  function unbundle(address payable receiver, uint256 packTokenId, bool sellAll)\n    external\n    returns(uint256 amountOut);\n}\n"
    },
    "contracts/interfaces/IWeb3PacksDefs.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// IWeb3PacksDefs.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\ninterface IWeb3PacksDefs {\n  // Custom Errors\n  error NotOwnerOrApproved();\n  error FundingFailed();\n  error NullReceiver();\n  error ContractNotAllowed();\n  error NativeAssetTransferFailed();\n  error MismatchedTokens();\n  error NoBundlesInPack();\n  error BundlerNotRegistered(bytes32 bundlerId);\n  error MissingLiquidityUUID(address tokenAddress);\n  error UnsucessfulSwap(address tokenOut, uint256 amountIn, address router);\n  error InsufficientForFee(uint256 value, uint256 ethPackPrice, uint256 protocolFee);\n\n  struct RouterConfig {\n    address weth;\n    address token0;\n    address token1;\n    address manager;\n    address swapRouter;\n    address liquidityRouter;\n    bytes32 poolId;\n    bytes32 bundlerId;\n    uint256 slippage;\n    int24 tickLower;\n    int24 tickUpper;\n  }\n\n  struct BundleChunk {\n    bytes32 bundlerId;\n    uint256 percentBasisPoints;\n  }\n\n  struct Token {\n    address tokenAddress;\n    uint256 tokenDecimals;\n    string tokenSymbol;\n  }\n\n  struct TokenAmount {\n    address tokenAddress;\n    uint256 balance;\n    uint256 nftTokenId;\n  }\n\n  struct Route {\n    address token0;\n    address token1;\n    bool stable;\n  }\n\n  struct LiquidityPosition {\n    uint256 lpTokenId;\n    uint256 liquidity;\n    bool stable;\n  }\n\n  struct LockState {\n    uint256 ERC20Timelock;\n    uint256 ERC721Timelock;\n  }\n}\n"
    },
    "contracts/interfaces/IWeb3PacksRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// IWeb3PacksRouter.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\npragma solidity 0.8.17;\n\nimport \"./IWeb3PacksDefs.sol\";\n\ninterface IWeb3PacksRouter is IWeb3PacksDefs {\n  function getToken0() external returns (IWeb3PacksDefs.Token calldata token0);\n  function getToken1() external returns (IWeb3PacksDefs.Token calldata token1);\n\n  function getTokenPath(bool reverse) external returns (IWeb3PacksDefs.Route[] memory tokenPath);\n  function getOrderedAssets(bool reverse) external returns (address[] memory assets, uint256[] memory amounts);\n  function getLiquidityAmounts() external returns (uint256 amount0, uint256 amount1, uint256 minAmount0, uint256 minAmount1);\n\n  function getBalanceToken0() external returns (uint256 balanceToken0);\n  function getBalanceToken1() external returns (uint256 balanceToken1);\n  function getBalanceWeth() external returns (uint256 balanceWeth);\n\n  function swapSingle(uint256 percentOfAmount, bool reverse)\n    external\n    returns (uint256 amountOut);\n\n  function swapCustom(uint256 percentOfAmount, address token0, address token1)\n    external\n    returns (uint256 amountOut);\n\n  function createLiquidityPosition(bool stable)\n    external\n    returns (\n      uint256 lpTokenId,\n      uint256 liquidity,\n      uint256 amount0,\n      uint256 amount1\n    );\n\n  function collectLpFees(IWeb3PacksDefs.LiquidityPosition calldata liquidityPosition)\n    external\n    returns (uint256 amount0, uint256 amount1);\n\n  function removeLiquidityPosition(IWeb3PacksDefs.LiquidityPosition calldata liquidityPosition)\n    external\n    returns (uint amount0, uint amount1);\n}\n"
    },
    "contracts/interfaces/mode/IAlgebraQuoter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Quoter Interface\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\n/// Credit to Uniswap Labs under GPL-2.0-or-later license:\n/// https://github.com/Uniswap/v3-periphery\ninterface IAlgebraQuoter {\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair\n    /// @param amountIn The amount of the first token to swap\n    /// @return amountOut The amount of the last token that would be received\n    function quoteExactInput(bytes memory path, uint256 amountIn)\n        external\n        returns (uint256 amountOut, uint16[] memory fees);\n\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\n    /// @param tokenIn The token being swapped in\n    /// @param tokenOut The token being swapped out\n    /// @param amountIn The desired input amount\n    /// @param limitSqrtPrice The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountOut The amount of `tokenOut` that would be received\n    function quoteExactInputSingle(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        uint160 limitSqrtPrice\n    ) external returns (uint256 amountOut, uint16 fee);\n\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair. Path must be provided in reverse order\n    /// @param amountOut The amount of the last token to receive\n    /// @return amountIn The amount of first token required to be paid\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\n        external\n        returns (uint256 amountIn, uint16[] memory fees);\n\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\n    /// @param tokenIn The token being swapped in\n    /// @param tokenOut The token being swapped out\n    /// @param amountOut The desired output amount\n    /// @param limitSqrtPrice The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\n    function quoteExactOutputSingle(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountOut,\n        uint160 limitSqrtPrice\n    ) external returns (uint256 amountIn, uint16 fee);\n}\n"
    },
    "contracts/interfaces/mode/IAlgebraRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport './IAlgebraSwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Algebra\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\n/// https://github.com/Uniswap/v3-periphery\ninterface IAlgebraRouter is IAlgebraSwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 limitSqrtPrice;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 limitSqrtPrice;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @dev If native token is used as input, this function should be accompanied by a `refundNativeToken` in multicall to avoid potential loss of native tokens\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @dev If native token is used as input, this function should be accompanied by a `refundNativeToken` in multicall to avoid potential loss of native tokens\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @dev Unlike standard swaps, handles transferring from user before the actual swap.\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingleSupportingFeeOnTransferTokens(\n        ExactInputSingleParams calldata params\n    ) external payable returns (uint256 amountOut);\n}\n"
    },
    "contracts/interfaces/mode/IAlgebraSwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IAlgebraPoolActions#swap\n/// @notice Any contract that calls IAlgebraPoolActions#swap must implement this interface\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\ninterface IAlgebraSwapCallback {\n  /// @notice Called to `msg.sender` after executing a swap via IAlgebraPool#swap.\n  /// @dev In the implementation you must pay the pool tokens owed for the swap.\n  /// The caller of this method _must_ be checked to be a AlgebraPool deployed by the canonical AlgebraFactory.\n  /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n  /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n  /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n  /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n  /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n  /// @param data Any data passed through by the caller via the IAlgebraPoolActions#swap call\n  function algebraSwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external;\n}\n"
    },
    "contracts/interfaces/mode/IBalancerQueries.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.7.0;\npragma abicoder v2;\n\nimport \"./IBalancerV2Vault.sol\";\n\n/**\n * @dev Provides a way to perform queries on swaps, joins and exits, simulating these operations and returning the exact\n * result they would have if called on the Vault given the current state. Note that the results will be affected by\n * other transactions interacting with the Pools involved.\n *\n * All query functions can be called both on-chain and off-chain.\n *\n * If calling them from a contract, note that all query functions are not `view`. Despite this, these functions produce\n * no net state change, and for all intents and purposes can be thought of as if they were indeed `view`. However,\n * calling them via STATICCALL will fail.\n *\n * If calling them from an off-chain client, make sure to use eth_call: most clients default to eth_sendTransaction for\n * non-view functions.\n *\n * In all cases, the `fromInternalBalance` and `toInternalBalance` fields are entirely ignored: we just use the same\n * structs for simplicity.\n */\ninterface IBalancerQueries {\n    function querySwap(IBalancerV2Vault.SingleSwap memory singleSwap, IBalancerV2Vault.FundManagement memory funds)\n        external\n        returns (uint256);\n\n    function queryBatchSwap(\n        IBalancerV2Vault.SwapKind kind,\n        IBalancerV2Vault.BatchSwapStep[] memory swaps,\n        IAsset[] memory assets,\n        IBalancerV2Vault.FundManagement memory funds\n    ) external returns (int256[] memory assetDeltas);\n\n    function queryJoin(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        IBalancerV2Vault.JoinPoolRequest memory request\n    ) external returns (uint256 bptOut, uint256[] memory amountsIn);\n\n    function queryExit(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        IBalancerV2Vault.ExitPoolRequest memory request\n    ) external returns (uint256 bptIn, uint256[] memory amountsOut);\n}\n"
    },
    "contracts/interfaces/mode/IBalancerV2Vault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IAsset {\n    // solhint-disable-previous-line no-empty-blocks\n}\n\ninterface IBalancerV2Vault {\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\n\n    /**\n     * @dev Returns a Pool's contract address and specialization setting.\n     */\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\n\n    // Swaps\n    //\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\n    //\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\n    // individual swaps.\n    //\n    // There are two swap kinds:\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\n    //\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\n    // the final intended token.\n    //\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\n    // much less gas than they would otherwise.\n    //\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\n    // updating the Pool's internal accounting).\n    //\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\n    //\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\n    //\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\n    //\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\n\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\n\n    /**\n     * @dev Performs a swap with a single Pool.\n     *\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\n     * taken from the Pool, which must be greater than or equal to `limit`.\n     *\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\n     * sent to the Pool, which must be less than or equal to `limit`.\n     *\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\n     *\n     * Emits a `Swap` event.\n     */\n    function swap(\n        SingleSwap memory singleSwap,\n        FundManagement memory funds,\n        uint256 limit,\n        uint256 deadline\n    ) external payable returns (uint256);\n\n    /**\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\n     * the `kind` value.\n     *\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\n     *\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\n     * used to extend swap behavior.\n     */\n    struct SingleSwap {\n        bytes32 poolId;\n        SwapKind kind;\n        IAsset assetIn;\n        IAsset assetOut;\n        uint256 amount;\n        bytes userData;\n    }\n\n\n    /**\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\n     * Pool shares.\n     *\n     * If the caller is not `sender`, it must be an authorized relayer for them.\n     *\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\n     * these maximums.\n     *\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\n     * back to the caller (not the sender, which is important for relayers).\n     *\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\n     *\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\n     *\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\n     * directly to the Pool's contract, as is `recipient`.\n     *\n     * Emits a `PoolBalanceChanged` event.\n     */\n    function joinPool(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        JoinPoolRequest memory request\n    ) external payable;\n\n    struct JoinPoolRequest {\n        IAsset[] assets;\n        uint256[] maxAmountsIn;\n        bytes userData;\n        bool fromInternalBalance;\n    }\n\n    enum JoinKind {\n        INIT,\n        EXACT_TOKENS_IN_FOR_BPT_OUT,\n        TOKEN_IN_FOR_EXACT_BPT_OUT,\n        ALL_TOKENS_IN_FOR_EXACT_BPT_OUT\n    }\n\n    /**\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\n     * `getPoolTokenInfo`).\n     *\n     * If the caller is not `sender`, it must be an authorized relayer for them.\n     *\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\n     * it just enforces these minimums.\n     *\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\n     *\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\n     *\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\n     * do so will trigger a revert.\n     *\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\n     * `tokens` array. This array must match the Pool's registered tokens.\n     *\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\n     * passed directly to the Pool's contract.\n     *\n     * Emits a `PoolBalanceChanged` event.\n     */\n    function exitPool(\n        bytes32 poolId,\n        address sender,\n        address payable recipient,\n        ExitPoolRequest memory request\n    ) external;\n\n    struct ExitPoolRequest {\n        IAsset[] assets;\n        uint256[] minAmountsOut;\n        bytes userData;\n        bool toInternalBalance;\n    }\n\n    enum ExitKind {\n        EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\n        EXACT_BPT_IN_FOR_TOKENS_OUT,\n        BPT_IN_FOR_EXACT_TOKENS_OUT,\n        MANAGEMENT_FEE_TOKENS_OUT // for InvestmentPool\n    }\n\n    /**\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\n     * `recipient` account.\n     *\n     * If the caller is not `sender`, it must be an authorized relayer for them.\n     *\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\n     * `joinPool`.\n     *\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\n     * transferred. This matches the behavior of `exitPool`.\n     *\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\n     * revert.\n     */\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n\n    /**\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\n     *\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\n     * from the previous swap, depending on the swap kind.\n     *\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\n     * used to extend swap behavior.\n     */\n    struct BatchSwapStep {\n        bytes32 poolId;\n        uint256 assetInIndex;\n        uint256 assetOutIndex;\n        uint256 amount;\n        bytes userData;\n    }\n\n    /**\n     * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\n     */\n    event Swap(\n        bytes32 indexed poolId,\n        IERC20 indexed tokenIn,\n        IERC20 indexed tokenOut,\n        uint256 amountIn,\n        uint256 amountOut\n    );\n\n    /**\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\n     *\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\n     * receives are the same that an equivalent `batchSwap` call would receive.\n     *\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\n     * approve them for the Vault, or even know a user's address.\n     *\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\n     * eth_call instead of eth_sendTransaction.\n     */\n    function queryBatchSwap(\n        SwapKind kind,\n        BatchSwapStep[] memory swaps,\n        IAsset[] memory assets,\n        FundManagement memory funds\n    ) external returns (int256[] memory assetDeltas);\n\n}\n"
    },
    "contracts/interfaces/mode/INonfungiblePositionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.17;\ninterface INonfungiblePositionManager {\n\n    /// @notice Returns the position information associated with a given token ID.\n    /// @dev Throws if the token ID is not valid.\n    /// @param tokenId The ID of the token that represents the position\n    /// @return nonce The nonce for permits\n    /// @return operator The address that is approved for spending\n    /// @return token0 The address of the token0 for a specific pool\n    /// @return token1 The address of the token1 for a specific pool\n    /// @return fee The fee associated with the pool\n    /// @return tickLower The lower end of the tick range for the position\n    /// @return tickUpper The higher end of the tick range for the position\n    /// @return liquidity The liquidity of the position\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\n    function positions(uint256 tokenId)\n        external\n        view\n        returns (\n            uint96 nonce,\n            address operator,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    struct MintParams {\n        address token0;\n        address token1;\n        // uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        address recipient;\n        uint256 deadline;\n    }\n\n    /// @notice Creates a new position wrapped in a NFT\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n    /// @return tokenId The ID of the token that represents the minted position\n    /// @return liquidity The amount of liquidity for this position\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function mint(MintParams calldata params)\n        external\n        payable\n        returns (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct IncreaseLiquidityParams {\n        uint256 tokenId;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\n    /// amount0Desired The desired amount of token0 to be spent,\n    /// amount1Desired The desired amount of token1 to be spent,\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return liquidity The new liquidity amount as a result of the increase\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct DecreaseLiquidityParams {\n        uint256 tokenId;\n        uint128 liquidity;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\n    /// amount The amount by which liquidity will be decreased,\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (uint256 amount0, uint256 amount1);\n\n    struct CollectParams {\n        uint256 tokenId;\n        address recipient;\n        uint128 amount0Max;\n        uint128 amount1Max;\n    }\n\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\n    /// recipient The account that should receive the tokens,\n    /// amount0Max The maximum amount of token0 to collect,\n    /// amount1Max The maximum amount of token1 to collect\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n    /// must be collected first.\n    /// @param tokenId The ID of the token that is being burned\n    function burn(uint256 tokenId) external payable;\n}\n"
    },
    "contracts/interfaces/mode/IPancakeFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IFeeSharing {\n    function assign(uint256 _tokenId) external returns (uint256);\n}\n\ninterface IProtocolToken {\n    function feeShareContract() external view returns (IFeeSharing);\n\n    function feeShareTokenId() external view returns (uint256);\n}\n\ninterface IPancakeFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\n\n    function protocolToken() external view returns (IProtocolToken);\n}\n"
    },
    "contracts/interfaces/mode/IPancakeRouter02.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IPancakeRouter01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n}\n\ninterface IPancakeRouter02 is IPancakeRouter01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n"
    },
    "contracts/interfaces/mode/IUniswapV3State.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}"
    },
    "contracts/interfaces/mode/IVelodrome.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IVelodrome {\n    struct Route {\n        address from;\n        address to;\n        bool stable;\n    }\n\n    error ETHTransferFailed();\n    error Expired();\n    error InsufficientAmount();\n    error InsufficientAmountA();\n    error InsufficientAmountB();\n    error InsufficientAmountADesired();\n    error InsufficientAmountBDesired();\n    error InsufficientLiquidity();\n    error InsufficientOutputAmount();\n    error InvalidPath();\n    error OnlyWETH();\n    error SameAddresses();\n    error ZeroAddress();\n\n    /// @notice Address of Velodrome v2 pool factory\n    function factory() external view returns (address);\n\n    /// @notice Address of Velodrome v2 pool implementation\n    function poolImplementation() external view returns (address);\n\n    /// @notice Sort two tokens by which address value is less than the other\n    /// @param tokenA   Address of token to sort\n    /// @param tokenB   Address of token to sort\n    /// @return token0  Lower address value between tokenA and tokenB\n    /// @return token1  Higher address value between tokenA and tokenB\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\n\n    /// @notice Calculate the address of a pool by its' factory.\n    /// @dev Returns a randomly generated address for a nonexistent pool\n    /// @param tokenA   Address of token to query\n    /// @param tokenB   Address of token to query\n    /// @param stable   True if pool is stable, false if volatile\n    function poolFor(address tokenA, address tokenB, bool stable) external view returns (address pool);\n\n    /// @notice Fetch and sort the reserves for a pool\n    /// @param tokenA       .\n    /// @param tokenB       .\n    /// @param stable       True if pool is stable, false if volatile\n    /// @return reserveA    Amount of reserves of the sorted token A\n    /// @return reserveB    Amount of reserves of the sorted token B\n    function getReserves(address tokenA, address tokenB, bool stable)\n        external\n        view\n        returns (uint256 reserveA, uint256 reserveB);\n\n    /// @notice Perform chained getAmountOut calculations on any number of pools\n    function getAmountsOut(uint256 amountIn, Route[] memory routes) external view returns (uint256[] memory amounts);\n\n    // **** ADD LIQUIDITY ****\n\n    /// @notice Quote the amount deposited into a Pool\n    /// @param tokenA           .\n    /// @param tokenB           .\n    /// @param stable           True if pool is stable, false if volatile\n    /// @param amountADesired   Amount of tokenA desired to deposit\n    /// @param amountBDesired   Amount of tokenB desired to deposit\n    /// @return amountA         Amount of tokenA to actually deposit\n    /// @return amountB         Amount of tokenB to actually deposit\n    /// @return liquidity       Amount of liquidity token returned from deposit\n    function quoteAddLiquidity(\n        address tokenA,\n        address tokenB,\n        bool stable,\n        uint256 amountADesired,\n        uint256 amountBDesired\n    ) external view returns (uint256 amountA, uint256 amountB, uint256 liquidity);\n\n    /// @notice Quote the amount of liquidity removed from a Pool\n    /// @param tokenA       .\n    /// @param tokenB       .\n    /// @param stable       True if pool is stable, false if volatile\n    /// @param liquidity    Amount of liquidity to remove\n    /// @return amountA     Amount of tokenA received\n    /// @return amountB     Amount of tokenB received\n    function quoteRemoveLiquidity(address tokenA, address tokenB, bool stable, uint256 liquidity)\n        external\n        view\n        returns (uint256 amountA, uint256 amountB);\n\n    /// @notice Add liquidity of two tokens to a Pool\n    /// @param tokenA           .\n    /// @param tokenB           .\n    /// @param stable           True if pool is stable, false if volatile\n    /// @param amountADesired   Amount of tokenA desired to deposit\n    /// @param amountBDesired   Amount of tokenB desired to deposit\n    /// @param amountAMin       Minimum amount of tokenA to deposit\n    /// @param amountBMin       Minimum amount of tokenB to deposit\n    /// @param to               Recipient of liquidity token\n    /// @param deadline         Deadline to receive liquidity\n    /// @return amountA         Amount of tokenA to actually deposit\n    /// @return amountB         Amount of tokenB to actually deposit\n    /// @return liquidity       Amount of liquidity token returned from deposit\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        bool stable,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\n\n    /// @notice Add liquidity of a token and WETH (transferred as ETH) to a Pool\n    /// @param token                .\n    /// @param stable               True if pool is stable, false if volatile\n    /// @param amountTokenDesired   Amount of token desired to deposit\n    /// @param amountTokenMin       Minimum amount of token to deposit\n    /// @param amountETHMin         Minimum amount of ETH to deposit\n    /// @param to                   Recipient of liquidity token\n    /// @param deadline             Deadline to add liquidity\n    /// @return amountToken         Amount of token to actually deposit\n    /// @return amountETH           Amount of tokenETH to actually deposit\n    /// @return liquidity           Amount of liquidity token returned from deposit\n    function addLiquidityETH(\n        address token,\n        bool stable,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n\n    // **** REMOVE LIQUIDITY ****\n\n    /// @notice Remove liquidity of two tokens from a Pool\n    /// @param tokenA       .\n    /// @param tokenB       .\n    /// @param stable       True if pool is stable, false if volatile\n    /// @param liquidity    Amount of liquidity to remove\n    /// @param amountAMin   Minimum amount of tokenA to receive\n    /// @param amountBMin   Minimum amount of tokenB to receive\n    /// @param to           Recipient of tokens received\n    /// @param deadline     Deadline to remove liquidity\n    /// @return amountA     Amount of tokenA received\n    /// @return amountB     Amount of tokenB received\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        bool stable,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    /// @notice Remove liquidity of a token and WETH (returned as ETH) from a Pool\n    /// @param token            .\n    /// @param stable           True if pool is stable, false if volatile\n    /// @param liquidity        Amount of liquidity to remove\n    /// @param amountTokenMin   Minimum amount of token to receive\n    /// @param amountETHMin     Minimum amount of ETH to receive\n    /// @param to               Recipient of liquidity token\n    /// @param deadline         Deadline to receive liquidity\n    /// @return amountToken     Amount of token received\n    /// @return amountETH       Amount of ETH received\n    function removeLiquidityETH(\n        address token,\n        bool stable,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    /// @notice Remove liquidity of a fee-on-transfer token and WETH (returned as ETH) from a Pool\n    /// @param token            .\n    /// @param stable           True if pool is stable, false if volatile\n    /// @param liquidity        Amount of liquidity to remove\n    /// @param amountTokenMin   Minimum amount of token to receive\n    /// @param amountETHMin     Minimum amount of ETH to receive\n    /// @param to               Recipient of liquidity token\n    /// @param deadline         Deadline to receive liquidity\n    /// @return amountETH       Amount of ETH received\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        bool stable,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    /// @notice Swap one token for another\n    /// @param amountIn     Amount of token in\n    /// @param amountOutMin Minimum amount of desired token received\n    /// @param routes       Array of trade routes used in the swap\n    /// @param to           Recipient of the tokens received\n    /// @param deadline     Deadline to receive tokens\n    /// @return amounts     Array of amounts returned per route\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        Route[] calldata routes,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    /// @notice Swap ETH for a token\n    /// @param amountOutMin Minimum amount of desired token received\n    /// @param routes       Array of trade routes used in the swap\n    /// @param to           Recipient of the tokens received\n    /// @param deadline     Deadline to receive tokens\n    /// @return amounts     Array of amounts returned per route\n    function swapExactETHForTokens(uint256 amountOutMin, Route[] calldata routes, address to, uint256 deadline)\n        external\n        payable\n        returns (uint256[] memory amounts);\n\n    /// @notice Swap a token for WETH (returned as ETH)\n    /// @param amountIn     Amount of token in\n    /// @param amountOutMin Minimum amount of desired ETH\n    /// @param routes       Array of trade routes used in the swap\n    /// @param to           Recipient of the tokens received\n    /// @param deadline     Deadline to receive tokens\n    /// @return amounts     Array of amounts returned per route\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        Route[] calldata routes,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n}\n"
    },
    "contracts/interfaces/mode/IVelodromePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IVelodromePool {\n    error DepositsNotEqual();\n    error BelowMinimumK();\n    error FactoryAlreadySet();\n    error InsufficientLiquidity();\n    error InsufficientLiquidityMinted();\n    error InsufficientLiquidityBurned();\n    error InsufficientOutputAmount();\n    error InsufficientInputAmount();\n    error IsPaused();\n    error InvalidTo();\n    error K();\n\n    event Fees(address indexed sender, uint256 amount0, uint256 amount1);\n    event Mint(address indexed sender, address indexed to, uint256 amount0, uint256 amount1);\n    event Burn(address indexed sender, address indexed to, uint256 amount0, uint256 amount1);\n    event Swap(\n        address indexed sender,\n        address indexed to,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out\n    );\n    event Sync(uint256 reserve0, uint256 reserve1);\n    event Claim(address indexed sender, address indexed recipient, uint256 amount0, uint256 amount1);\n\n    // Struct to capture time period obervations every 30 minutes, used for local oracles\n    struct Observation {\n        uint256 timestamp;\n        uint256 reserve0Cumulative;\n        uint256 reserve1Cumulative;\n    }\n\n    /// @notice Returns the decimal (dec), reserves (r), stable (st), and tokens (t) of token0 and token1\n    function metadata()\n        external\n        view\n        returns (uint256 dec0, uint256 dec1, uint256 r0, uint256 r1, bool st, address t0, address t1);\n\n    /// @notice Claim accumulated but unclaimed fees (claimable0 and claimable1)\n    function claimFees() external returns (uint256, uint256);\n\n    /// @notice Returns [token0, token1]\n    function tokens() external view returns (address, address);\n\n    /// @notice Address of token in the pool with the lower address value\n    function token0() external view returns (address);\n\n    /// @notice Address of token in the poool with the higher address value\n    function token1() external view returns (address);\n\n    /// @notice Address of linked PoolFees.sol\n    function poolFees() external view returns (address);\n\n    /// @notice Address of PoolFactory that created this contract\n    function factory() external view returns (address);\n\n    /// @notice Capture oracle reading every 30 minutes (1800 seconds)\n    function periodSize() external view returns (uint256);\n\n    /// @notice Amount of token0 in pool\n    function reserve0() external view returns (uint256);\n\n    /// @notice Amount of token1 in pool\n    function reserve1() external view returns (uint256);\n\n    /// @notice Timestamp of last update to pool\n    function blockTimestampLast() external view returns (uint256);\n\n    /// @notice Cumulative of reserve0 factoring in time elapsed\n    function reserve0CumulativeLast() external view returns (uint256);\n\n    /// @notice Cumulative of reserve1 factoring in time elapsed\n    function reserve1CumulativeLast() external view returns (uint256);\n\n    /// @notice Accumulated fees of token0 (global)\n    function index0() external view returns (uint256);\n\n    /// @notice Accumulated fees of token1 (global)\n    function index1() external view returns (uint256);\n\n    /// @notice Get an LP's relative index0 to index0\n    function supplyIndex0(address) external view returns (uint256);\n\n    /// @notice Get an LP's relative index1 to index1\n    function supplyIndex1(address) external view returns (uint256);\n\n    /// @notice Amount of unclaimed, but claimable tokens from fees of token0 for an LP\n    function claimable0(address) external view returns (uint256);\n\n    /// @notice Amount of unclaimed, but claimable tokens from fees of token1 for an LP\n    function claimable1(address) external view returns (uint256);\n\n    /// @notice Returns the value of K in the Pool, based on its reserves.\n    function getK() external returns (uint256);\n\n    /// @notice Set pool name\n    ///         Only callable by Voter.emergencyCouncil()\n    /// @param __name String of new name\n    function setName(string calldata __name) external;\n\n    /// @notice Set pool symbol\n    ///         Only callable by Voter.emergencyCouncil()\n    /// @param __symbol String of new symbol\n    function setSymbol(string calldata __symbol) external;\n\n    /// @notice Get the number of observations recorded\n    function observationLength() external view returns (uint256);\n\n    /// @notice Get the value of the most recent observation\n    function lastObservation() external view returns (Observation memory);\n\n    /// @notice True if pool is stable, false if volatile\n    function stable() external view returns (bool);\n\n    /// @notice Produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n    function currentCumulativePrices()\n        external\n        view\n        returns (uint256 reserve0Cumulative, uint256 reserve1Cumulative, uint256 blockTimestamp);\n\n    /// @notice Provides twap price with user configured granularity, up to the full window size\n    /// @param tokenIn .\n    /// @param amountIn .\n    /// @param granularity .\n    /// @return amountOut .\n    function quote(address tokenIn, uint256 amountIn, uint256 granularity) external view returns (uint256 amountOut);\n\n    /// @notice Returns a memory set of TWAP prices\n    ///         Same as calling sample(tokenIn, amountIn, points, 1)\n    /// @param tokenIn .\n    /// @param amountIn .\n    /// @param points Number of points to return\n    /// @return Array of TWAP prices\n    function prices(address tokenIn, uint256 amountIn, uint256 points) external view returns (uint256[] memory);\n\n    /// @notice Same as prices with with an additional window argument.\n    ///         Window = 2 means 2 * 30min (or 1 hr) between observations\n    /// @param tokenIn .\n    /// @param amountIn .\n    /// @param points .\n    /// @param window .\n    /// @return Array of TWAP prices\n    function sample(address tokenIn, uint256 amountIn, uint256 points, uint256 window)\n        external\n        view\n        returns (uint256[] memory);\n\n    /// @notice This low-level function should be called from a contract which performs important safety checks\n    /// @param amount0Out   Amount of token0 to send to `to`\n    /// @param amount1Out   Amount of token1 to send to `to`\n    /// @param to           Address to recieve the swapped output\n    /// @param data         Additional calldata for flashloans\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\n\n    /// @notice This low-level function should be called from a contract which performs important safety checks\n    ///         standard uniswap v2 implementation\n    /// @param to Address to receive token0 and token1 from burning the pool token\n    /// @return amount0 Amount of token0 returned\n    /// @return amount1 Amount of token1 returned\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice This low-level function should be called by addLiquidity functions in Router.sol, which performs important safety checks\n    ///         standard uniswap v2 implementation\n    /// @param to           Address to receive the minted LP token\n    /// @return liquidity   Amount of LP token minted\n    function mint(address to) external returns (uint256 liquidity);\n\n    /// @notice Update reserves and, on the first call per block, price accumulators\n    /// @return _reserve0 .\n    /// @return _reserve1 .\n    /// @return _blockTimestampLast .\n    function getReserves() external view returns (uint256 _reserve0, uint256 _reserve1, uint256 _blockTimestampLast);\n\n    /// @notice Get the amount of tokenOut given the amount of tokenIn\n    /// @param amountIn Amount of token in\n    /// @param tokenIn  Address of token\n    /// @return Amount out\n    function getAmountOut(uint256 amountIn, address tokenIn) external view returns (uint256);\n\n    /// @notice Force balances to match reserves\n    /// @param to Address to receive any skimmed rewards\n    function skim(address to) external;\n\n    /// @notice Force reserves to match balances\n    function sync() external;\n\n    /// @notice Called on pool creation by PoolFactory\n    /// @param _token0 Address of token0\n    /// @param _token1 Address of token1\n    /// @param _stable True if stable, false if volatile\n    function initialize(address _token0, address _token1, bool _stable) external;\n}\n"
    },
    "contracts/interfaces/mode/IVelodromeUniversalRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\nimport {IERC721Receiver} from '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\nimport {IERC1155Receiver} from '@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol';\n\ninterface IRewardsCollector {\n    /// @notice Fetches users' LooksRare rewards and sends them to the distributor contract\n    /// @param looksRareClaim The data required by LooksRare to claim reward tokens\n    function collectRewards(bytes calldata looksRareClaim) external;\n}\n\ninterface IUniversalRouter is IRewardsCollector, IERC721Receiver, IERC1155Receiver {\n    /// @notice Thrown when a required command has failed\n    error ExecutionFailed(uint256 commandIndex, bytes message);\n\n    /// @notice Thrown when attempting to send ETH directly to the contract\n    error ETHNotAccepted();\n\n    /// @notice Thrown when executing commands with an expired deadline\n    error TransactionDeadlinePassed();\n\n    /// @notice Thrown when attempting to execute commands and an incorrect number of inputs are provided\n    error LengthMismatch();\n\n    /// @notice Executes encoded commands along with provided inputs. Reverts if deadline has expired.\n    /// @param commands A set of concatenated commands, each 1 byte in length\n    /// @param inputs An array of byte strings containing abi encoded inputs for each command\n    /// @param deadline The deadline by which the transaction must be executed\n    function execute(bytes calldata commands, bytes[] calldata inputs, uint256 deadline) external payable;\n}\n"
    },
    "contracts/interfaces/mode/IVelodromeV1Quoter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title MixedRouteQuoterV1 Interface\n/// @notice Supports quoting the calculated amounts for exact input swaps. Is specialized for routes containing a mix of V2 and V3 liquidity.\n/// @notice For each pool also tells you the number of initialized ticks crossed and the sqrt price of the pool after the swap.\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\ninterface IVelodromeV1Quoter {\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\n    /// @param amountIn The amount of the first token to swap\n    /// @return amountOut The amount of the last token that would be received\n    /// @return v3SqrtPriceX96AfterList List of the sqrt price after the swap for each v3 pool in the path, 0 for v2 pools\n    /// @return v3InitializedTicksCrossedList List of the initialized ticks that the swap crossed for each v3 pool in the path, 0 for v2 pools\n    /// @return v3SwapGasEstimate The estimate of the gas that the v3 swaps in the path consume\n    function quoteExactInput(bytes memory path, uint256 amountIn)\n        external\n        returns (\n            uint256 amountOut,\n            uint160[] memory v3SqrtPriceX96AfterList,\n            uint32[] memory v3InitializedTicksCrossedList,\n            uint256 v3SwapGasEstimate\n        );\n\n    struct QuoteExactInputSingleV3Params {\n        address tokenIn;\n        address tokenOut;\n        uint256 amountIn;\n        int24 tickSpacing;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    struct QuoteExactInputSingleV2Params {\n        address tokenIn;\n        address tokenOut;\n        bool stable;\n        uint256 amountIn;\n    }\n\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\n    /// @param params The params for the quote, encoded as `QuoteExactInputSingleParams`\n    /// tokenIn The token being swapped in\n    /// tokenOut The token being swapped out\n    /// tickSpacing The tickSpacing of the token pool to consider for the pair\n    /// amountIn The desired input amount\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountOut The amount of `tokenOut` that would be received\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\n    /// @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactInputSingleV3(QuoteExactInputSingleV3Params memory params)\n        external\n        returns (uint256 amountOut, uint160 sqrtPriceX96After, uint32 initializedTicksCrossed, uint256 gasEstimate);\n\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single V2 pool\n    /// @param params The params for the quote, encoded as `QuoteExactInputSingleV2Params`\n    /// tokenIn The token being swapped in\n    /// tokenOut The token being swapped out\n    /// stable The boolean representing volatile (false) or stable (true)\n    /// amountIn The desired input amount\n    /// @return amountOut The amount of `tokenOut` that would be received\n    function quoteExactInputSingleV2(QuoteExactInputSingleV2Params memory params)\n        external\n        returns (uint256 amountOut);\n\n    /// @dev ExactOutput swaps are not supported by this new Quoter which is specialized for supporting routes\n    ///      crossing both V2 liquidity pairs and V3 pools.\n    /// @deprecated quoteExactOutputSingle and exactOutput. Use QuoterV2 instead.\n}\n"
    },
    "contracts/lib/BlackholePrevention.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// BlackholePrevention.sol -- Part of the Charged Particles Protocol\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\n\n/**\n * @notice Prevents ETH or Tokens from getting stuck in a contract by allowing\n *  the Owner/DAO to pull them out on behalf of a user\n * This is only meant to contracts that are not expected to hold tokens, but do handle transferring them.\n */\ncontract BlackholePrevention {\n    using Address for address payable;\n    using SafeERC20 for IERC20;\n\n    event WithdrawStuckEther(address indexed receiver, uint256 amount);\n    event WithdrawStuckERC20(\n        address indexed receiver,\n        address indexed tokenAddress,\n        uint256 amount\n    );\n    event WithdrawStuckERC721(\n        address indexed receiver,\n        address indexed tokenAddress,\n        uint256 indexed tokenId\n    );\n    event WithdrawStuckERC1155(\n        address indexed receiver,\n        address indexed tokenAddress,\n        uint256 indexed tokenId,\n        uint256 amount\n    );\n\n    function _withdrawEther(address payable receiver, uint256 amount)\n        internal\n        virtual\n    {\n        require(receiver != address(0x0), \"BHP:E-403\");\n        if (address(this).balance >= amount) {\n            receiver.sendValue(amount);\n            emit WithdrawStuckEther(receiver, amount);\n        }\n    }\n\n    function _withdrawERC20(\n        address payable receiver,\n        address tokenAddress,\n        uint256 amount\n    ) internal virtual {\n        require(receiver != address(0x0), \"BHP:E-403\");\n        if (IERC20(tokenAddress).balanceOf(address(this)) >= amount) {\n            IERC20(tokenAddress).safeTransfer(receiver, amount);\n            emit WithdrawStuckERC20(receiver, tokenAddress, amount);\n        }\n    }\n\n    function _withdrawERC721(\n        address payable receiver,\n        address tokenAddress,\n        uint256 tokenId\n    ) internal virtual {\n        require(receiver != address(0x0), \"BHP:E-403\");\n        if (IERC721(tokenAddress).ownerOf(tokenId) == address(this)) {\n            IERC721(tokenAddress).transferFrom(\n                address(this),\n                receiver,\n                tokenId\n            );\n            emit WithdrawStuckERC721(receiver, tokenAddress, tokenId);\n        }\n    }\n\n    function _withdrawERC1155(\n        address payable receiver,\n        address tokenAddress,\n        uint256 tokenId,\n        uint256 amount\n    ) internal virtual {\n        require(receiver != address(0x0), \"BHP:E-403\");\n        if (\n            IERC1155(tokenAddress).balanceOf(address(this), tokenId) >= amount\n        ) {\n            IERC1155(tokenAddress).safeTransferFrom(\n                address(this),\n                receiver,\n                tokenId,\n                amount,\n                \"\"\n            );\n            emit WithdrawStuckERC1155(receiver, tokenAddress, tokenId, amount);\n        }\n    }\n}\n"
    },
    "contracts/lib/ERC20Mintable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\n * which have permission to mint (create) new tokens as they see fit.\n *\n * At construction, the deployer of the contract is the only minter.\n */\ncontract ERC20Mintable is ERC20 {\n  constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {}\n\n  function mint(address account, uint256 amount) public returns (bool) {\n    _mint(account, amount);\n    return true;\n  }\n\n  function burn(address account, uint256 amount) public returns (bool) {\n    _burn(account, amount);\n    return true;\n  }\n}"
    },
    "contracts/lib/ERC721Mintable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\n\n\ncontract ERC721Mintable is ERC721, ERC721URIStorage  {\n  using Counters for Counters.Counter;\n\n  Counters.Counter private _tokenIdCounter;\n\n  constructor() ERC721(\"MyTestToken\", \"MTK\") ERC721URIStorage() {}\n\n  function mint(address to)\n    public\n    returns (uint256 tokenId)\n  {\n    tokenId = _tokenIdCounter.current();\n    _tokenIdCounter.increment();\n    _mint(to, tokenId);\n  }\n\n  function tokenURI(uint256 tokenId)\n    public\n    view\n    override(ERC721, ERC721URIStorage)\n    returns (string memory)\n  {\n    return super.tokenURI(tokenId);\n  }\n\n  function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\n      super._burn(tokenId);\n  }\n\n  function supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC721URIStorage) returns (bool) {\n    return super.supportsInterface(interfaceId);\n  }\n\n}\n"
    },
    "contracts/lib/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "contracts/lib/mode/bundlers/LPIusdUsdc.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// LPIusdUsdc.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/AlgebraRouter.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\n\n/*\n  Creates a Liquidity Position on Kim Exchange using the Algebra Router\n  Token 0 = iUSD 50%\n  Token 1 = USDC 50%\n */\ncontract LPIusdUsdc is IWeb3PacksBundler, AlgebraRouter {\n  // Inherit from the Algebra Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config) AlgebraRouter(config) {}\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 0 = iUSD on Mode (Kim Exchange)\n  function getToken0() public view override returns (IWeb3PacksDefs.Token memory token0) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token0,\n      tokenDecimals: 18,\n      tokenSymbol: \"iUSD\"\n    });\n    return token;\n  }\n\n  // Token 1 = USDC on Mode (Kim Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 6,\n      tokenSymbol: \"USDC\"\n    });\n    return token;\n  }\n\n  function getLiquidityToken(uint256 packTokenId) public override view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = _liquidityRouter;\n    tokenId = _liquidityPositionsByTokenId[packTokenId].lpTokenId;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256 packTokenId, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swaps\n    swapCustom(5000, _weth, getToken0().tokenAddress); // 50% WETH -> token0\n    swapCustom(10000, _weth, getToken1().tokenAddress); // Remaining WETH -> token1\n\n    // Deposit Liquidity\n    (uint256 amount0, uint256 amount1, , ) = getLiquidityAmounts();\n    (uint256 lpTokenId, uint256 liquidity, , ) = createLiquidityPosition(false);\n    nftTokenId = lpTokenId;\n    amountOut = liquidity;\n    tokenAddress = _liquidityRouter;\n\n    // Transfer back to Manager\n    IERC721(tokenAddress).safeTransferFrom(address(this), _manager, nftTokenId);\n\n    // Track Liquidity Position by Pack Token ID\n    _liquidityPositionsByTokenId[packTokenId] = IWeb3PacksDefs.LiquidityPosition({\n      lpTokenId: lpTokenId,\n      liquidity: liquidity,\n      stable: false\n    });\n\n    // Refund Unused Amounts\n    (uint256 unusedAmount0, uint256 unusedAmount1) = refundUnusedTokens(sender);\n    emit BundledTokenLP(\n      getToken0().tokenAddress,\n      getToken1().tokenAddress,\n      amount0 - unusedAmount0,\n      amount1 - unusedAmount1,\n      liquidity\n    );\n  }\n\n  function unbundle(address payable receiver, uint256 packTokenId, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    // Remove Liquidity\n    IWeb3PacksDefs.LiquidityPosition memory liquidityPosition = _liquidityPositionsByTokenId[packTokenId];\n    removeLiquidityPosition(liquidityPosition);\n    collectLpFees(liquidityPosition);\n\n    // Perform Swap\n    if (sellAll) {\n      // Swap Assets back to WETH\n      swapCustom(10000, getToken0().tokenAddress, _weth); // 100% token0 -> WETH\n      swapCustom(10000, getToken1().tokenAddress, _weth); // 100% token1 -> WETH\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Transfer Assets to Receiver\n      TransferHelper.safeTransfer(getToken0().tokenAddress, receiver, getBalanceToken0());\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n\n    // Clear Liquidity Position\n    delete _liquidityPositionsByTokenId[packTokenId];\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/LPWethIonx.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// LPWethIonx.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/AlgebraRouter.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\n\n/*\n  Creates a Liquidity Position on Kim Exchange using the Algebra Router\n  Token 0 = WETH 50%\n  Token 1 = IONX 50%\n */\ncontract LPWethIonx is IWeb3PacksBundler, AlgebraRouter {\n  // Inherit from the Algebra Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config) AlgebraRouter(config) {}\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 0 = WETH\n  // Token 1 = IONX on Mode (Kim Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 18,\n      tokenSymbol: \"IONX\"\n    });\n    return token;\n  }\n\n  function getLiquidityToken(uint256 packTokenId) public override view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = _liquidityRouter;\n    tokenId = _liquidityPositionsByTokenId[packTokenId].lpTokenId;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256 packTokenId, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    swapSingle(5000, false); // 50% token0 -> token1\n\n    // Deposit Liquidity\n    (uint256 amount0, uint256 amount1, , ) = getLiquidityAmounts();\n    (uint256 lpTokenId, uint256 liquidity, , ) = createLiquidityPosition(false);\n    nftTokenId = lpTokenId;\n    amountOut = liquidity;\n    tokenAddress = _liquidityRouter;\n\n    // Transfer back to Manager\n    IERC721(tokenAddress).safeTransferFrom(address(this), _manager, nftTokenId);\n\n    // Track Liquidity Position by Pack Token ID\n    _liquidityPositionsByTokenId[packTokenId] = IWeb3PacksDefs.LiquidityPosition({\n      lpTokenId: lpTokenId,\n      liquidity: liquidity,\n      stable: false\n    });\n\n    // Refund Unused Amounts\n    (uint256 unusedAmount0, uint256 unusedAmount1) = refundUnusedTokens(sender);\n    emit BundledTokenLP(\n      getToken0().tokenAddress,\n      getToken1().tokenAddress,\n      amount0 - unusedAmount0,\n      amount1 - unusedAmount1,\n      liquidity\n    );\n  }\n\n  function unbundle(address payable receiver, uint256 packTokenId, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    // Remove Liquidity\n    IWeb3PacksDefs.LiquidityPosition memory liquidityPosition = _liquidityPositionsByTokenId[packTokenId];\n    removeLiquidityPosition(liquidityPosition);\n    collectLpFees(liquidityPosition);\n\n    // Perform Swap\n    if (sellAll) {\n      // Swap Assets back to WETH\n      swapSingle(10000, true); // 100% token1 -> token0\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Transfer Assets to Receiver\n      TransferHelper.safeTransfer(getToken0().tokenAddress, receiver, getBalanceToken0());\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n\n    // Clear Liquidity Position\n    delete _liquidityPositionsByTokenId[packTokenId];\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/LPWethKim.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// LPWethKim.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/AlgebraRouter.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\n\n/*\n  Creates a Liquidity Position on Kim Exchange using the Algebra Router\n  Token 0 = WETH 50%\n  Token 1 = KIM 50%\n */\ncontract LPWethKim is IWeb3PacksBundler, AlgebraRouter {\n  // Inherit from the Algebra Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config) AlgebraRouter(config) {}\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 0 = WETH\n  // Token 1 = KIM on Mode (Kim Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 18,\n      tokenSymbol: \"KIM\"\n    });\n    return token;\n  }\n\n  function getLiquidityToken(uint256 packTokenId) public override view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = _liquidityRouter;\n    tokenId = _liquidityPositionsByTokenId[packTokenId].lpTokenId;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256 packTokenId, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    swapSingle(5000, false); // 50% token0 -> token1\n\n    // Deposit Liquidity\n    (uint256 amount0, uint256 amount1, , ) = getLiquidityAmounts();\n    (uint256 lpTokenId, uint256 liquidity, , ) = createLiquidityPosition(false);\n    nftTokenId = lpTokenId;\n    amountOut = liquidity;\n    tokenAddress = _liquidityRouter;\n\n    // Transfer back to Manager\n    IERC721(tokenAddress).safeTransferFrom(address(this), _manager, nftTokenId);\n\n    // Track Liquidity Position by Pack Token ID\n    _liquidityPositionsByTokenId[packTokenId] = IWeb3PacksDefs.LiquidityPosition({\n      lpTokenId: lpTokenId,\n      liquidity: liquidity,\n      stable: false\n    });\n\n    // Refund Unused Amounts\n    (uint256 unusedAmount0, uint256 unusedAmount1) = refundUnusedTokens(sender);\n    emit BundledTokenLP(\n      getToken0().tokenAddress,\n      getToken1().tokenAddress,\n      amount0 - unusedAmount0,\n      amount1 - unusedAmount1,\n      liquidity\n    );\n  }\n\n  function unbundle(address payable receiver, uint256 packTokenId, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    // Remove Liquidity\n    IWeb3PacksDefs.LiquidityPosition memory liquidityPosition = _liquidityPositionsByTokenId[packTokenId];\n    removeLiquidityPosition(liquidityPosition);\n    collectLpFees(liquidityPosition);\n\n    // Perform Swap\n    if (sellAll) {\n      // Swap Assets back to WETH\n      swapSingle(10000, true); // 100% token1 -> token0\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Transfer Assets to Receiver\n      TransferHelper.safeTransfer(getToken0().tokenAddress, receiver, getBalanceToken0());\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n\n    // Clear Liquidity Position\n    delete _liquidityPositionsByTokenId[packTokenId];\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/LPWethMode.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// LPWethMode.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/AlgebraRouter.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\n\n/*\n  Creates a Liquidity Position on Kim Exchange using the Algebra Router\n  Token 0 = WETH 50%\n  Token 1 = MODE 50%\n */\ncontract LPWethMode is IWeb3PacksBundler, AlgebraRouter {\n  // Inherit from the Algebra Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config) AlgebraRouter(config) {}\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 0 = WETH\n  // Token 1 = Mode on Mode (Kim Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 18,\n      tokenSymbol: \"MODE\"\n    });\n    return token;\n  }\n\n  function getLiquidityToken(uint256 packTokenId) public override view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = _liquidityRouter;\n    tokenId = _liquidityPositionsByTokenId[packTokenId].lpTokenId;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256 packTokenId, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    swapSingle(5000, false); // 50% token0 -> token1\n\n    // Deposit Liquidity\n    (uint256 amount0, uint256 amount1, , ) = getLiquidityAmounts();\n    (uint256 lpTokenId, uint256 liquidity, , ) = createLiquidityPosition(false);\n    nftTokenId = lpTokenId;\n    amountOut = liquidity;\n    tokenAddress = _liquidityRouter;\n\n    // Transfer back to Manager\n    IERC721(tokenAddress).safeTransferFrom(address(this), _manager, nftTokenId);\n\n    // Track Liquidity Position by Pack Token ID\n    _liquidityPositionsByTokenId[packTokenId] = IWeb3PacksDefs.LiquidityPosition({\n      lpTokenId: lpTokenId,\n      liquidity: liquidity,\n      stable: false\n    });\n\n    // Refund Unused Amounts\n    (uint256 unusedAmount0, uint256 unusedAmount1) = refundUnusedTokens(sender);\n    emit BundledTokenLP(\n      getToken0().tokenAddress,\n      getToken1().tokenAddress,\n      amount0 - unusedAmount0,\n      amount1 - unusedAmount1,\n      liquidity\n    );\n  }\n\n  function unbundle(address payable receiver, uint256 packTokenId, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    // Remove Liquidity\n    IWeb3PacksDefs.LiquidityPosition memory liquidityPosition = _liquidityPositionsByTokenId[packTokenId];\n    removeLiquidityPosition(liquidityPosition);\n    collectLpFees(liquidityPosition);\n\n    // Perform Swap\n    if (sellAll) {\n      // Swap Assets back to WETH\n      swapSingle(10000, true); // 100% token1 -> token0\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Transfer Assets to Receiver\n      TransferHelper.safeTransfer(getToken0().tokenAddress, receiver, getBalanceToken0());\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n\n    // Clear Liquidity Position\n    delete _liquidityPositionsByTokenId[packTokenId];\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/LPWethMode8020.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// LPWethMode8020.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/BalancerRouter.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\n\n/*\n  Creates a Liquidity Position on Balancer Exchange using the Balancer Router\n  Token 0 = WETH 20%\n  Token 1 = MODE 80%\n */\ncontract LPWethMode8020 is IWeb3PacksBundler, BalancerRouter {\n  // Inherit from the Balancer Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config) BalancerRouter(config) {}\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 0 = WETH\n  // Token 1 = Mode on Mode (Kim Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 18,\n      tokenSymbol: \"MODE\"\n    });\n    return token;\n  }\n\n  function getLiquidityToken(uint256) public override view returns (address tokenAddress, uint256 tokenId) {\n    (address poolAddress, ) = IBalancerV2Vault(_liquidityRouter).getPool(_poolId);\n    tokenAddress = poolAddress;\n    tokenId = 0;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256 packTokenId, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    swapSingle(8000, false); // 80% token0 -> token1\n\n    // Deposit Liquidity\n    (uint256 amount0, uint256 amount1, , ) = getLiquidityAmounts();\n    (uint256 lpTokenId, uint256 liquidity, , ) = createLiquidityPosition(false);\n    address poolAddress = address(uint160(lpTokenId));\n    nftTokenId = 0;\n    amountOut = liquidity;\n    tokenAddress = poolAddress;\n\n    // Transfer back to Manager\n    TransferHelper.safeTransfer(poolAddress, _manager, amountOut);\n\n    // Track Liquidity Position by Pack Token ID\n    _liquidityPositionsByTokenId[packTokenId] = IWeb3PacksDefs.LiquidityPosition({\n      lpTokenId: lpTokenId,\n      liquidity: liquidity,\n      stable: false\n    });\n\n    // Refund Unused Amounts\n    (uint256 unusedAmount0, uint256 unusedAmount1) = refundUnusedTokens(sender);\n    emit BundledTokenLP(\n      getToken0().tokenAddress,\n      getToken1().tokenAddress,\n      amount0 - unusedAmount0,\n      amount1 - unusedAmount1,\n      liquidity\n    );\n  }\n\n  function unbundle(address payable receiver, uint256 packTokenId, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    IWeb3PacksDefs.LiquidityPosition memory liquidityPosition = _liquidityPositionsByTokenId[packTokenId];\n\n    // Perform Swap\n    if (sellAll) {\n      // Remove Liquidity\n      removeLiquidityPosition(liquidityPosition);\n      collectLpFees(liquidityPosition);\n\n      // Swap Assets back to WETH\n      swapSingle(10000, true); // 100% token1 -> token0\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // NOTE: For this Bundle, we want users to be able to Unbundle and receive the actual Liquidity for Voting Purposes\n      (address lpTokenAddress, ) = getLiquidityToken(packTokenId);\n\n      // Transfer Assets to Receiver\n      TransferHelper.safeTransfer(lpTokenAddress, receiver, liquidityPosition.liquidity);\n    }\n\n    // Clear Liquidity Position\n    delete _liquidityPositionsByTokenId[packTokenId];\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/LPWethStone.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// LPWethStone.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/AlgebraRouter.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\n\n/*\n  Creates a Liquidity Position on Kim Exchange using the Algebra Router\n  Token 0 = WETH 50%\n  Token 1 = STONE 50%\n */\ncontract LPWethStone is IWeb3PacksBundler, AlgebraRouter {\n  // Inherit from the Algebra Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config) AlgebraRouter(config) {}\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 0 = WETH\n  // Token 1 = STONE on Mode (Kim Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 6,\n      tokenSymbol: \"STONE\"\n    });\n    return token;\n  }\n\n  function getLiquidityToken(uint256 packTokenId) public override view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = _liquidityRouter;\n    tokenId = _liquidityPositionsByTokenId[packTokenId].lpTokenId;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256 packTokenId, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    swapSingle(5000, false); // 50% token0 -> token1\n\n    // Deposit Liquidity\n    (uint256 amount0, uint256 amount1, , ) = getLiquidityAmounts();\n    (uint256 lpTokenId, uint256 liquidity, , ) = createLiquidityPosition(false);\n    nftTokenId = lpTokenId;\n    amountOut = liquidity;\n    tokenAddress = _liquidityRouter;\n\n    // Transfer back to Manager\n    IERC721(tokenAddress).safeTransferFrom(address(this), _manager, nftTokenId);\n\n    // Track Liquidity Position by Pack Token ID\n    _liquidityPositionsByTokenId[packTokenId] = IWeb3PacksDefs.LiquidityPosition({\n      lpTokenId: lpTokenId,\n      liquidity: liquidity,\n      stable: false\n    });\n\n    // Refund Unused Amounts\n    (uint256 unusedAmount0, uint256 unusedAmount1) = refundUnusedTokens(sender);\n    emit BundledTokenLP(\n      getToken0().tokenAddress,\n      getToken1().tokenAddress,\n      amount0 - unusedAmount0,\n      amount1 - unusedAmount1,\n      liquidity\n    );\n  }\n\n  function unbundle(address payable receiver, uint256 packTokenId, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    // Remove Liquidity\n    IWeb3PacksDefs.LiquidityPosition memory liquidityPosition = _liquidityPositionsByTokenId[packTokenId];\n    removeLiquidityPosition(liquidityPosition);\n    collectLpFees(liquidityPosition);\n\n    // Perform Swap\n    if (sellAll) {\n      // Swap Assets back to WETH\n      swapSingle(10000, true); // 100% token1 -> token0\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Transfer Assets to Receiver\n      TransferHelper.safeTransfer(getToken0().tokenAddress, receiver, getBalanceToken0());\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n\n    // Clear Liquidity Position\n    delete _liquidityPositionsByTokenId[packTokenId];\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/LPWethUsdc.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// LPWethUsdc.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/AlgebraRouter.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\n\n/*\n  Creates a Liquidity Position on Kim Exchange using the Algebra Router\n  Token 0 = WETH 50%\n  Token 1 = USDC 50%\n */\ncontract LPWethUsdc is IWeb3PacksBundler, AlgebraRouter {\n  // Inherit from the Algebra Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config) AlgebraRouter(config) {}\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 0 = WETH\n  // Token 1 = USDC on Mode (Kim Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 6,\n      tokenSymbol: \"USDC\"\n    });\n    return token;\n  }\n\n  function getLiquidityToken(uint256 packTokenId) public override view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = _liquidityRouter;\n    tokenId = _liquidityPositionsByTokenId[packTokenId].lpTokenId;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256 packTokenId, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    swapSingle(5000, false); // 50% token0 -> token1\n\n    // Deposit Liquidity\n    (uint256 amount0, uint256 amount1, , ) = getLiquidityAmounts();\n    (uint256 lpTokenId, uint256 liquidity, , ) = createLiquidityPosition(false);\n    nftTokenId = lpTokenId;\n    amountOut = liquidity;\n    tokenAddress = _liquidityRouter;\n\n    // Transfer back to Manager\n    IERC721(tokenAddress).safeTransferFrom(address(this), _manager, nftTokenId);\n\n    // Track Liquidity Position by Pack Token ID\n    _liquidityPositionsByTokenId[packTokenId] = IWeb3PacksDefs.LiquidityPosition({\n      lpTokenId: lpTokenId,\n      liquidity: liquidity,\n      stable: false\n    });\n\n    // Refund Unused Amounts\n    (uint256 unusedAmount0, uint256 unusedAmount1) = refundUnusedTokens(sender);\n    emit BundledTokenLP(\n      getToken0().tokenAddress,\n      getToken1().tokenAddress,\n      amount0 - unusedAmount0,\n      amount1 - unusedAmount1,\n      liquidity\n    );\n  }\n\n  function unbundle(address payable receiver, uint256 packTokenId, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    // Remove Liquidity\n    IWeb3PacksDefs.LiquidityPosition memory liquidityPosition = _liquidityPositionsByTokenId[packTokenId];\n    removeLiquidityPosition(liquidityPosition);\n    collectLpFees(liquidityPosition);\n\n    // Perform Swap\n    if (sellAll) {\n      // Swap Assets back to WETH\n      swapSingle(10000, true); // 100% token1 -> token0\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Transfer Assets to Receiver\n      TransferHelper.safeTransfer(getToken0().tokenAddress, receiver, getBalanceToken0());\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n\n    // Clear Liquidity Position\n    delete _liquidityPositionsByTokenId[packTokenId];\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/LPWethWbtc.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// LPWethWbtc.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/AlgebraRouter.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\n\n/*\n  Creates a Liquidity Position on Kim Exchange using the Algebra Router\n  Token 0 = WETH 50%\n  Token 1 = WBTC 50%\n */\ncontract LPWethWbtc is IWeb3PacksBundler, AlgebraRouter {\n  // Inherit from the Algebra Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config) AlgebraRouter(config) {}\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 0 = WETH\n  // Token 1 = WBTC on Mode (Kim Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 8,\n      tokenSymbol: \"WBTC\"\n    });\n    return token;\n  }\n\n  function getLiquidityToken(uint256 packTokenId) public override view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = _liquidityRouter;\n    tokenId = _liquidityPositionsByTokenId[packTokenId].lpTokenId;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256 packTokenId, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    swapSingle(5000, false); // 50% token0 -> token1\n\n    // Deposit Liquidity\n    (uint256 amount0, uint256 amount1, , ) = getLiquidityAmounts();\n    (uint256 lpTokenId, uint256 liquidity, , ) = createLiquidityPosition(false);\n    nftTokenId = lpTokenId;\n    amountOut = liquidity;\n    tokenAddress = _liquidityRouter;\n\n    // Transfer back to Manager\n    IERC721(tokenAddress).safeTransferFrom(address(this), _manager, nftTokenId);\n\n    // Track Liquidity Position by Pack Token ID\n    _liquidityPositionsByTokenId[packTokenId] = IWeb3PacksDefs.LiquidityPosition({\n      lpTokenId: lpTokenId,\n      liquidity: liquidity,\n      stable: false\n    });\n\n    // Refund Unused Amounts\n    (uint256 unusedAmount0, uint256 unusedAmount1) = refundUnusedTokens(sender);\n    emit BundledTokenLP(\n      getToken0().tokenAddress,\n      getToken1().tokenAddress,\n      amount0 - unusedAmount0,\n      amount1 - unusedAmount1,\n      liquidity\n    );\n  }\n\n  function unbundle(address payable receiver, uint256 packTokenId, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    // Remove Liquidity\n    IWeb3PacksDefs.LiquidityPosition memory liquidityPosition = _liquidityPositionsByTokenId[packTokenId];\n    removeLiquidityPosition(liquidityPosition);\n    collectLpFees(liquidityPosition);\n\n    // Perform Swap\n    if (sellAll) {\n      // Swap Assets back to WETH\n      swapSingle(10000, true); // 100% token1 -> token0\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Transfer Assets to Receiver\n      TransferHelper.safeTransfer(getToken0().tokenAddress, receiver, getBalanceToken0());\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n\n    // Clear Liquidity Position\n    delete _liquidityPositionsByTokenId[packTokenId];\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/SSWethBmx.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// SSWethBmx.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/VelodromeV1Router.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\nimport \"../../../interfaces/mode/IVelodrome.sol\";\nimport \"../../../interfaces/mode/IVelodromeV1Quoter.sol\";\nimport \"hardhat/console.sol\";\n\n/*\n  Performs a Single-Sided Swap on Velodrome Exchange using the Velodrome V1 Router\n  Token 0 = WETH\n  Token 1 = BMX\n */\ncontract SSWethBmx is IWeb3PacksBundler, VelodromeV1Router {\n  address public _usdc;\n  address public _wmlt;\n\n  // Inherit from the Velodrome V1 Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config, address usdc, address wmlt) VelodromeV1Router(config) {\n    _usdc = usdc;\n    _wmlt = wmlt;\n  }\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 1 = BMX on Mode (Velodrome Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 18,\n      tokenSymbol: \"BMX\"\n    });\n    return token;\n  }\n\n  /// @dev This can be overridden to specify custom liquidity tokens\n  function getLiquidityToken(uint256) public virtual view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = getToken1().tokenAddress;\n    tokenId = 0;\n  }\n\n  function getTokenPath(bool reverse) public override view returns (IWeb3PacksDefs.Route[] memory tokenPath) {\n    IWeb3PacksDefs.Route[] memory tokens = new IWeb3PacksDefs.Route[](3);\n    if (reverse) {\n      tokens[0] = IWeb3PacksDefs.Route({token0: getToken1().tokenAddress, token1: _wmlt, stable: false});\n      tokens[1] = IWeb3PacksDefs.Route({token0: _wmlt, token1: _usdc, stable: false});\n      tokens[2] = IWeb3PacksDefs.Route({token0: _usdc, token1: getToken0().tokenAddress, stable: false});\n    } else {\n      tokens[0] = IWeb3PacksDefs.Route({token0: getToken0().tokenAddress, token1: _usdc, stable: false});\n      tokens[1] = IWeb3PacksDefs.Route({token0: _usdc, token1: _wmlt, stable: false});\n      tokens[2] = IWeb3PacksDefs.Route({token0: _wmlt, token1: getToken1().tokenAddress, stable: false});\n    }\n    return tokens;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    amountOut = swapSingle(10000, false); // 100% token0 -> token1\n\n    // Transfer back to Manager\n    tokenAddress = getToken1().tokenAddress;\n    nftTokenId = 0;\n    TransferHelper.safeTransfer(tokenAddress, _manager, amountOut);\n\n    // Refund Unused Amounts\n    refundUnusedTokens(sender);\n    emit BundledTokenSS(tokenAddress, amountOut);\n  }\n\n  function unbundle(address payable receiver, uint256, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    if (sellAll) {\n      // Perform Swap\n      swapSingle(10000, true); // 100% token1 -> token0\n\n      // Send ETH to Receiver\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Send Tokens to Receiver\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/SSWethCartel.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// SSWethCartel.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/VelodromeV2Router.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\nimport \"hardhat/console.sol\";\n\n/*\n  Performs a Single-Sided Swap on Velodrome Exchange using the Velodrome Universal Router\n  Token 0 = WETH\n  Token 1 = CARTEL\n */\ncontract SSWethCartel is IWeb3PacksBundler, VelodromeV2Router {\n  address public _mode;\n\n  // Inherit from the Velodrome Universal Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config, address mode) VelodromeV2Router(config) {\n    _mode = mode;\n  }\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 1 = CARTEL on Mode (Velodrome Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 18,\n      tokenSymbol: \"CARTEL\"\n    });\n    return token;\n  }\n\n  /// @dev This can be overridden to specify custom liquidity tokens\n  function getLiquidityToken(uint256) public virtual view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = getToken1().tokenAddress;\n    tokenId = 0;\n  }\n\n  function getTokenPath(bool reverse) public override view returns (IWeb3PacksDefs.Route[] memory tokenPath) {\n    IWeb3PacksDefs.Route[] memory tokens = new IWeb3PacksDefs.Route[](2);\n    if (reverse) {\n      tokens[0] = IWeb3PacksDefs.Route({token0: getToken1().tokenAddress, token1: _mode, stable: false});\n      tokens[1] = IWeb3PacksDefs.Route({token0: _mode, token1: getToken0().tokenAddress, stable: false});\n    } else {\n      tokens[0] = IWeb3PacksDefs.Route({token0: getToken0().tokenAddress, token1: _mode, stable: false});\n      tokens[1] = IWeb3PacksDefs.Route({token0: _mode, token1: getToken1().tokenAddress, stable: false});\n    }\n    return tokens;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    amountOut = swapSingle(10000, false); // 100% token0 -> token1\n\n    // Transfer back to Manager\n    tokenAddress = getToken1().tokenAddress;\n    nftTokenId = 0;\n    TransferHelper.safeTransfer(tokenAddress, _manager, amountOut);\n\n    // Refund Unused Amounts\n    refundUnusedTokens(sender);\n    emit BundledTokenSS(tokenAddress, amountOut);\n  }\n\n  function unbundle(address payable receiver, uint256, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    if (sellAll) {\n      // Perform Swap\n      swapSingle(10000, true); // 100% token1 -> token0\n\n      // Send ETH to Receiver\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Send Token to Receiver\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/SSWethGambl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// SSWethGambl.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/VelodromeV2Router.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\n\n/*\n  Performs a Single-Sided Swap on Velodrome Exchange using the Velodrome Universal Router\n  Token 0 = WETH\n  Token 1 = GAMBL\n */\ncontract SSWethGambl is IWeb3PacksBundler, VelodromeV2Router {\n  address public _mode;\n\n  // Inherit from the Velodrome Universal Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config, address mode) VelodromeV2Router(config) {\n    _mode = mode;\n  }\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 1 = GAMBL on Mode (Velodrome Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 18,\n      tokenSymbol: \"GAMBL\"\n    });\n    return token;\n  }\n\n  /// @dev This can be overridden to specify custom liquidity tokens\n  function getLiquidityToken(uint256) public virtual view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = getToken1().tokenAddress;\n    tokenId = 0;\n  }\n\n  function getTokenPath(bool reverse) public override view returns (IWeb3PacksDefs.Route[] memory tokenPath) {\n    IWeb3PacksDefs.Route[] memory tokens = new IWeb3PacksDefs.Route[](2);\n    if (reverse) {\n      tokens[0] = IWeb3PacksDefs.Route({token0: getToken1().tokenAddress, token1: _mode, stable: false});\n      tokens[1] = IWeb3PacksDefs.Route({token0: _mode, token1: getToken0().tokenAddress, stable: false});\n    } else {\n      tokens[0] = IWeb3PacksDefs.Route({token0: getToken0().tokenAddress, token1: _mode, stable: false});\n      tokens[1] = IWeb3PacksDefs.Route({token0: _mode, token1: getToken1().tokenAddress, stable: false});\n    }\n    return tokens;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    amountOut = swapSingle(10000, false); // 100% token0 -> token1\n\n    // Transfer back to Manager\n    tokenAddress = getToken1().tokenAddress;\n    nftTokenId = 0;\n    TransferHelper.safeTransfer(tokenAddress, _manager, amountOut);\n\n    // Refund Unused Amounts\n    refundUnusedTokens(sender);\n    emit BundledTokenSS(tokenAddress, amountOut);\n  }\n\n  function unbundle(address payable receiver, uint256, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    if (sellAll) {\n      // Perform Swap\n      swapSingle(10000, true); // 100% token1 -> token0\n\n      // Send ETH to Receiver\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Send Token to Receiver\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/SSWethIcl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// SSWethIcl.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/VelodromeV1Router.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\nimport \"../../../interfaces/mode/IVelodrome.sol\";\nimport \"hardhat/console.sol\";\n\n/*\n  Performs a Single-Sided Swap on Velodrome Exchange using the Velodrome V1 Router\n  Token 0 = WETH\n  Token 1 = ICL\n */\ncontract SSWethIcl is IWeb3PacksBundler, VelodromeV1Router {\n  address public _mode;\n\n  // Inherit from the Velodrome V1 Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config, address mode) VelodromeV1Router(config) {\n    _mode = mode;\n  }\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 1 = ICL on Mode (Velodrome Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 18,\n      tokenSymbol: \"ICL\"\n    });\n    return token;\n  }\n\n  /// @dev This can be overridden to specify custom liquidity tokens\n  function getLiquidityToken(uint256) public virtual view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = getToken1().tokenAddress;\n    tokenId = 0;\n  }\n\n  function getTokenPath(bool reverse) public override view returns (IWeb3PacksDefs.Route[] memory tokenPath) {\n    IWeb3PacksDefs.Route[] memory tokens = new IWeb3PacksDefs.Route[](2);\n    if (reverse) {\n      tokens[0] = IWeb3PacksDefs.Route({token0: getToken1().tokenAddress, token1: _mode, stable: false});\n      tokens[1] = IWeb3PacksDefs.Route({token0: _mode, token1: getToken0().tokenAddress, stable: false});\n    } else {\n      tokens[0] = IWeb3PacksDefs.Route({token0: getToken0().tokenAddress, token1: _mode, stable: false});\n      tokens[1] = IWeb3PacksDefs.Route({token0: _mode, token1: getToken1().tokenAddress, stable: false});\n    }\n    return tokens;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    amountOut = swapSingle(10000, false); // 100% token0 -> token1\n\n    // Transfer back to Manager\n    tokenAddress = getToken1().tokenAddress;\n    nftTokenId = 0;\n    TransferHelper.safeTransfer(tokenAddress, _manager, amountOut);\n\n    // Refund Unused Amounts\n    refundUnusedTokens(sender);\n    emit BundledTokenSS(tokenAddress, amountOut);\n  }\n\n  function unbundle(address payable receiver, uint256, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    if (sellAll) {\n      // Perform Swap\n      swapSingle(10000, true); // 100% token1 -> token0\n\n      // Send ETH to Receiver\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Send Token to Receiver\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/SSWethIonx.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// SSWethIonx.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/AlgebraRouter.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\n\n/*\n  Performs a Single-Sided Swap on Kim Exchange using the Algebra Router\n  Token 0 = WETH\n  Token 1 = IONX\n */\ncontract SSWethIonx is IWeb3PacksBundler, AlgebraRouter {\n  // Inherit from the Algebra Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config) AlgebraRouter(config) {}\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 1 = IONX on Mode (Kim Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 18,\n      tokenSymbol: \"IONX\"\n    });\n    return token;\n  }\n\n  /// @dev This can be overridden to specify custom liquidity tokens\n  function getLiquidityToken(uint256) public virtual view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = getToken1().tokenAddress;\n    tokenId = 0;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    amountOut = swapSingle(10000, false); // 100% token0 -> token1\n\n    // Transfer back to Manager\n    tokenAddress = getToken1().tokenAddress;\n    nftTokenId = 0;\n    TransferHelper.safeTransfer(tokenAddress, _manager, amountOut);\n\n    // Refund Unused Amounts\n    refundUnusedTokens(sender);\n    emit BundledTokenSS(tokenAddress, amountOut);\n  }\n\n  function unbundle(address payable receiver, uint256, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    if (sellAll) {\n      // Perform Swap\n      swapSingle(10000, true); // 100% token1 -> token0\n\n      // Send ETH to Receiver\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Send Token to Receiver\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/SSWethKim.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// SSWethKim.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/AlgebraRouter.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\n\n/*\n  Performs a Single-Sided Swap on Kim Exchange using the Algebra Router\n  Token 0 = WETH\n  Token 1 = KIM\n */\ncontract SSWethKim is IWeb3PacksBundler, AlgebraRouter {\n  // Inherit from the Algebra Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config) AlgebraRouter(config) {}\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 1 = KIM on Mode (Kim Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 18,\n      tokenSymbol: \"KIM\"\n    });\n    return token;\n  }\n\n  /// @dev This can be overridden to specify custom liquidity tokens\n  function getLiquidityToken(uint256) public virtual view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = getToken1().tokenAddress;\n    tokenId = 0;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    amountOut = swapSingle(10000, false); // 100% token0 -> token1\n\n    // Transfer back to Manager\n    tokenAddress = getToken1().tokenAddress;\n    nftTokenId = 0;\n    TransferHelper.safeTransfer(tokenAddress, _manager, amountOut);\n\n    // Refund Unused Amounts\n    refundUnusedTokens(sender);\n    emit BundledTokenSS(tokenAddress, amountOut);\n  }\n\n  function unbundle(address payable receiver, uint256, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    if (sellAll) {\n      // Perform Swap\n      swapSingle(10000, true); // 100% token1 -> token0\n\n      // Send ETH to Receiver\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Send Token to Receiver\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/SSWethMode.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// SSWethMode.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/AlgebraRouter.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\n\n/*\n  Performs a Single-Sided Swap on Kim Exchange using the Algebra Router\n  Token 0 = WETH\n  Token 1 = MODE\n */\ncontract SSWethMode is IWeb3PacksBundler, AlgebraRouter {\n  // Inherit from the Algebra Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config) AlgebraRouter(config) {}\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 1 = MODE on Mode (Kim Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 18,\n      tokenSymbol: \"MODE\"\n    });\n    return token;\n  }\n\n  /// @dev This can be overridden to specify custom liquidity tokens\n  function getLiquidityToken(uint256) public virtual view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = getToken1().tokenAddress;\n    tokenId = 0;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    amountOut = swapSingle(10000, false); // 100% token0 -> token1\n\n    // Transfer back to Manager\n    tokenAddress = getToken1().tokenAddress;\n    nftTokenId = 0;\n    TransferHelper.safeTransfer(tokenAddress, _manager, amountOut);\n\n    // Refund Unused Amounts\n    refundUnusedTokens(sender);\n    emit BundledTokenSS(tokenAddress, amountOut);\n  }\n\n  function unbundle(address payable receiver, uint256, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    if (sellAll) {\n      // Perform Swap\n      swapSingle(10000, true); // 100% token1 -> token0\n\n      // Send ETH to Receiver\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Send Token to Receiver\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/SSWethPacky.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// SSWethPacky.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/VelodromeV2Router.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\n\n/*\n  Performs a Single-Sided Swap on Velodrome Exchange using the Velodrome Universal Router\n  Token 0 = WETH\n  Token 1 = PACKY\n */\ncontract SSWethPacky is IWeb3PacksBundler, VelodromeV2Router {\n  address public _mode;\n\n  // Inherit from the Algebra Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config, address mode) VelodromeV2Router(config) {\n    _mode = mode;\n  }\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 1 = PACKY on Mode (Velodrome Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 18,\n      tokenSymbol: \"PACKY\"\n    });\n    return token;\n  }\n\n  function getTokenPath(bool reverse) public override view returns (IWeb3PacksDefs.Route[] memory tokenPath) {\n    IWeb3PacksDefs.Route[] memory tokens = new IWeb3PacksDefs.Route[](2);\n    if (reverse) {\n      tokens[0] = IWeb3PacksDefs.Route({token0: getToken1().tokenAddress, token1: _mode, stable: false});\n      tokens[1] = IWeb3PacksDefs.Route({token0: _mode, token1: getToken0().tokenAddress, stable: false});\n    } else {\n      tokens[0] = IWeb3PacksDefs.Route({token0: getToken0().tokenAddress, token1: _mode, stable: false});\n      tokens[1] = IWeb3PacksDefs.Route({token0: _mode, token1: getToken1().tokenAddress, stable: false});\n    }\n    return tokens;\n  }\n\n  /// @dev This can be overridden to specify custom liquidity tokens\n  function getLiquidityToken(uint256) public virtual view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = getToken1().tokenAddress;\n    tokenId = 0;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    amountOut = swapSingle(10000, false); // 100% token0 -> token1\n\n    // Transfer back to Manager\n    tokenAddress = getToken1().tokenAddress;\n    nftTokenId = 0;\n    TransferHelper.safeTransfer(tokenAddress, _manager, amountOut);\n\n    // Refund Unused Amounts\n    refundUnusedTokens(sender);\n    emit BundledTokenSS(tokenAddress, amountOut);\n  }\n\n  function unbundle(address payable receiver, uint256, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    if (sellAll) {\n      // Perform Swap\n      swapSingle(10000, true); // 100% token1 -> token0\n\n      // Send ETH to Receiver\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Send Token to Receiver\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/SSWethSmd.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// SSWethSmd.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/PancakeRouter.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\n\n/*\n  Performs a Single-Sided Swap on SwapMode Exchange using the Pancake Router\n  Token 0 = WETH\n  Token 1 = SMD\n */\ncontract SSWethSmd is IWeb3PacksBundler, PancakeRouter {\n  // Inherit from the Pancake Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config) PancakeRouter(config) {}\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 1 = SMD on Mode (SwapMode Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 18,\n      tokenSymbol: \"SMD\"\n    });\n    return token;\n  }\n\n  /// @dev This can be overridden to specify custom liquidity tokens\n  function getLiquidityToken(uint256) public virtual view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = getToken1().tokenAddress;\n    tokenId = 0;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    amountOut = swapSingle(10000, false); // 100% token0 -> token1\n\n    // Transfer back to Manager\n    tokenAddress = getToken1().tokenAddress;\n    nftTokenId = 0;\n    TransferHelper.safeTransfer(tokenAddress, _manager, amountOut);\n\n    // Refund Unused Amounts\n    refundUnusedTokens(sender);\n    emit BundledTokenSS(tokenAddress, amountOut);\n  }\n\n  function unbundle(address payable receiver, uint256, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    if (sellAll) {\n      // Perform Swap\n      swapSingle(10000, true); // 100% token1 -> token0\n\n      // Send ETH to Receiver\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Send Token to Receiver\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/SSWethWmlt.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// SSWethWmlt.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/VelodromeV1Router.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\nimport \"../../../interfaces/mode/IVelodrome.sol\";\n\n/*\n  Performs a Single-Sided Swap on Velodrome Exchange using the Velodrome V1 Router\n  Token 0 = WETH\n  Token 1 = wMLT\n */\ncontract SSWethWmlt is IWeb3PacksBundler, VelodromeV1Router {\n  address public _usdc;\n\n  // Inherit from the Velodrome V1 Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config, address usdc) VelodromeV1Router(config) {\n    _usdc = usdc;\n  }\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 1 = wMLT on Mode (Velodrome Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 18,\n      tokenSymbol: \"wMLT\"\n    });\n    return token;\n  }\n\n  function getTokenPath(bool reverse) public override view returns (IWeb3PacksDefs.Route[] memory tokenPath) {\n    IWeb3PacksDefs.Route[] memory tokens = new IWeb3PacksDefs.Route[](2);\n    if (reverse) {\n      tokens[0] = IWeb3PacksDefs.Route({token0: getToken1().tokenAddress, token1: _usdc, stable: false});\n      tokens[1] = IWeb3PacksDefs.Route({token0: _usdc, token1: getToken0().tokenAddress, stable: false});\n    } else {\n      tokens[0] = IWeb3PacksDefs.Route({token0: getToken0().tokenAddress, token1: _usdc, stable: false});\n      tokens[1] = IWeb3PacksDefs.Route({token0: _usdc, token1: getToken1().tokenAddress, stable: false});\n    }\n    return tokens;\n  }\n\n  /// @dev This can be overridden to specify custom liquidity tokens\n  function getLiquidityToken(uint256) public virtual view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = getToken1().tokenAddress;\n    tokenId = 0;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    amountOut = swapSingle(10000, false); // 100% token0 -> token1\n\n    // Transfer back to Manager\n    tokenAddress = getToken1().tokenAddress;\n    nftTokenId = 0;\n    TransferHelper.safeTransfer(tokenAddress, _manager, amountOut);\n\n    // Refund Unused Amounts\n    refundUnusedTokens(sender);\n    emit BundledTokenSS(tokenAddress, amountOut);\n  }\n\n  function unbundle(address payable receiver, uint256, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    if (sellAll) {\n      // Perform Swap\n      swapSingle(10000, true); // 100% token1 -> token0\n\n      // Send ETH to Receiver\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Send Token to Receiver\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n  }\n}\n"
    },
    "contracts/lib/mode/routers/AlgebraRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// AlgebraRouter.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../../Web3PacksRouterBase.sol\";\nimport \"../../../interfaces/IWeb3PacksDefs.sol\";\nimport \"../../../interfaces/mode/IAlgebraRouter.sol\";\nimport \"../../../interfaces/mode/IAlgebraQuoter.sol\";\nimport \"../../../interfaces/mode/INonfungiblePositionManager.sol\";\n\n\n// UniswapV3-like Router\nabstract contract AlgebraRouter is Web3PacksRouterBase {\n  // Pass constructor data\n  constructor(IWeb3PacksDefs.RouterConfig memory config) Web3PacksRouterBase(config) {}\n\n  function swapSingle(uint256 percentOfAmount, bool reverse)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amountOut)\n  {\n    IWeb3PacksDefs.Token memory token0 = reverse ? getToken1() : getToken0();\n    IWeb3PacksDefs.Token memory token1 = reverse ? getToken0() : getToken1();\n    amountOut = _performSwap(percentOfAmount, token0.tokenAddress, token1.tokenAddress);\n  }\n\n  function swapCustom(uint256 percentOfAmount, address token0, address token1)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amountOut)\n  {\n    amountOut = _performSwap(percentOfAmount, token0, token1);\n  }\n\n  function createLiquidityPosition(bool)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (\n      uint256 lpTokenId,\n      uint256 liquidity,\n      uint256 amount0,\n      uint256 amount1\n    )\n  {\n    IWeb3PacksDefs.Token memory token0 = getToken0();\n    IWeb3PacksDefs.Token memory token1 = getToken1();\n    (\n      uint256 balanceAmount0,\n      uint256 balanceAmount1,\n      uint256 minAmount0,\n      uint256 minAmount1\n    ) = getLiquidityAmounts();\n\n    TransferHelper.safeApprove(token0.tokenAddress, _liquidityRouter, balanceAmount0);\n    TransferHelper.safeApprove(token1.tokenAddress, _liquidityRouter, balanceAmount1);\n\n    // Add Liquidity\n    INonfungiblePositionManager.MintParams memory params =\n      INonfungiblePositionManager.MintParams({\n        token0: token0.tokenAddress,\n        token1: token1.tokenAddress,\n        tickLower: _tickLower,\n        tickUpper: _tickUpper,\n        amount0Desired: balanceAmount0,\n        amount1Desired: balanceAmount1,\n        amount0Min: minAmount0,\n        amount1Min: minAmount1,\n        recipient: address(this),\n        deadline: block.timestamp\n      });\n    (lpTokenId, liquidity, amount0, amount1) = INonfungiblePositionManager(_liquidityRouter).mint(params);\n  }\n\n  function collectLpFees(IWeb3PacksDefs.LiquidityPosition memory liquidityPosition)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amount0, uint256 amount1)\n  {\n    INonfungiblePositionManager.CollectParams memory params =\n      INonfungiblePositionManager.CollectParams({\n        tokenId: liquidityPosition.lpTokenId,\n        recipient: address(this),\n        amount0Max: type(uint128).max,\n        amount1Max: type(uint128).max\n      });\n\n    (amount0, amount1) = INonfungiblePositionManager(_liquidityRouter).collect(params);\n  }\n\n  function removeLiquidityPosition(IWeb3PacksDefs.LiquidityPosition memory liquidityPosition)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint amount0, uint amount1)\n  {\n    // Release Liquidity\n    INonfungiblePositionManager.DecreaseLiquidityParams memory params =\n      INonfungiblePositionManager.DecreaseLiquidityParams({\n        tokenId: liquidityPosition.lpTokenId,\n        liquidity: uint128(liquidityPosition.liquidity),\n        amount0Min: 0, // liquidityPairs.token0.amount,\n        amount1Min: 0, // liquidityPairs.token1.amount,\n        deadline: block.timestamp\n      });\n    (amount0, amount1) = INonfungiblePositionManager(_liquidityRouter).decreaseLiquidity(params);\n  }\n\n\n  function _performSwap(uint256 percentOfAmount, address token0, address token1)\n    internal\n    returns (uint256 amountOut)\n  {\n    IAlgebraRouter.ExactInputSingleParams memory params;\n    uint256 balance = IERC20(token0).balanceOf(address(this));\n    uint256 swapAmount = (balance * percentOfAmount) / 10000;\n\n    if (swapAmount > 0) {\n      TransferHelper.safeApprove(token0, _swapRouter, swapAmount);\n      params = IAlgebraRouter.ExactInputSingleParams(token0, token1, address(this), block.timestamp, swapAmount, 0, 0);\n      IAlgebraRouter(_swapRouter).exactInputSingle(params);\n      amountOut = IERC20(token1).balanceOf(address(this));\n    }\n  }\n}\n"
    },
    "contracts/lib/mode/routers/BalancerRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// BalancerRouter.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../../Web3PacksRouterBase.sol\";\nimport \"../../../interfaces/IWeb3PacksDefs.sol\";\nimport {IAsset, IBalancerV2Vault} from \"../../../interfaces/mode/IBalancerV2Vault.sol\";\nimport {IBalancerQueries} from \"../../../interfaces/mode/IBalancerQueries.sol\";\n\nabstract contract BalancerRouter is Web3PacksRouterBase {\n  // Pass constructor data\n  constructor(IWeb3PacksDefs.RouterConfig memory config) Web3PacksRouterBase(config) {}\n\n  function swapSingle(uint256 percentOfAmount, bool reverse)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amountOut)\n  {\n    IWeb3PacksDefs.Token memory token0 = reverse ? getToken1() : getToken0();\n    IWeb3PacksDefs.Token memory token1 = reverse ? getToken0() : getToken1();\n    amountOut = _performSwap(percentOfAmount, token0.tokenAddress, token1.tokenAddress);\n  }\n\n  function swapCustom(uint256 percentOfAmount, address token0, address token1)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amountOut)\n  {\n    amountOut = _performSwap(percentOfAmount, token0, token1);\n  }\n\n  function createLiquidityPosition(bool)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (\n      uint256 lpTokenId,\n      uint256 liquidity,\n      uint256 amount0,\n      uint256 amount1\n    )\n  {\n    (address poolAddress, ) = IBalancerV2Vault(_liquidityRouter).getPool(_poolId);\n    (uint256 balanceAmount0, uint256 balanceAmount1, , ) = getLiquidityAmounts();\n\n    (address[] memory addresses, uint256[] memory amounts) = getOrderedAssets(false);\n    IAsset[] memory assets = new IAsset[](addresses.length);\n    for (uint i; i < addresses.length; i++) {\n      assets[i] = IAsset(addresses[i]);\n      TransferHelper.safeApprove(addresses[i], _liquidityRouter, amounts[i]);\n    }\n\n    // Add Liquidity\n    bytes memory userData = abi.encode(IBalancerV2Vault.JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, amounts, 0);\n    IBalancerV2Vault.JoinPoolRequest memory joinData = IBalancerV2Vault.JoinPoolRequest({\n      assets: assets,\n      maxAmountsIn: amounts,\n      userData: userData,\n      fromInternalBalance: false\n    });\n    IBalancerV2Vault(_liquidityRouter).joinPool(_poolId, address(this), address(this), joinData);\n\n    lpTokenId = uint256(uint160(poolAddress));\n    liquidity = IERC20(poolAddress).balanceOf(address(this));\n    (amount0, amount1) = _getRemainders(balanceAmount0, balanceAmount1);\n  }\n\n  function collectLpFees(IWeb3PacksDefs.LiquidityPosition memory)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amount0, uint256 amount1)\n  {\n    amount0 = 0;\n    amount1 = 0;\n  }\n\n  function removeLiquidityPosition(IWeb3PacksDefs.LiquidityPosition memory liquidityPosition)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint amount0, uint amount1)\n  {\n    (address poolAddress, ) = IBalancerV2Vault(_liquidityRouter).getPool(_poolId);\n\n    (address[] memory addresses, uint256[] memory amounts) = getOrderedAssets(false);\n    IAsset[] memory assets = new IAsset[](addresses.length);\n    for (uint i; i < addresses.length; i++) { assets[i] = IAsset(addresses[i]); }\n\n    TransferHelper.safeApprove(\n      poolAddress,\n      _liquidityRouter,\n      liquidityPosition.liquidity\n    );\n\n    // Remove Liquidity\n    bytes memory userData = abi.encode(IBalancerV2Vault.ExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT, liquidityPosition.liquidity);\n    IBalancerV2Vault.ExitPoolRequest memory exitData = IBalancerV2Vault.ExitPoolRequest({\n      assets: assets,\n      minAmountsOut: amounts,\n      userData: userData,\n      toInternalBalance: false\n    });\n    IBalancerV2Vault(_liquidityRouter).exitPool(_poolId, address(this), payable(address(this)), exitData);\n\n    (amount0, amount1) = _getRemainders(0, 0);\n  }\n\n\n  function _performSwap(uint256 percentOfAmount, address token0, address token1)\n    internal\n    returns (uint256 amountOut)\n  {\n    uint256 balance = IERC20(token0).balanceOf(address(this));\n    uint256 swapAmount = (balance * percentOfAmount) / 10000;\n\n    TransferHelper.safeApprove(token0, _swapRouter, swapAmount);\n\n    if (swapAmount > 0) {\n      IBalancerV2Vault.SingleSwap memory swapData = IBalancerV2Vault.SingleSwap({\n        poolId: _poolId,\n        kind: IBalancerV2Vault.SwapKind.GIVEN_IN,\n        assetIn: IAsset(token0),\n        assetOut: IAsset(token1),\n        amount: swapAmount,\n        userData: bytes(\"\")\n      });\n\n      IBalancerV2Vault.FundManagement memory fundData = IBalancerV2Vault.FundManagement({\n        sender: address(this),\n        fromInternalBalance: false,\n        recipient: payable(address(this)),\n        toInternalBalance: false\n      });\n      IBalancerV2Vault(_swapRouter).swap(swapData, fundData, 0, block.timestamp);\n\n      amountOut = IERC20(token1).balanceOf(address(this));\n    }\n  }\n\n  function _getRemainders(uint256 balanceAmount0, uint256 balanceAmount1) internal view returns (uint256 amount0, uint256 amount1) {\n    amount0 = getBalanceToken0();\n    amount1 = getBalanceToken1();\n    if (balanceAmount0 > 0) { amount0 = balanceAmount0 - amount0; }\n    if (balanceAmount1 > 0) { amount1 = balanceAmount1 - amount1; }\n  }\n}\n"
    },
    "contracts/lib/mode/routers/lib/VelodromeV2Commands.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\n/// @title Commands\n/// @notice Command Flags used to decode commands\nlibrary Commands {\n    // Masks to extract certain bits of commands\n    bytes1 internal constant FLAG_ALLOW_REVERT = 0x80;\n    bytes1 internal constant COMMAND_TYPE_MASK = 0x3f;\n\n    // Command Types. Maximum supported command at this moment is 0x3f.\n\n    // Command Types where value<0x08, executed in the first nested-if block\n    uint256 constant V3_SWAP_EXACT_IN = 0x00;\n    uint256 constant V3_SWAP_EXACT_OUT = 0x01;\n    uint256 constant PERMIT2_TRANSFER_FROM = 0x02;\n    uint256 constant PERMIT2_PERMIT_BATCH = 0x03;\n    uint256 constant SWEEP = 0x04;\n    uint256 constant TRANSFER = 0x05;\n    uint256 constant PAY_PORTION = 0x06;\n    // COMMAND_PLACEHOLDER = 0x07;\n\n    // The commands are executed in nested if blocks to minimise gas consumption\n    // The following constant defines one of the boundaries where the if blocks split commands\n    uint256 constant FIRST_IF_BOUNDARY = 0x08;\n\n    // Command Types where 0x08<=value<=0x0f, executed in the second nested-if block\n    uint256 constant V2_SWAP_EXACT_IN = 0x08;\n    uint256 constant V2_SWAP_EXACT_OUT = 0x09;\n    uint256 constant PERMIT2_PERMIT = 0x0a;\n    uint256 constant WRAP_ETH = 0x0b;\n    uint256 constant UNWRAP_WETH = 0x0c;\n    uint256 constant PERMIT2_TRANSFER_FROM_BATCH = 0x0d;\n    uint256 constant BALANCE_CHECK_ERC20 = 0x0e;\n    // COMMAND_PLACEHOLDER = 0x0f;\n\n    // The commands are executed in nested if blocks to minimise gas consumption\n    // The following constant defines one of the boundaries where the if blocks split commands\n    uint256 constant SECOND_IF_BOUNDARY = 0x10;\n\n    // Command Types where 0x10<=value<0x18, executed in the third nested-if block\n    uint256 constant SEAPORT_V1_5 = 0x10;\n    uint256 constant LOOKS_RARE_V2 = 0x11;\n    uint256 constant NFTX = 0x12;\n    uint256 constant CRYPTOPUNKS = 0x13;\n    // 0x14;\n    uint256 constant OWNER_CHECK_721 = 0x15;\n    uint256 constant OWNER_CHECK_1155 = 0x16;\n    uint256 constant SWEEP_ERC721 = 0x17;\n\n    // The commands are executed in nested if blocks to minimise gas consumption\n    // The following constant defines one of the boundaries where the if blocks split commands\n    uint256 constant THIRD_IF_BOUNDARY = 0x18;\n\n    // Command Types where 0x18<=value<=0x1f, executed in the final nested-if block\n    uint256 constant X2Y2_721 = 0x18;\n    uint256 constant SUDOSWAP = 0x19;\n    uint256 constant NFT20 = 0x1a;\n    uint256 constant X2Y2_1155 = 0x1b;\n    uint256 constant FOUNDATION = 0x1c;\n    uint256 constant SWEEP_ERC1155 = 0x1d;\n    uint256 constant ELEMENT_MARKET = 0x1e;\n    // COMMAND_PLACEHOLDER = 0x1f;\n\n    // The commands are executed in nested if blocks to minimise gas consumption\n    // The following constant defines one of the boundaries where the if blocks split commands\n    uint256 constant FOURTH_IF_BOUNDARY = 0x20;\n\n    // Command Types where 0x20<=value\n    uint256 constant SEAPORT_V1_4 = 0x20;\n    uint256 constant EXECUTE_SUB_PLAN = 0x21;\n    uint256 constant APPROVE_ERC20 = 0x22;\n    // COMMAND_PLACEHOLDER for 0x23 to 0x3f (all unused)\n}\n"
    },
    "contracts/lib/mode/routers/lib/VelodromeV2Constants.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\n/// @title Constant state\n/// @notice Constant state used by the Universal Router\nlibrary Constants {\n    /// @dev Used for identifying cases when this contract's balance of a token is to be used as an input\n    /// This value is equivalent to 1<<255, i.e. a singular 1 in the most significant bit.\n    uint256 internal constant CONTRACT_BALANCE = 0x8000000000000000000000000000000000000000000000000000000000000000;\n\n    /// @dev Used for identifying cases when a v2 pair has already received input tokens\n    uint256 internal constant ALREADY_PAID = 0;\n\n    /// @dev Used as a flag for identifying the transfer of ETH instead of a token\n    address internal constant ETH = address(0);\n\n    /// @dev Used as a flag for identifying that msg.sender should be used, saves gas by sending more 0 bytes\n    address internal constant MSG_SENDER = address(1);\n\n    /// @dev Used as a flag for identifying address(this) should be used, saves gas by sending more 0 bytes\n    address internal constant ADDRESS_THIS = address(2);\n\n    /// @dev The length of the bytes encoded address\n    uint256 internal constant ADDR_SIZE = 20;\n\n    /// @dev The length of the bytes encoded fee\n    uint256 internal constant V3_FEE_SIZE = 3;\n\n    /// @dev The offset of a single token address (20) and pool fee (3)\n    uint256 internal constant NEXT_V3_POOL_OFFSET = ADDR_SIZE + V3_FEE_SIZE;\n\n    /// @dev The offset of an encoded pool key\n    /// Token (20) + Fee (3) + Token (20) = 43\n    uint256 internal constant V3_POP_OFFSET = NEXT_V3_POOL_OFFSET + ADDR_SIZE;\n\n    /// @dev The minimum length of an encoding that contains 2 or more pools\n    uint256 internal constant MULTIPLE_V3_POOLS_MIN_LENGTH = V3_POP_OFFSET + NEXT_V3_POOL_OFFSET;\n}"
    },
    "contracts/lib/mode/routers/PancakeRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// PancakeRouter.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../../Web3PacksRouterBase.sol\";\nimport \"../../../interfaces/IWeb3PacksDefs.sol\";\nimport \"../../../interfaces/mode/IPancakeRouter02.sol\";\nimport \"../../../interfaces/mode/IPancakeFactory.sol\";\n\n\n// UniswapV2-like Router\nabstract contract PancakeRouter is Web3PacksRouterBase {\n  // Pass constructor data\n  constructor(IWeb3PacksDefs.RouterConfig memory config) Web3PacksRouterBase(config) {}\n\n  function swapSingle(uint256 percentOfAmount, bool reverse)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amountOut)\n  {\n    IWeb3PacksDefs.Token memory token0 = reverse ? getToken1() : getToken0();\n    IWeb3PacksDefs.Token memory token1 = reverse ? getToken0() : getToken1();\n    amountOut = _performSwap(percentOfAmount, token0.tokenAddress, token1.tokenAddress);\n  }\n\n  function swapCustom(uint256 percentOfAmount, address token0, address token1)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amountOut)\n  {\n    amountOut = _performSwap(percentOfAmount, token0, token1);\n  }\n\n  function createLiquidityPosition(bool)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (\n      uint256 lpTokenId,\n      uint256 liquidity,\n      uint256 amount0,\n      uint256 amount1\n    )\n  {\n    IWeb3PacksDefs.Token memory token0 = getToken0();\n    IWeb3PacksDefs.Token memory token1 = getToken1();\n    (\n      uint256 balanceAmount0,\n      uint256 balanceAmount1,\n      uint256 minAmount0,\n      uint256 minAmount1\n    ) = getLiquidityAmounts();\n\n    TransferHelper.safeApprove(token0.tokenAddress, _liquidityRouter, balanceAmount0);\n    TransferHelper.safeApprove(token1.tokenAddress, _liquidityRouter, balanceAmount1);\n\n    // Add Liquidity\n    (amount0, amount1, liquidity) = IPancakeRouter02(_liquidityRouter).addLiquidity(\n      token0.tokenAddress,\n      token1.tokenAddress,\n      balanceAmount0,\n      balanceAmount1,\n      minAmount0,\n      minAmount1,\n      address(this),\n      block.timestamp\n    );\n\n    // Deposit the LP tokens into the Web3Packs NFT\n    address lpTokenAddress = _getPancakePairAddress();\n    lpTokenId = uint256(uint160(lpTokenAddress));\n  }\n\n  function collectLpFees(IWeb3PacksDefs.LiquidityPosition memory)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amount0, uint256 amount1)\n  {\n    amount0 = 0;\n    amount1 = 0;\n  }\n\n  function removeLiquidityPosition(IWeb3PacksDefs.LiquidityPosition memory liquidityPosition)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint amount0, uint amount1)\n  {\n    IWeb3PacksDefs.Token memory token0 = getToken0();\n    IWeb3PacksDefs.Token memory token1 = getToken1();\n    address lpTokenAddress = _getPancakePairAddress();\n\n    TransferHelper.safeApprove(\n      lpTokenAddress,\n      _liquidityRouter,\n      liquidityPosition.liquidity\n    );\n\n    (amount0, amount1) = IPancakeRouter02(_liquidityRouter).removeLiquidity(\n      token0.tokenAddress,\n      token1.tokenAddress,\n      liquidityPosition.liquidity,\n      0,\n      0,\n      address(this),\n      block.timestamp\n    );\n  }\n\n\n  function _performSwap(uint256 percentOfAmount, address token0, address token1)\n    internal\n    returns (uint256 amountOut)\n  {\n    address[] memory routes = new address[](2);\n    routes[0] = token0;\n    routes[1] = token1;\n\n    uint256 balance = IERC20(token0).balanceOf(address(this));\n    uint256 swapAmount = (balance * percentOfAmount) / 10000;\n\n    if (swapAmount > 0) {\n      TransferHelper.safeApprove(token0, _swapRouter, swapAmount);\n      IPancakeRouter02(_swapRouter).swapExactTokensForTokens(\n        swapAmount,\n        0,\n        routes,\n        address(this),\n        block.timestamp\n      );\n      amountOut = IERC20(token1).balanceOf(address(this));\n    }\n  }\n\n  function _getPancakeFactory() internal view returns (address) {\n    return IPancakeRouter02(_liquidityRouter).factory();\n  }\n\n  function _getPancakePairAddress() internal view returns (address) {\n    IWeb3PacksDefs.Token memory token0 = getToken0();\n    IWeb3PacksDefs.Token memory token1 = getToken1();\n    IPancakeFactory _factory = IPancakeFactory(_getPancakeFactory());\n    return _factory.getPair(token0.tokenAddress, token1.tokenAddress);\n  }\n}\n"
    },
    "contracts/lib/mode/routers/UniswapV2Router.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// UniswapV2Router.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../../Web3PacksRouterBase.sol\";\nimport \"../../../interfaces/IWeb3PacksDefs.sol\";\n\n\nabstract contract UniswapV2Router is Web3PacksRouterBase {\n  // Pass constructor data\n  constructor(IWeb3PacksDefs.RouterConfig memory config) Web3PacksRouterBase(config) {}\n\n  function swapSingle(uint256 percentOfAmount, bool reverse)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amountOut)\n  {\n    IWeb3PacksDefs.Token memory token0 = reverse ? getToken1() : getToken0();\n    IWeb3PacksDefs.Token memory token1 = reverse ? getToken0() : getToken1();\n    amountOut = _performSwap(percentOfAmount, token0.tokenAddress, token1.tokenAddress);\n  }\n\n  function swapCustom(uint256 percentOfAmount, address token0, address token1)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amountOut)\n  {\n    amountOut = _performSwap(percentOfAmount, token0, token1);\n  }\n\n  function createLiquidityPosition(bool)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (\n      uint256 lpTokenId,\n      uint256 liquidity,\n      uint256 amount0,\n      uint256 amount1\n    )\n  {\n    IWeb3PacksDefs.Token memory token0 = getToken0();\n    IWeb3PacksDefs.Token memory token1 = getToken1();\n    (\n      uint256 balanceAmount0,\n      uint256 balanceAmount1,\n      uint256 minAmount0,\n      uint256 minAmount1\n    ) = getLiquidityAmounts();\n\n    TransferHelper.safeApprove(token0.tokenAddress, _liquidityRouter, balanceAmount0);\n    TransferHelper.safeApprove(token1.tokenAddress, _liquidityRouter, balanceAmount1);\n\n    // Add Liquidity\n    (amount0, amount1, liquidity) = IUniswapV2Router02(_liquidityRouter).addLiquidity(\n      token0.tokenAddress,\n      token1.tokenAddress,\n      balanceAmount0,\n      balanceAmount1,\n      minAmount0,\n      minAmount1,\n      address(this),\n      block.timestamp\n    );\n\n    // Deposit the LP tokens into the Web3Packs NFT\n    address lpTokenAddress = _getUniswapV2PairAddress();\n    lpTokenId = uint256(uint160(lpTokenAddress));\n  }\n\n  function collectLpFees(IWeb3PacksDefs.LiquidityPosition memory)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amount0, uint256 amount1)\n  {\n    amount0 = 0;\n    amount1 = 0;\n  }\n\n  function removeLiquidityPosition(IWeb3PacksDefs.LiquidityPosition memory liquidityPosition)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint amount0, uint amount1)\n  {\n    IWeb3PacksDefs.Token memory token0 = getToken0();\n    IWeb3PacksDefs.Token memory token1 = getToken1();\n\n    address lpTokenAddress = _getUniswapV2PairAddress();\n    TransferHelper.safeApprove(\n      lpTokenAddress,\n      _liquidityRouter,\n      liquidityPosition.liquidity\n    );\n\n    // Release Liquidity\n    (amount0, amount1) = IUniswapV2Router02(_liquidityRouter).removeLiquidity(\n      token0.tokenAddress,\n      token1.tokenAddress,\n      liquidityPosition.liquidity,\n      0,\n      0,\n      address(this),\n      block.timestamp\n    );\n  }\n\n\n  function _performSwap(uint256 percentOfAmount, address token0, address token1)\n    internal\n    returns (uint256 amountOut)\n  {\n    uint256 balance = IERC20(token0).balanceOf(address(this));\n    uint256 swapAmount = (balance * percentOfAmount) / 10000;\n    address[] memory path;\n    path[0] = token0;\n    path[1] = token1;\n\n    if (swapAmount > 0) {\n      TransferHelper.safeApprove(token0, _swapRouter, swapAmount);\n      IUniswapV2Router02(_swapRouter).swapExactTokensForETHSupportingFeeOnTransferTokens(\n        swapAmount,\n        0,\n        path,\n        address(this),\n        block.timestamp\n      );\n      amountOut = IERC20(token1).balanceOf(address(this));\n    }\n  }\n\n  function _getUniswapV2Factory() internal view returns (address) {\n    return IUniswapV2Router02(_liquidityRouter).factory();\n  }\n\n  function _getUniswapV2PairAddress() internal view returns (address) {\n    IWeb3PacksDefs.Token memory token0 = getToken0();\n    IWeb3PacksDefs.Token memory token1 = getToken1();\n    IUniswapV2Factory _factory = IUniswapV2Factory(_getUniswapV2Factory());\n    return _factory.getPair(token0.tokenAddress, token1.tokenAddress);\n  }\n}\n"
    },
    "contracts/lib/mode/routers/VelodromeV1Router.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// VelodromeV1Router.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../../Web3PacksRouterBase.sol\";\nimport \"../../../interfaces/IWeb3PacksDefs.sol\";\nimport \"../../../interfaces/mode/IVelodrome.sol\";\n\n\n// UniswapV2-like Router\nabstract contract VelodromeV1Router is Web3PacksRouterBase {\n  // Pass constructor data\n  constructor(IWeb3PacksDefs.RouterConfig memory config) Web3PacksRouterBase(config) {}\n\n  function swapSingle(uint256 percentOfAmount, bool reverse)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amountOut)\n  {\n    IWeb3PacksDefs.Token memory token0 = reverse ? getToken1() : getToken0();\n    IWeb3PacksDefs.Token memory token1 = reverse ? getToken0() : getToken1();\n    IWeb3PacksDefs.Route[] memory tokens = getTokenPath(reverse);\n    IVelodrome.Route[] memory routes = new IVelodrome.Route[](tokens.length);\n    for (uint i; i < tokens.length; i++) {\n      routes[i] = IVelodrome.Route({from: tokens[i].token0, to: tokens[i].token1, stable: tokens[i].stable});\n    }\n    amountOut = _performSwap(percentOfAmount, token0.tokenAddress, token1.tokenAddress, routes);\n  }\n\n  function swapCustom(uint256 percentOfAmount, address token0, address token1)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amountOut)\n  {\n    IWeb3PacksDefs.Route[] memory tokens = getTokenPath(false);\n    IVelodrome.Route[] memory routes = new IVelodrome.Route[](tokens.length);\n    for (uint i; i < tokens.length; i++) {\n      routes[i] = IVelodrome.Route({from: tokens[i].token0, to: tokens[i].token1, stable: tokens[i].stable});\n    }\n    amountOut = _performSwap(percentOfAmount, token0, token1, routes);\n  }\n\n  function createLiquidityPosition(bool stable)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (\n      uint256 lpTokenId,\n      uint256 liquidity,\n      uint256 amount0,\n      uint256 amount1\n    )\n  {\n    IWeb3PacksDefs.Token memory token0 = getToken0();\n    IWeb3PacksDefs.Token memory token1 = getToken1();\n    (\n      uint256 balanceAmount0,\n      uint256 balanceAmount1,\n      uint256 minAmount0,\n      uint256 minAmount1\n    ) = getLiquidityAmounts();\n\n    TransferHelper.safeApprove(token0.tokenAddress, _liquidityRouter, balanceAmount0);\n    TransferHelper.safeApprove(token1.tokenAddress, _liquidityRouter, balanceAmount1);\n\n    // Add Liquidity\n    (amount0, amount1, liquidity) = IVelodrome(_liquidityRouter).addLiquidity(\n      token0.tokenAddress,\n      token1.tokenAddress,\n      stable,\n      balanceAmount0,\n      balanceAmount1,\n      minAmount0,\n      minAmount1,\n      address(this),\n      block.timestamp\n    );\n\n    // Deposit the LP tokens into the Web3Packs NFT\n    address lpTokenAddress = _getVelodromePairAddress();\n    lpTokenId = uint256(uint160(lpTokenAddress));\n  }\n\n  function collectLpFees(IWeb3PacksDefs.LiquidityPosition memory)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amount0, uint256 amount1)\n  {\n    amount0 = 0;\n    amount1 = 0;\n  }\n\n  function removeLiquidityPosition(IWeb3PacksDefs.LiquidityPosition memory liquidityPosition)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint amount0, uint amount1)\n  {\n    IWeb3PacksDefs.Token memory token0 = getToken0();\n    IWeb3PacksDefs.Token memory token1 = getToken1();\n    address lpTokenAddress = _getVelodromePairAddress();\n\n    TransferHelper.safeApprove(\n      lpTokenAddress,\n      _liquidityRouter,\n      liquidityPosition.liquidity\n    );\n\n    (amount0, amount1) = IVelodrome(_liquidityRouter).removeLiquidity(\n      token0.tokenAddress,\n      token1.tokenAddress,\n      liquidityPosition.stable,\n      liquidityPosition.liquidity,\n      0,\n      0,\n      address(this),\n      block.timestamp\n    );\n  }\n\n\n  function _performSwap(uint256 percentOfAmount, address token0, address token1, IVelodrome.Route[] memory routes)\n    internal\n    returns (uint256 amountOut)\n  {\n    uint256 balance = IERC20(token0).balanceOf(address(this));\n    uint256 swapAmount = (balance * percentOfAmount) / 10000;\n\n    if (swapAmount > 0) {\n      TransferHelper.safeApprove(token0, _swapRouter, swapAmount);\n      IVelodrome(_swapRouter).swapExactTokensForTokens(\n        swapAmount,\n        0,\n        routes,\n        address(this),\n        block.timestamp\n      );\n      amountOut = IERC20(token1).balanceOf(address(this));\n    }\n  }\n\n  function _getVelodromePairAddress() internal view returns (address) {\n    IWeb3PacksDefs.Token memory token0 = getToken0();\n    IWeb3PacksDefs.Token memory token1 = getToken1();\n    return IVelodrome(_liquidityRouter).poolFor(token0.tokenAddress, token1.tokenAddress, false);\n  }\n}\n"
    },
    "contracts/lib/mode/routers/VelodromeV2Router.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// VelodromeV2Router.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../../Web3PacksRouterBase.sol\";\nimport \"../../../interfaces/IWeb3PacksDefs.sol\";\nimport \"../../../interfaces/mode/IVelodrome.sol\";\nimport {IUniversalRouter} from \"../../../interfaces/mode/IVelodromeUniversalRouter.sol\";\nimport {Commands} from \"./lib/VelodromeV2Commands.sol\";\nimport {Constants} from \"./lib/VelodromeV2Constants.sol\";\nimport \"hardhat/console.sol\";\n\n// REF: https://github.com/velodrome-finance/universal-router/blob/main/test/foundry-tests/v2/UniswapV2MultiHop.t.sol#L68\n\n// Velodrome Universal Router\nabstract contract VelodromeV2Router is Web3PacksRouterBase {\n  struct VRoute {\n    address from;\n    address to;\n    bool stable;\n  }\n\n  // Pass constructor data\n  constructor(IWeb3PacksDefs.RouterConfig memory config) Web3PacksRouterBase(config) {}\n\n  function swapSingle(uint256 percentOfAmount, bool reverse)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amountOut)\n  {\n    IWeb3PacksDefs.Token memory token0 = getToken0();\n    IWeb3PacksDefs.Token memory token1 = getToken1();\n    IWeb3PacksDefs.Route[] memory tokens = getTokenPath(reverse);\n    VRoute[] memory routes = new VRoute[](tokens.length);\n    for (uint i; i < tokens.length; i++) {\n      routes[i] = VRoute({from: tokens[i].token0, to: tokens[i].token1, stable: tokens[i].stable});\n    }\n    amountOut = _performSwap(percentOfAmount, token0.tokenAddress, token1.tokenAddress, routes);\n  }\n\n  function swapCustom(uint256 percentOfAmount, address token0, address token1)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amountOut)\n  {\n    VRoute[] memory routes = new VRoute[](1);\n    routes[0] = VRoute({from: token0, to: token1, stable: false});\n    amountOut = _performSwap(percentOfAmount, token0, token1, routes);\n  }\n\n  function createLiquidityPosition(bool)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (\n      uint256 lpTokenId,\n      uint256 liquidity,\n      uint256 amount0,\n      uint256 amount1\n    )\n  {\n    lpTokenId = 0;\n    liquidity = 0;\n    amount0 = 0;\n    amount1 = 0;\n  }\n\n  function collectLpFees(IWeb3PacksDefs.LiquidityPosition memory)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amount0, uint256 amount1)\n  {\n    amount0 = 0;\n    amount1 = 0;\n  }\n\n  function removeLiquidityPosition(IWeb3PacksDefs.LiquidityPosition memory)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint amount0, uint amount1)\n  {\n    amount0 = 0;\n    amount1 = 0;\n  }\n\n\n  function _performSwap(uint256 percentOfAmount, address token0, address token1, VRoute[] memory routes)\n    internal\n    returns (uint256 amountOut)\n  {\n    uint256 balance = IERC20(token0).balanceOf(address(this));\n    uint256 swapAmount = (balance * percentOfAmount) / 10000;\n\n    if (swapAmount > 0) {\n      TransferHelper.safeApprove(token0, _swapRouter, swapAmount);\n      bytes memory commands = abi.encodePacked(bytes1(uint8(Commands.V2_SWAP_EXACT_IN)));\n      bytes[] memory inputs = new bytes[](1);\n      inputs[0] = abi.encode(Constants.MSG_SENDER, swapAmount, 0, routes, true);\n      IUniversalRouter(_swapRouter).execute(commands, inputs, block.timestamp);\n      amountOut = IERC20(token1).balanceOf(address(this));\n    }\n  }\n}\n"
    },
    "contracts/lib/Web3PacksRouterBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// Web3PacksRouterBase.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"./BlackholePrevention.sol\";\nimport \"../interfaces/IWeb3PacksRouter.sol\";\nimport \"../interfaces/IWeb3PacksDefs.sol\";\n\nabstract contract Web3PacksRouterBase is\n  IWeb3PacksRouter,\n  Ownable,\n  BlackholePrevention\n{\n  using Address for address payable;\n\n  address public _weth;\n  address public _manager;\n  address public _token0;\n  address public _token1;\n\n  address public _swapRouter;\n  address public _liquidityRouter;\n  bytes32 public _poolId;\n\n  // The ID Associated with this Bundler (must be Registered with Web3Packs)\n  bytes32 public _bundlerId;\n\n  uint256 public _slippage;\n  int24 public _tickLower;\n  int24 public _tickUpper;\n\n  // Store Liquidity Positions by Pack Token ID\n  mapping(uint256 => IWeb3PacksDefs.LiquidityPosition) internal _liquidityPositionsByTokenId;\n\n  constructor(IWeb3PacksDefs.RouterConfig memory config) {\n    _weth = config.weth;\n    _token0 = config.token0;\n    _token1 = config.token1;\n    _manager = config.manager;\n    _swapRouter = config.swapRouter;\n    _liquidityRouter = config.liquidityRouter;\n    _poolId = config.poolId;\n    _bundlerId = config.bundlerId;\n    _slippage = config.slippage;\n    _tickLower = config.tickLower;\n    _tickUpper = config.tickUpper;\n  }\n\n  receive() external payable {}\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  /// @dev This should be overridden if Token0 is not WETH\n  function getToken0() public virtual view returns (IWeb3PacksDefs.Token memory token0) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _weth,\n      tokenDecimals: 18,\n      tokenSymbol: \"WETH\"\n    });\n    return token;\n  }\n\n  /// @dev This should be overridden if Token1 is not WETH\n  function getToken1() public virtual view returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _weth,\n      tokenDecimals: 18,\n      tokenSymbol: \"WETH\"\n    });\n    return token;\n  }\n\n  /// @dev This can be overridden to specify custom routes/paths for swapping\n  function getTokenPath(bool reverse) public virtual view returns (IWeb3PacksDefs.Route[] memory tokenPath) {\n    IWeb3PacksDefs.Route[] memory tokens = new IWeb3PacksDefs.Route[](1);\n    tokens[0] = reverse\n      ? IWeb3PacksDefs.Route({token0: getToken1().tokenAddress, token1: getToken0().tokenAddress, stable: false})\n      : IWeb3PacksDefs.Route({token0: getToken0().tokenAddress, token1: getToken1().tokenAddress, stable: false});\n    return tokens;\n  }\n\n  /// @dev This can be overridden to specify custom ordering for swapping\n  function getOrderedAssets(bool reverse) public virtual view returns (address[] memory, uint256[] memory) {\n    address[] memory assets = new address[](2);\n    assets[0] = reverse ? getToken1().tokenAddress : getToken0().tokenAddress;\n    assets[1] = reverse ? getToken0().tokenAddress : getToken1().tokenAddress;\n\n    uint256[] memory amounts = new uint256[](2);\n    amounts[0] = reverse ? getBalanceToken1() : getBalanceToken0();\n    amounts[1] = reverse ? getBalanceToken0() : getBalanceToken1();\n\n    return (assets, amounts);\n  }\n\n  /// @dev This can be overridden to specify custom amounts for swapping\n  function getLiquidityAmounts() public virtual view returns (uint256 amount0, uint256 amount1, uint256 minAmount0, uint256 minAmount1) {\n    amount0 = getBalanceToken0();\n    amount1 = getBalanceToken1();\n    minAmount0 = (amount0 * (10000 - _slippage)) / 10000;\n    minAmount1 = (amount1 * (10000 - _slippage)) / 10000;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function getBalanceWeth() public virtual view returns (uint256 balanceWeth) {\n    return IERC20(_weth).balanceOf(address(this));\n  }\n\n  function getBalanceToken0() public virtual view returns (uint256 balanceToken0) {\n    return IERC20(getToken0().tokenAddress).balanceOf(address(this));\n  }\n\n  function getBalanceToken1() public virtual view returns (uint256 balanceToken1) {\n    return IERC20(getToken1().tokenAddress).balanceOf(address(this));\n  }\n\n  function enterWeth(uint256 amount) internal virtual {\n    IWETH(_weth).deposit{value: amount}();\n  }\n\n  function exitWethAndTransfer(address payable receiver) internal virtual returns (uint256 ethAmount) {\n    uint256 wethBalance = getBalanceWeth();\n    if (wethBalance > 0) {\n      IWETH(_weth).withdraw(wethBalance);\n    }\n    ethAmount = address(this).balance;\n    if (ethAmount > 0) {\n      receiver.sendValue(ethAmount);\n    }\n  }\n\n  function refundUnusedTokens(address sender) internal virtual returns (uint256 unusedAmount0, uint256 unusedAmount1) {\n    // Refund Unused Amounts\n    unusedAmount0 = getBalanceToken0();\n    if (unusedAmount0 > 0) {\n      TransferHelper.safeTransfer(getToken0().tokenAddress, sender, unusedAmount0);\n    }\n    unusedAmount1 = getBalanceToken1();\n    if (unusedAmount1 > 0) {\n      TransferHelper.safeTransfer(getToken1().tokenAddress, sender, unusedAmount1);\n    }\n  }\n\n  function onERC721Received(\n    address,\n    address,\n    uint256,\n    bytes calldata\n  ) external virtual pure returns(bytes4) {\n    return this.onERC721Received.selector;\n  }\n\n  /***********************************|\n  |          Only Admin/DAO           |\n  |      (blackhole prevention)       |\n  |__________________________________*/\n\n  function setWeth(address weth) external virtual onlyOwner {\n    _weth = weth;\n  }\n\n  function setSwapRouter(address router) external virtual onlyOwner {\n    _swapRouter = router;\n  }\n\n  function setLiquidityRouter(address router) external virtual onlyOwner {\n    _liquidityRouter = router;\n  }\n\n  function setManager(address manager) external virtual onlyOwner {\n    _manager = manager;\n  }\n\n  function setSlippage(uint256 slippage) external virtual onlyOwner {\n    _slippage = slippage;\n  }\n\n  function setTickLower(int24 tickLower) external virtual onlyOwner {\n    _tickLower = tickLower;\n  }\n\n  function setTickUpper(int24 tickUpper) external virtual onlyOwner {\n    _tickUpper = tickUpper;\n  }\n\n  function withdrawEther(address payable receiver, uint256 amount) external virtual onlyOwner {\n    _withdrawEther(receiver, amount);\n  }\n\n  function withdrawErc20(address payable receiver, address tokenAddress, uint256 amount) external virtual onlyOwner {\n    _withdrawERC20(receiver, tokenAddress, amount);\n  }\n\n  function withdrawERC721(address payable receiver, address tokenAddress, uint256 tokenId) external virtual onlyOwner {\n    _withdrawERC721(receiver, tokenAddress, tokenId);\n  }\n\n  function withdrawERC1155(address payable receiver, address tokenAddress, uint256 tokenId, uint256 amount) external virtual onlyOwner {\n    _withdrawERC1155(receiver, tokenAddress, tokenId, amount);\n  }\n\n\n  modifier onlyManagerOrSelf() {\n    require(msg.sender == _manager || msg.sender == address(this), \"Web3PacksRouterBase - Invalid Web3Packs Manager\");\n    _;\n  }\n}\n"
    },
    "contracts/Web3PacksV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// Web3PacksV2.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n//  __    __     _    _____   ___           _                   ____\n// / / /\\ \\ \\___| |__|___ /  / _ \\__ _  ___| | _____     /\\   /\\___ \\\n// \\ \\/  \\/ / _ \\ '_ \\ |_ \\ / /_)/ _` |/ __| |/ / __|____\\ \\ / / __) |\n//  \\  /\\  /  __/ |_) |__) / ___/ (_| | (__|   <\\__ \\_____\\ V / / __/\n//   \\/  \\/ \\___|_.__/____/\\/    \\__,_|\\___|_|\\_\\___/      \\_/ |_____|\n//\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"./lib/BlackholePrevention.sol\";\nimport \"./interfaces/IWeb3Packs.sol\";\nimport \"./interfaces/IWeb3PacksDefs.sol\";\nimport \"./interfaces/IWeb3PacksBundler.sol\";\nimport \"./interfaces/IChargedState.sol\";\nimport \"./interfaces/IChargedParticles.sol\";\nimport \"./interfaces/IBaseProton.sol\";\n\ncontract Web3PacksV2 is\n  IWeb3Packs,\n  Ownable,\n  Pausable,\n  BlackholePrevention,\n  ReentrancyGuard\n{\n  using Address for address payable;\n\n  event ChargedParticlesSet(address indexed chargedParticles);\n  event ChargedStateSet(address indexed chargedState);\n  event ProtonSet(address indexed proton);\n  event PackBundled(uint256 indexed tokenId, address indexed receiver, bytes32 packType, uint256 ethPackPrice);\n  event PackUnbundled(uint256 indexed tokenId, address indexed receiver, uint256 ethAmount);\n  event ProtocolFeeSet(uint256 fee);\n  event Web3PacksTreasurySet(address indexed treasury);\n  event BundlerRegistered(address indexed bundlerAddress, bytes32 bundlerId);\n  event BalanceClaimed(address indexed account, uint256 balance);\n\n  uint256 private constant BASIS_POINTS = 10000;\n\n  address public _weth;\n  address public _proton;\n  address public _chargedParticles;\n  address public _chargedState;\n  address payable internal _treasury;\n  uint256 public _protocolFee;\n\n  mapping (bytes32 => address) public _bundlersById;\n  mapping (uint256 => uint256) internal _packPriceByPackId;\n  mapping (uint256 => bytes32[]) internal _bundlesByPackId;\n  mapping (address => uint256) internal _referrerBalance;\n\n  // Charged Particles Wallet Managers\n  string public _cpWalletManager = \"generic.B\";\n  string public _cpBasketManager = \"generic.B\";\n\n  constructor(\n    address weth,\n    address proton,\n    address chargedParticles,\n    address chargedState\n  ) {\n    _weth = weth;\n    _proton = proton;\n    _chargedParticles = chargedParticles;\n    _chargedState = chargedState;\n  }\n\n\n  /***********************************|\n  |               Public              |\n  |__________________________________*/\n\n  function bundle(\n    IWeb3PacksDefs.BundleChunk[] calldata bundleChunks,\n    address[] calldata referrals,\n    string calldata tokenMetaUri,\n    IWeb3PacksDefs.LockState calldata lockState,\n    bytes32 packType,\n    uint256 ethPackPrice\n  )\n    external\n    override\n    payable\n    whenNotPaused\n    nonReentrant\n    returns(uint256 tokenId)\n  {\n    _collectFees(ethPackPrice);\n    uint256 rewards = _calculateReferralRewards(ethPackPrice, referrals);\n    tokenId = _bundle(\n      bundleChunks,\n      tokenMetaUri,\n      lockState,\n      ethPackPrice - rewards\n    );\n    emit PackBundled(tokenId, _msgSender(), packType, ethPackPrice);\n  }\n\n  function unbundle(\n    address payable receiver,\n    address tokenAddress,\n    uint256 tokenId,\n    bool sellAll\n  )\n    external\n    override\n    payable\n    whenNotPaused\n    nonReentrant\n  {\n    _collectFees(0);\n    uint256 ethAmount = _unbundle(\n      receiver,\n      tokenAddress,\n      tokenId,\n      sellAll\n    );\n    emit PackUnbundled(tokenId, receiver, ethAmount);\n  }\n\n  // NOTE: Call via \"staticCall\" for Balances\n  function getPackBalances(address tokenAddress, uint256 tokenId) public override returns (TokenAmount[] memory) {\n    return _getPackBalances(tokenAddress, tokenId);\n  }\n\n  function getPackPriceEth(uint256 tokenId) public view override returns (uint256 packPriceEth) {\n    packPriceEth = _packPriceByPackId[tokenId];\n  }\n\n  function getReferralRewardsOf(address account) public view override returns (uint256 balance) {\n    balance = _referrerBalance[account];\n  }\n\n  function claimReferralRewards(address payable account) public override nonReentrant {\n    uint256 balance = _referrerBalance[account];\n    if (address(this).balance >= balance) {\n      account.sendValue(balance);\n      emit BalanceClaimed(account, balance);\n    }\n  }\n\n\n  /***********************************|\n  |     Private Bundle Functions      |\n  |__________________________________*/\n\n  function _bundle(\n    IWeb3PacksDefs.BundleChunk[] calldata bundleChunks,\n    string calldata tokenMetaUri,\n    IWeb3PacksDefs.LockState calldata lockState,\n    uint256 ethPackPrice\n  )\n    internal\n    returns(uint256 tokenId)\n  {\n    IWeb3PacksBundler bundler;\n\n    // Mint Web3Pack NFT\n    tokenId = _createBasicProton(tokenMetaUri);\n\n    // Wrap ETH for WETH\n    IWETH(_weth).deposit{value: ethPackPrice}();\n    uint256 wethTotal = IERC20(_weth).balanceOf(address(this));\n    uint256 chunkWeth;\n\n    // Returned from Each Bundle:\n    address tokenAddress;\n    uint256 amountOut;\n    uint256 nftTokenId;\n\n    // Iterate over each Bundle\n    bytes32[] memory packBundlerIds = new bytes32[](bundleChunks.length);\n    for (uint256 i; i < bundleChunks.length; i++) {\n      IWeb3PacksDefs.BundleChunk memory chunk = bundleChunks[i];\n      packBundlerIds[i] = chunk.bundlerId; // track bundlerIds per pack\n\n      // Ensure Bundler is Registered\n      if (_bundlersById[chunk.bundlerId] == address(0)) {\n        revert BundlerNotRegistered(chunk.bundlerId);\n      }\n      bundler = IWeb3PacksBundler(_bundlersById[chunk.bundlerId]);\n\n      // Calculate Percent\n      chunkWeth = (wethTotal * chunk.percentBasisPoints) / BASIS_POINTS;\n\n      // Send WETH to Bundler\n      TransferHelper.safeTransfer(_weth, address(bundler), chunkWeth);\n\n      // Receive Assets from Bundler\n      //  If Liquidity is ERC20: nftTokenId == 0\n      //  If Liquidity is ERC721: nftTokenId > 0\n      (tokenAddress, amountOut, nftTokenId) = bundler.bundle(tokenId, _msgSender());\n\n      // Deposit the Assets into the Web3Packs NFT\n      if (nftTokenId == 0) {\n        _energize(tokenId, tokenAddress, amountOut);\n        emit BundledERC20(tokenAddress, amountOut);\n      } else {\n        _bond(tokenId, tokenAddress, nftTokenId);\n        emit BundledERC721(tokenAddress, nftTokenId);\n      }\n    }\n\n    // Track Pack Data\n    _bundlesByPackId[tokenId] = packBundlerIds;\n    _packPriceByPackId[tokenId] = ethPackPrice;\n\n    // Set the Timelock State\n    _lock(lockState, tokenId);\n\n    // Transfer the Web3Packs NFT to the Buyer\n    IBaseProton(_proton).safeTransferFrom(address(this), _msgSender(), tokenId);\n  }\n\n  function _unbundle(\n    address payable receiver,\n    address tokenAddress,\n    uint256 packTokenId,\n    bool sellAll\n  )\n    internal\n    returns (uint ethAmount)\n  {\n    IWeb3PacksBundler bundler;\n\n    // Verify Ownership\n    address owner = IERC721(tokenAddress).ownerOf(packTokenId);\n    if (_msgSender() != owner) {\n      revert NotOwnerOrApproved();\n    }\n\n    // Ensure Pack has Bundles\n    if (_bundlesByPackId[packTokenId].length == 0) {\n      revert NoBundlesInPack();\n    }\n\n    address assetTokenAddress;\n    uint256 assetTokenId;\n    for (uint i; i < _bundlesByPackId[packTokenId].length; i++) {\n      bytes32 bundlerId = _bundlesByPackId[packTokenId][i];\n      if (_bundlersById[bundlerId] == address(0)) {\n        // skip unregistered bundlers to prevent breaking unbundle\n        continue;\n      }\n      bundler = IWeb3PacksBundler(_bundlersById[bundlerId]);\n\n      // Pull Assets from NFT and send to Bundler for Unbundling\n      (assetTokenAddress, assetTokenId) = bundler.getLiquidityToken(packTokenId);\n      if (assetTokenId == 0) {\n        _release(_bundlersById[bundlerId], packTokenId, assetTokenAddress);\n      } else {\n        _breakBond(_bundlersById[bundlerId], packTokenId, assetTokenAddress, assetTokenId);\n      }\n\n      // Unbundle current asset\n      ethAmount += bundler.unbundle(receiver, packTokenId, sellAll);\n    }\n\n    // Clear Bundles for Pack\n    delete _bundlesByPackId[packTokenId];\n    delete _packPriceByPackId[packTokenId];\n  }\n\n  function _getPackBalances(address tokenAddress, uint256 tokenId) internal returns (TokenAmount[] memory) {\n    IWeb3PacksBundler bundler;\n\n    // Ensure Pack has Bundles\n    if (_bundlesByPackId[tokenId].length == 0) {\n      revert NoBundlesInPack();\n    }\n\n    uint256 bundleCount = _bundlesByPackId[tokenId].length;\n    TokenAmount[] memory tokenBalances = new TokenAmount[](bundleCount);\n    for (uint i; i < bundleCount; i++) {\n      bytes32 bundlerId = _bundlesByPackId[tokenId][i];\n      if (_bundlersById[bundlerId] == address(0)) {\n        // skip unregistered bundlers\n        continue;\n      }\n\n      // Get Liquidity Token from Bundler\n      bundler = IWeb3PacksBundler(_bundlersById[bundlerId]);\n      (address assetTokenAddress, uint256 assetTokenId) = bundler.getLiquidityToken(tokenId);\n      bool isNft = (assetTokenId > 0);\n\n      // Get Balance of NFT from Charged Particles\n      uint256 assetBalance = isNft ? 1 : _getMass(tokenAddress, tokenId, assetTokenAddress);\n\n      // Track Token Balances\n      tokenBalances[i] = TokenAmount({\n        tokenAddress: assetTokenAddress,\n        balance: assetBalance,\n        nftTokenId: assetTokenId\n      });\n    }\n    return tokenBalances;\n  }\n\n  /***********************************|\n  |     Private Charged Functions     |\n  |__________________________________*/\n\n  function _createBasicProton(\n    string memory tokenMetadataUri\n  )\n    internal\n    returns (uint256 mintedTokenId)\n  {\n    // Mint Web3Packs NFT (Charged-Particles ProtonC)\n    mintedTokenId = IBaseProton(_proton).createBasicProton(\n      address(this),\n      address(this),\n      tokenMetadataUri\n    );\n  }\n\n  function _energize(\n    uint256 packTokenId,\n    address assetTokenAddress,\n    uint256 assetTokenAmount\n  )\n    internal\n  {\n    if (assetTokenAmount == 0) {\n      assetTokenAmount = IERC20(assetTokenAddress).balanceOf(address(this));\n    }\n\n    TransferHelper.safeApprove(\n      assetTokenAddress,\n      address(_chargedParticles),\n      assetTokenAmount\n    );\n\n    IChargedParticles(_chargedParticles).energizeParticle(\n      _proton,\n      packTokenId,\n      _cpWalletManager,\n      assetTokenAddress,\n      assetTokenAmount,\n      address(this)\n    );\n  }\n\n  function _release(\n    address receiver,\n    uint256 packTokenId,\n    address assetTokenAddress\n  )\n    internal\n  {\n    IChargedParticles(_chargedParticles).releaseParticle(\n      receiver,\n      _proton,\n      packTokenId,\n      _cpWalletManager,\n      assetTokenAddress\n    );\n  }\n\n  function _bond(\n    uint256 packTokenId,\n    address nftTokenAddress,\n    uint256 nftTokenId\n  )\n    internal\n  {\n    IERC721(nftTokenAddress).setApprovalForAll(_chargedParticles, true);\n\n    IChargedParticles(_chargedParticles).covalentBond(\n      _proton,\n      packTokenId,\n      _cpBasketManager,\n      nftTokenAddress,\n      nftTokenId,\n      1\n    );\n  }\n\n  function _breakBond(\n    address receiver,\n    uint256 packTokenId,\n    address nftTokenAddress,\n    uint256 nftTokenId\n  )\n    internal\n  {\n    IChargedParticles(_chargedParticles).breakCovalentBond(\n      receiver,\n      _proton,\n      packTokenId,\n      _cpBasketManager,\n      nftTokenAddress,\n      nftTokenId,\n      1\n    );\n  }\n\n  function _lock(LockState calldata lockState, uint256 tokenId) internal {\n    if(lockState.ERC20Timelock > 0) {\n      IChargedState(_chargedState).setReleaseTimelock(\n        _proton,\n        tokenId,\n        lockState.ERC20Timelock\n      );\n    }\n\n    if(lockState.ERC721Timelock > 0) {\n      IChargedState(_chargedState).setBreakBondTimelock(\n        _proton,\n        tokenId,\n        lockState.ERC721Timelock\n      );\n    }\n  }\n\n  function _getMass(address tokenAddress, uint256 tokenId, address assetTokenAddress) internal returns (uint256 assetMass) {\n    /// @dev \"baseParticleMass\" is not a \"view\" function; call via \"callStatic\"\n    assetMass = IChargedParticles(_chargedParticles)\n      .baseParticleMass(tokenAddress, tokenId, _cpWalletManager, assetTokenAddress);\n  }\n\n  function _collectFees(uint256 excludedAmount) internal {\n    // Track Collected Fees\n    if (_protocolFee > 0 && msg.value < (_protocolFee + excludedAmount)) {\n      revert InsufficientForFee(msg.value, excludedAmount, _protocolFee);\n    }\n    uint256 fees = msg.value - excludedAmount;\n    _treasury.sendValue(fees);\n  }\n\n  function _calculateReferralRewards(\n    uint256 ethPackPrice,\n    address[] memory referrals\n  ) internal returns (uint256 fee) {\n    uint256 referralAmountTotal = ((ethPackPrice * 330) / BASIS_POINTS);  // 3.3%\n\n    // Calculate Referral Amounts and Distribute\n    if (referrals.length > 0 && referrals[0] != address(0)) {\n      // Remove Referral Value from Funding Value\n      fee = referralAmountTotal;\n\n      if (referrals.length > 1 && referrals[1] != address(0)) {\n        if (referrals.length > 2 && referrals[2] != address(0)) {\n          _referrerBalance[referrals[0]] += ((ethPackPrice * 30) / BASIS_POINTS);  // 0.3%\n          _referrerBalance[referrals[1]] += ((ethPackPrice * 30) / BASIS_POINTS);  // 0.3%\n          _referrerBalance[referrals[2]] += ((ethPackPrice * 270) / BASIS_POINTS); // 2.7%\n        } else {\n          _referrerBalance[referrals[0]] += ((ethPackPrice * 30) / BASIS_POINTS);  // 0.3%\n          _referrerBalance[referrals[1]] += ((ethPackPrice * 300) / BASIS_POINTS);  // 3.0%\n        }\n      } else {\n        _referrerBalance[referrals[0]] += referralAmountTotal;  // 3.3%\n      }\n    }\n  }\n\n  /***********************************|\n  |          Only Admin/DAO           |\n  |__________________________________*/\n\n  /**\n    * @dev Setup the ChargedParticles Interface\n  */\n  function setChargedParticles(address chargedParticles) external onlyOwner {\n    require(chargedParticles != address(0), \"Invalid address for chargedParticles\");\n    _chargedParticles = chargedParticles;\n    emit ChargedParticlesSet(chargedParticles);\n  }\n\n  function setChargedState(address chargedState) external onlyOwner {\n    require(chargedState != address(0), \"Invalid address for chargedState\");\n    _chargedState = chargedState;\n    emit ChargedStateSet(chargedState);\n  }\n\n  function setProton(address proton) external onlyOwner {\n    require(proton != address(0), \"Invalid address for proton\");\n    _proton = proton;\n    emit ProtonSet(proton);\n  }\n\n  function setTreasury(address payable treasury) external onlyOwner {\n    require(treasury != address(0), \"Invalid address for treasury\");\n    _treasury = treasury;\n    emit Web3PacksTreasurySet(treasury);\n  }\n\n  function setProtocolFee(uint256 fee) external onlyOwner {\n    _protocolFee = fee;\n    emit ProtocolFeeSet(fee);\n  }\n\n  function registerBundlerId(bytes32 bundlerId, address bundlerAddress) external onlyOwner {\n    _bundlersById[bundlerId] = bundlerAddress;\n    emit BundlerRegistered(bundlerAddress, bundlerId);\n  }\n\n  function pause() public onlyOwner {\n    _pause();\n  }\n\n  function unpause() public onlyOwner {\n    _unpause();\n  }\n\n\n  /***********************************|\n  |          Only Admin/DAO           |\n  |      (blackhole prevention)       |\n  |__________________________________*/\n\n  function withdrawEther(address payable receiver, uint256 amount) external virtual onlyOwner {\n    _withdrawEther(receiver, amount);\n  }\n\n  function withdrawErc20(address payable receiver, address tokenAddress, uint256 amount) external virtual onlyOwner {\n    _withdrawERC20(receiver, tokenAddress, amount);\n  }\n\n  function withdrawERC721(address payable receiver, address tokenAddress, uint256 tokenId) external virtual onlyOwner {\n    _withdrawERC721(receiver, tokenAddress, tokenId);\n  }\n\n  function withdrawERC1155(address payable receiver, address tokenAddress, uint256 tokenId, uint256 amount) external virtual onlyOwner {\n    _withdrawERC1155(receiver, tokenAddress, tokenId, amount);\n  }\n\n  function onERC721Received(\n    address,\n    address,\n    uint256,\n    bytes calldata\n  ) external pure returns(bytes4) {\n    return this.onERC721Received.selector;\n  }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS =\n        0x000000000000000000636F6e736F6c652e6c6f67;\n\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    consoleAddress,\n                    add(payload, 32),\n                    mload(payload),\n                    0,\n                    0\n                )\n            )\n        }\n    }\n\n    function _castToPure(\n      function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castToPure(_sendLogPayloadImplementation)(payload);\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n\n    function logInt(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}