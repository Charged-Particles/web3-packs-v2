{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IWETH.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nlibrary TransferHelper {\n    /// @notice Transfers tokens from the targeted address to the given destination\n    /// @notice Errors with 'STF' if transfer fails\n    /// @param token The contract address of the token to be transferred\n    /// @param from The originating address from which the tokens will be transferred\n    /// @param to The destination address of the transfer\n    /// @param value The amount to be transferred\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\n    }\n\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Errors with ST if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\n    }\n\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\n    /// @dev Errors with 'SA' if transfer fails\n    /// @param token The contract address of the token to be approved\n    /// @param to The target of the approval\n    /// @param value The amount of the given token the target will be allowed to spend\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\n    }\n\n    /// @notice Transfers ETH to the recipient address\n    /// @dev Fails with `STE`\n    /// @param to The destination of the transfer\n    /// @param value The value to be transferred\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'STE');\n    }\n}\n"
    },
    "contracts/interfaces/IBaseProton.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// IBaseProton.sol -- Part of the Charged Particles Protocol\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\ninterface IBaseProton {\n  function createProton(\n    address creator,\n    address receiver,\n    string memory tokenMetaUri\n  ) external returns (uint256 newTokenId);\n\n  function createBasicProton(\n    address creator,\n    address receiver,\n    string memory tokenMetaUri\n  )\n    external\n    payable\n    returns (uint256 newTokenId);\n\n  function safeTransferFrom(address from, address to, uint256 tokenId) external;\n}"
    },
    "contracts/interfaces/IChargedParticles.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// IChargedParticles.sol -- Part of the Charged Particles Protocol\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\n/**\n * @notice Interface for Charged Particles\n */\ninterface IChargedParticles {\n    /***********************************|\n  |             Public API            |\n  |__________________________________*/\n\n    function getStateAddress() external view returns (address stateAddress);\n\n    function getSettingsAddress()\n        external\n        view\n        returns (address settingsAddress);\n\n    function getManagersAddress()\n        external\n        view\n        returns (address managersAddress);\n\n    function getFeesForDeposit(uint256 assetAmount)\n        external\n        view\n        returns (uint256 protocolFee);\n\n    function baseParticleMass(\n        address contractAddress,\n        uint256 tokenId,\n        string calldata walletManagerId,\n        address assetToken\n    ) external returns (uint256);\n\n    function currentParticleCharge(\n        address contractAddress,\n        uint256 tokenId,\n        string calldata walletManagerId,\n        address assetToken\n    ) external returns (uint256);\n\n    function currentParticleKinetics(\n        address contractAddress,\n        uint256 tokenId,\n        string calldata walletManagerId,\n        address assetToken\n    ) external returns (uint256);\n\n    function currentParticleCovalentBonds(\n        address contractAddress,\n        uint256 tokenId,\n        string calldata basketManagerId\n    ) external view returns (uint256);\n\n    /***********************************|\n  |        Particle Mechanics         |\n  |__________________________________*/\n\n    function energizeParticle(\n        address contractAddress,\n        uint256 tokenId,\n        string calldata walletManagerId,\n        address assetToken,\n        uint256 assetAmount,\n        address referrer\n    ) external returns (uint256 yieldTokensAmount);\n\n    function dischargeParticle(\n        address receiver,\n        address contractAddress,\n        uint256 tokenId,\n        string calldata walletManagerId,\n        address assetToken\n    ) external returns (uint256 creatorAmount, uint256 receiverAmount);\n\n    function dischargeParticleAmount(\n        address receiver,\n        address contractAddress,\n        uint256 tokenId,\n        string calldata walletManagerId,\n        address assetToken,\n        uint256 assetAmount\n    ) external returns (uint256 creatorAmount, uint256 receiverAmount);\n\n    function dischargeParticleForCreator(\n        address receiver,\n        address contractAddress,\n        uint256 tokenId,\n        string calldata walletManagerId,\n        address assetToken,\n        uint256 assetAmount\n    ) external returns (uint256 receiverAmount);\n\n    function releaseParticle(\n        address receiver,\n        address contractAddress,\n        uint256 tokenId,\n        string calldata walletManagerId,\n        address assetToken\n    ) external returns (uint256 creatorAmount, uint256 receiverAmount);\n\n    function releaseParticleAmount(\n        address receiver,\n        address contractAddress,\n        uint256 tokenId,\n        string calldata walletManagerId,\n        address assetToken,\n        uint256 assetAmount\n    ) external returns (uint256 creatorAmount, uint256 receiverAmount);\n\n    function covalentBond(\n        address contractAddress,\n        uint256 tokenId,\n        string calldata basketManagerId,\n        address nftTokenAddress,\n        uint256 nftTokenId,\n        uint256 nftTokenAmount\n    ) external returns (bool success);\n\n    function breakCovalentBond(\n        address receiver,\n        address contractAddress,\n        uint256 tokenId,\n        string calldata basketManagerId,\n        address nftTokenAddress,\n        uint256 nftTokenId,\n        uint256 nftTokenAmount\n    ) external returns (bool success);\n\n    /***********************************|\n  |          Particle Events          |\n  |__________________________________*/\n\n    event Initialized(address indexed initiator);\n    event ControllerSet(address indexed controllerAddress, string controllerId);\n    event DepositFeeSet(uint256 depositFee);\n    event ProtocolFeesCollected(\n        address indexed assetToken,\n        uint256 depositAmount,\n        uint256 feesCollected\n    );\n}\n"
    },
    "contracts/interfaces/IChargedState.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// IChargedState.sol -- Part of the Charged Particles Protocol\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\n/**\n * @notice Interface for Charged State\n */\ninterface IChargedState {\n  /***********************************|\n  |             Public API            |\n  |__________________________________*/\n\n    function getDischargeTimelockExpiry(\n        address contractAddress,\n        uint256 tokenId\n    ) external view returns (uint256 lockExpiry);\n\n    function getReleaseTimelockExpiry(address contractAddress, uint256 tokenId)\n        external\n        view\n        returns (uint256 lockExpiry);\n\n    function getBreakBondTimelockExpiry(\n        address contractAddress,\n        uint256 tokenId\n    ) external view returns (uint256 lockExpiry);\n\n    function isApprovedForDischarge(\n        address contractAddress,\n        uint256 tokenId,\n        address operator\n    ) external returns (bool);\n\n    function isApprovedForRelease(\n        address contractAddress,\n        uint256 tokenId,\n        address operator\n    ) external returns (bool);\n\n    function isApprovedForBreakBond(\n        address contractAddress,\n        uint256 tokenId,\n        address operator\n    ) external returns (bool);\n\n    function isApprovedForTimelock(\n        address contractAddress,\n        uint256 tokenId,\n        address operator\n    ) external returns (bool);\n\n    function isEnergizeRestricted(address contractAddress, uint256 tokenId)\n        external\n        view\n        returns (bool);\n\n    function isCovalentBondRestricted(address contractAddress, uint256 tokenId)\n        external\n        view\n        returns (bool);\n\n    function getDischargeState(\n        address contractAddress,\n        uint256 tokenId,\n        address sender\n    )\n        external\n        returns (\n            bool allowFromAll,\n            bool isApproved,\n            uint256 timelock,\n            uint256 tempLockExpiry\n        );\n\n    function getReleaseState(\n        address contractAddress,\n        uint256 tokenId,\n        address sender\n    )\n        external\n        returns (\n            bool allowFromAll,\n            bool isApproved,\n            uint256 timelock,\n            uint256 tempLockExpiry\n        );\n\n    function getBreakBondState(\n        address contractAddress,\n        uint256 tokenId,\n        address sender\n    )\n        external\n        returns (\n            bool allowFromAll,\n            bool isApproved,\n            uint256 timelock,\n            uint256 tempLockExpiry\n        );\n\n    /***********************************|\n  |      Only NFT Owner/Operator      |\n  |__________________________________*/\n\n    function setDischargeApproval(\n        address contractAddress,\n        uint256 tokenId,\n        address operator\n    ) external;\n\n    function setReleaseApproval(\n        address contractAddress,\n        uint256 tokenId,\n        address operator\n    ) external;\n\n    function setBreakBondApproval(\n        address contractAddress,\n        uint256 tokenId,\n        address operator\n    ) external;\n\n    function setTimelockApproval(\n        address contractAddress,\n        uint256 tokenId,\n        address operator\n    ) external;\n\n    function setApprovalForAll(\n        address contractAddress,\n        uint256 tokenId,\n        address operator\n    ) external;\n\n    function setPermsForRestrictCharge(\n        address contractAddress,\n        uint256 tokenId,\n        bool state\n    ) external;\n\n    function setPermsForAllowDischarge(\n        address contractAddress,\n        uint256 tokenId,\n        bool state\n    ) external;\n\n    function setPermsForAllowRelease(\n        address contractAddress,\n        uint256 tokenId,\n        bool state\n    ) external;\n\n    function setPermsForRestrictBond(\n        address contractAddress,\n        uint256 tokenId,\n        bool state\n    ) external;\n\n    function setPermsForAllowBreakBond(\n        address contractAddress,\n        uint256 tokenId,\n        bool state\n    ) external;\n\n    function setDischargeTimelock(\n        address contractAddress,\n        uint256 tokenId,\n        uint256 unlockBlock\n    ) external;\n\n    function setReleaseTimelock(\n        address contractAddress,\n        uint256 tokenId,\n        uint256 unlockBlock\n    ) external;\n\n    function setBreakBondTimelock(\n        address contractAddress,\n        uint256 tokenId,\n        uint256 unlockBlock\n    ) external;\n\n    /***********************************|\n  |         Only NFT Contract         |\n  |__________________________________*/\n\n    function setTemporaryLock(\n        address contractAddress,\n        uint256 tokenId,\n        bool isLocked\n    ) external;\n\n    /***********************************|\n  |          Particle Events          |\n  |__________________________________*/\n\n    event Initialized(address indexed initiator);\n    event ControllerSet(address indexed controllerAddress, string controllerId);\n\n    event DischargeApproval(\n        address indexed contractAddress,\n        uint256 indexed tokenId,\n        address indexed owner,\n        address operator\n    );\n    event ReleaseApproval(\n        address indexed contractAddress,\n        uint256 indexed tokenId,\n        address indexed owner,\n        address operator\n    );\n    event BreakBondApproval(\n        address indexed contractAddress,\n        uint256 indexed tokenId,\n        address indexed owner,\n        address operator\n    );\n    event TimelockApproval(\n        address indexed contractAddress,\n        uint256 indexed tokenId,\n        address indexed owner,\n        address operator\n    );\n\n    event TokenDischargeTimelock(\n        address indexed contractAddress,\n        uint256 indexed tokenId,\n        address indexed operator,\n        uint256 unlockBlock\n    );\n    event TokenReleaseTimelock(\n        address indexed contractAddress,\n        uint256 indexed tokenId,\n        address indexed operator,\n        uint256 unlockBlock\n    );\n    event TokenBreakBondTimelock(\n        address indexed contractAddress,\n        uint256 indexed tokenId,\n        address indexed operator,\n        uint256 unlockBlock\n    );\n    event TokenTempLock(\n        address indexed contractAddress,\n        uint256 indexed tokenId,\n        uint256 unlockBlock\n    );\n\n    event PermsSetForRestrictCharge(\n        address indexed contractAddress,\n        uint256 indexed tokenId,\n        bool state\n    );\n    event PermsSetForAllowDischarge(\n        address indexed contractAddress,\n        uint256 indexed tokenId,\n        bool state\n    );\n    event PermsSetForAllowRelease(\n        address indexed contractAddress,\n        uint256 indexed tokenId,\n        bool state\n    );\n    event PermsSetForRestrictBond(\n        address indexed contractAddress,\n        uint256 indexed tokenId,\n        bool state\n    );\n    event PermsSetForAllowBreakBond(\n        address indexed contractAddress,\n        uint256 indexed tokenId,\n        bool state\n    );\n}\n"
    },
    "contracts/interfaces/IWeb3Packs.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// IWeb3Packs.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\npragma solidity 0.8.17;\n\nimport \"./IWeb3PacksDefs.sol\";\n\ninterface IWeb3Packs is IWeb3PacksDefs {\n  event BundledERC20(address indexed tokenAddress, uint256 amountOut);\n  event BundledERC721(address indexed tokenAddress, uint256 nftTokenId);\n\n  // BUNDLE\n  function bundle(\n    IWeb3PacksDefs.BundleChunk[] calldata bundleChunks,\n    address[] calldata referrals,\n    string calldata tokenMetaUri,\n    IWeb3PacksDefs.LockState calldata lockState,\n    bytes32 packType,\n    uint256 ethPackPrice\n  ) external\n    payable\n    returns(uint256 tokenId);\n\n  // UNBUNDLE\n  function unbundle(\n    address payable receiver,\n    address tokenAddress,\n    uint256 tokenId,\n    bool sellAll\n  ) external\n    payable;\n\n  function unbundleUnknown(\n    address payable receiver,\n    address tokenAddress,\n    uint256 tokenId,\n    bytes32[] memory packBundles,\n    bool sellAll\n  ) external\n    payable;\n\n  // QUERY\n  function getPackBalances(\n    address tokenAddress,\n    uint256 tokenId\n  ) external\n    returns (TokenAmount[] memory);\n\n  function getPackPriceEth(uint256 tokenId)\n    external\n    returns (uint256 packPriceEth);\n\n  function getReferralRewardsOf(address account)\n    external\n    returns (uint256 balance);\n}\n"
    },
    "contracts/interfaces/IWeb3PacksBundler.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// IWeb3PacksBundler.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\npragma solidity 0.8.17;\n\n\ninterface IWeb3PacksBundler {\n  event BundledTokenSS(address indexed token, uint256 amount);\n  event BundledTokenLP(address indexed token0, address indexed token1, uint256 amount0, uint256 amount1, uint256 liquidity);\n\n  function getLiquidityToken(uint256 packTokenId) external returns (address tokenAddress, uint256 tokenId);\n\n  function bundle(uint256 packTokenId, address sender)\n    payable\n    external\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    );\n\n  function unbundle(address payable receiver, uint256 packTokenId, bool sellAll)\n    external\n    returns(uint256 amountOut);\n}\n"
    },
    "contracts/interfaces/IWeb3PacksDefs.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// IWeb3PacksDefs.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\ninterface IWeb3PacksDefs {\n  // Custom Errors\n  error NotOwnerOrApproved();\n  error FundingFailed();\n  error SwapFailed();\n  error NullReceiver();\n  error ContractNotAllowed();\n  error NativeAssetTransferFailed();\n  error MismatchedTokens();\n  error NoBundlesInPack();\n  error FailedToExitWeth();\n  error BundlerNotRegistered(bytes32 bundlerId);\n  error MissingLiquidityUUID(address tokenAddress);\n  error UnsucessfulSwap(address tokenOut, uint256 amountIn, address router);\n  error InsufficientForFee(uint256 value, uint256 ethPackPrice, uint256 protocolFee);\n\n  struct RouterConfig {\n    address weth;\n    address token0;\n    address token1;\n    address manager;\n    address swapRouter;\n    address liquidityRouter;\n    bytes32 poolId;\n    bytes32 bundlerId;\n    uint256 slippage;\n    int24 tickLower;\n    int24 tickUpper;\n  }\n\n  struct BundleChunk {\n    bytes32 bundlerId;\n    uint256 percentBasisPoints;\n  }\n\n  struct Token {\n    address tokenAddress;\n    uint256 tokenDecimals;\n    string tokenSymbol;\n  }\n\n  struct TokenAmount {\n    address tokenAddress;\n    uint256 balance;\n    uint256 nftTokenId;\n  }\n\n  struct Route {\n    address token0;\n    address token1;\n    bool stable;\n  }\n\n  struct LiquidityPosition {\n    uint256 lpTokenId;\n    uint256 liquidity;\n    bool stable;\n  }\n\n  struct LockState {\n    uint256 ERC20Timelock;\n    uint256 ERC721Timelock;\n  }\n}\n"
    },
    "contracts/interfaces/IWeb3PacksState.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// IWeb3PacksState.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\npragma solidity 0.8.17;\n\ninterface IWeb3PacksState {\n  function getBundlerById(bytes32 bundlerId) external view returns (address bundler);\n  function setPackPriceByPackId(uint256 tokenId, uint256 packPrice) external;\n  function getPackPriceByPackId(uint256 tokenId) external view returns (uint256 packPrice);\n  function setBundlesByPackId(uint256 tokenId, bytes32[] memory bundles) external;\n  function getBundlesByPackId(uint256 tokenId) external view returns (bytes32[] memory bundles);\n  function addToReferrerBalance(address referrer, uint256 amount) external;\n  function getReferrerBalance(address referrer) external view returns (uint256 balance);\n  function claimReferralRewards(address payable account) external;\n\n  function setWeb3Packs(address web3packs) external;\n  function registerBundlerId(bytes32 bundlerId, address bundlerAddress) external;\n}\n"
    },
    "contracts/lib/BlackholePrevention.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// BlackholePrevention.sol -- Part of the Charged Particles Protocol\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\n\n/**\n * @notice Prevents ETH or Tokens from getting stuck in a contract by allowing\n *  the Owner/DAO to pull them out on behalf of a user\n * This is only meant to contracts that are not expected to hold tokens, but do handle transferring them.\n */\ncontract BlackholePrevention {\n    using Address for address payable;\n    using SafeERC20 for IERC20;\n\n    event WithdrawStuckEther(address indexed receiver, uint256 amount);\n    event WithdrawStuckERC20(\n        address indexed receiver,\n        address indexed tokenAddress,\n        uint256 amount\n    );\n    event WithdrawStuckERC721(\n        address indexed receiver,\n        address indexed tokenAddress,\n        uint256 indexed tokenId\n    );\n    event WithdrawStuckERC1155(\n        address indexed receiver,\n        address indexed tokenAddress,\n        uint256 indexed tokenId,\n        uint256 amount\n    );\n\n    function _withdrawEther(address payable receiver, uint256 amount)\n        internal\n        virtual\n    {\n        require(receiver != address(0x0), \"BHP:E-403\");\n        if (address(this).balance >= amount) {\n            receiver.sendValue(amount);\n            emit WithdrawStuckEther(receiver, amount);\n        }\n    }\n\n    function _withdrawERC20(\n        address payable receiver,\n        address tokenAddress,\n        uint256 amount\n    ) internal virtual {\n        require(receiver != address(0x0), \"BHP:E-403\");\n        if (IERC20(tokenAddress).balanceOf(address(this)) >= amount) {\n            IERC20(tokenAddress).safeTransfer(receiver, amount);\n            emit WithdrawStuckERC20(receiver, tokenAddress, amount);\n        }\n    }\n\n    function _withdrawERC721(\n        address payable receiver,\n        address tokenAddress,\n        uint256 tokenId\n    ) internal virtual {\n        require(receiver != address(0x0), \"BHP:E-403\");\n        if (IERC721(tokenAddress).ownerOf(tokenId) == address(this)) {\n            IERC721(tokenAddress).transferFrom(\n                address(this),\n                receiver,\n                tokenId\n            );\n            emit WithdrawStuckERC721(receiver, tokenAddress, tokenId);\n        }\n    }\n\n    function _withdrawERC1155(\n        address payable receiver,\n        address tokenAddress,\n        uint256 tokenId,\n        uint256 amount\n    ) internal virtual {\n        require(receiver != address(0x0), \"BHP:E-403\");\n        if (\n            IERC1155(tokenAddress).balanceOf(address(this), tokenId) >= amount\n        ) {\n            IERC1155(tokenAddress).safeTransferFrom(\n                address(this),\n                receiver,\n                tokenId,\n                amount,\n                \"\"\n            );\n            emit WithdrawStuckERC1155(receiver, tokenAddress, tokenId, amount);\n        }\n    }\n}\n"
    },
    "contracts/Web3PacksV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// Web3PacksV2.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n//  __    __     _    _____   ___           _                   ____\n// / / /\\ \\ \\___| |__|___ /  / _ \\__ _  ___| | _____     /\\   /\\___ \\\n// \\ \\/  \\/ / _ \\ '_ \\ |_ \\ / /_)/ _` |/ __| |/ / __|____\\ \\ / / __) |\n//  \\  /\\  /  __/ |_) |__) / ___/ (_| | (__|   <\\__ \\_____\\ V / / __/\n//   \\/  \\/ \\___|_.__/____/\\/    \\__,_|\\___|_|\\_\\___/      \\_/ |_____|\n//\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"./lib/BlackholePrevention.sol\";\nimport \"./interfaces/IWeb3Packs.sol\";\nimport \"./interfaces/IWeb3PacksState.sol\";\nimport \"./interfaces/IWeb3PacksDefs.sol\";\nimport \"./interfaces/IWeb3PacksBundler.sol\";\nimport \"./interfaces/IChargedState.sol\";\nimport \"./interfaces/IChargedParticles.sol\";\nimport \"./interfaces/IBaseProton.sol\";\n\ncontract Web3PacksV2 is\n  IWeb3Packs,\n  Ownable,\n  Pausable,\n  BlackholePrevention,\n  ReentrancyGuard\n{\n  using Address for address payable;\n\n  event ChargedParticlesSet(address indexed chargedParticles);\n  event ChargedStateSet(address indexed chargedState);\n  event Web3PacksStateSet(address indexed web3state);\n  event ProtonSet(address indexed proton);\n  event PackBundled(uint256 indexed tokenId, address indexed receiver, bytes32 packType, uint256 ethPackPrice);\n  event PackUnbundled(uint256 indexed tokenId, address indexed receiver, uint256 ethAmount);\n  event ProtocolFeeSet(uint256 fee);\n  event Web3PacksTreasurySet(address indexed treasury);\n\n  uint256 private constant BASIS_POINTS = 10000;\n\n  address public _weth;\n  address public _proton;\n  address public _web3state;\n  address public _chargedParticles;\n  address public _chargedState;\n  address payable internal _treasury;\n  uint256 public _protocolFee;\n\n  // Charged Particles Wallet Managers\n  string public _cpWalletManager = \"generic.B\";\n  string public _cpBasketManager = \"generic.B\";\n\n  constructor(\n    address weth,\n    address proton,\n    address chargedParticles,\n    address chargedState\n  ) {\n    _weth = weth;\n    _proton = proton;\n    _chargedParticles = chargedParticles;\n    _chargedState = chargedState;\n  }\n\n  receive() external payable {}\n\n\n  /***********************************|\n  |               Public              |\n  |__________________________________*/\n\n  function bundle(\n    IWeb3PacksDefs.BundleChunk[] calldata bundleChunks,\n    address[] calldata referrals,\n    string calldata tokenMetaUri,\n    IWeb3PacksDefs.LockState calldata lockState,\n    bytes32 packType,\n    uint256 ethPackPrice\n  )\n    external\n    override\n    payable\n    whenNotPaused\n    nonReentrant\n    returns(uint256 tokenId)\n  {\n    _collectFees(ethPackPrice);\n    uint256 rewards = _calculateReferralRewards(ethPackPrice, referrals);\n    tokenId = _bundle(\n      bundleChunks,\n      tokenMetaUri,\n      lockState,\n      ethPackPrice - rewards\n    );\n    emit PackBundled(tokenId, _msgSender(), packType, ethPackPrice);\n  }\n\n  function unbundle(\n    address payable receiver,\n    address tokenAddress,\n    uint256 tokenId,\n    bool sellAll\n  )\n    external\n    override\n    payable\n    whenNotPaused\n    nonReentrant\n  {\n    _collectFees(0);\n    uint256 ethAmount = _unbundle(\n      receiver,\n      tokenAddress,\n      tokenId,\n      sellAll\n    );\n    emit PackUnbundled(tokenId, receiver, ethAmount);\n  }\n\n  // Primarily for Unbundling Old Packs from V1\n  function unbundleUnknown(\n    address payable receiver,\n    address tokenAddress,\n    uint256 tokenId,\n    bytes32[] memory packBundles,\n    bool sellAll\n  )\n    external\n    override\n    payable\n    whenNotPaused\n    nonReentrant\n  {\n    _collectFees(0);\n    uint256 ethAmount = _unbundlePack(\n      receiver,\n      tokenAddress,\n      tokenId,\n      packBundles,\n      sellAll\n    );\n    emit PackUnbundled(tokenId, receiver, ethAmount);\n  }\n\n  // NOTE: Call via \"staticCall\" for Balances\n  function getPackBalances(address tokenAddress, uint256 tokenId) public override returns (TokenAmount[] memory) {\n    return _getPackBalances(tokenAddress, tokenId);\n  }\n\n  function getPackPriceEth(uint256 tokenId) public view override returns (uint256 packPriceEth) {\n    packPriceEth = IWeb3PacksState(_web3state).getPackPriceByPackId(tokenId);\n  }\n\n  function getReferralRewardsOf(address account) public view override returns (uint256 balance) {\n    balance = IWeb3PacksState(_web3state).getReferrerBalance(account);\n  }\n\n  /***********************************|\n  |     Private Bundle Functions      |\n  |__________________________________*/\n\n  function _bundle(\n    IWeb3PacksDefs.BundleChunk[] calldata bundleChunks,\n    string calldata tokenMetaUri,\n    IWeb3PacksDefs.LockState calldata lockState,\n    uint256 ethPackPrice\n  )\n    internal\n    returns(uint256 tokenId)\n  {\n    IWeb3PacksBundler bundler;\n\n    // Mint Web3Pack NFT\n    tokenId = _createBasicProton(tokenMetaUri);\n\n    // Wrap ETH for WETH\n    IWETH(_weth).deposit{value: ethPackPrice}();\n    uint256 wethTotal = IERC20(_weth).balanceOf(address(this));\n    uint256 chunkWeth;\n\n    // Returned from Each Bundle:\n    address tokenAddress;\n    uint256 amountOut;\n    uint256 nftTokenId;\n\n    // Iterate over each Bundle\n    bytes32[] memory packBundlerIds = new bytes32[](bundleChunks.length);\n    for (uint256 i; i < bundleChunks.length; i++) {\n      IWeb3PacksDefs.BundleChunk memory chunk = bundleChunks[i];\n      packBundlerIds[i] = chunk.bundlerId; // track bundlerIds per pack\n\n      // Ensure Bundler is Registered\n      address bundlerAddress = IWeb3PacksState(_web3state).getBundlerById(chunk.bundlerId);\n      if (bundlerAddress == address(0)) {\n        revert BundlerNotRegistered(chunk.bundlerId);\n      }\n      bundler = IWeb3PacksBundler(bundlerAddress);\n\n      // Calculate Percent\n      chunkWeth = (wethTotal * chunk.percentBasisPoints) / BASIS_POINTS;\n\n      // Send WETH to Bundler\n      TransferHelper.safeTransfer(_weth, address(bundler), chunkWeth);\n\n      // Receive Assets from Bundler\n      //  If Liquidity is ERC20: nftTokenId == 0\n      //  If Liquidity is ERC721: nftTokenId > 0\n      (tokenAddress, amountOut, nftTokenId) = bundler.bundle(tokenId, _msgSender());\n\n      // Deposit the Assets into the Web3Packs NFT\n      if (nftTokenId == 0) {\n        _energize(tokenId, tokenAddress, amountOut);\n        emit BundledERC20(tokenAddress, amountOut);\n      } else {\n        _bond(tokenId, tokenAddress, nftTokenId);\n        emit BundledERC721(tokenAddress, nftTokenId);\n      }\n    }\n\n    // Track Pack Data\n    IWeb3PacksState(_web3state).setBundlesByPackId(tokenId, packBundlerIds);\n    IWeb3PacksState(_web3state).setPackPriceByPackId(tokenId, ethPackPrice);\n\n    // Set the Timelock State\n    _lock(lockState, tokenId);\n\n    // Transfer the Web3Packs NFT to the Buyer\n    IBaseProton(_proton).safeTransferFrom(address(this), _msgSender(), tokenId);\n  }\n\n  function _unbundle(\n    address payable receiver,\n    address tokenAddress,\n    uint256 packTokenId,\n    bool sellAll\n  )\n    internal\n    returns (uint ethAmount)\n  {\n    // Ensure Pack has Bundles\n    bytes32[] memory bundles = IWeb3PacksState(_web3state).getBundlesByPackId(packTokenId);\n    if (bundles.length == 0) {\n      revert NoBundlesInPack();\n    }\n\n    // Unbundle Known Pack\n    ethAmount = _unbundlePack(\n      receiver,\n      tokenAddress,\n      packTokenId,\n      bundles,\n      sellAll\n    );\n\n    // Clear Bundles for Pack\n    bytes32[] memory empty;\n    IWeb3PacksState(_web3state).setBundlesByPackId(packTokenId, empty);\n    IWeb3PacksState(_web3state).setPackPriceByPackId(packTokenId, 0);\n  }\n\n  function _unbundlePack(\n    address payable receiver,\n    address tokenAddress,\n    uint256 packTokenId,\n    bytes32[] memory packBundles,\n    bool sellAll\n  )\n    internal\n    returns (uint ethAmount)\n  {\n    IWeb3PacksBundler bundler;\n\n    // Verify Ownership\n    address owner = IERC721(tokenAddress).ownerOf(packTokenId);\n    if (_msgSender() != owner) {\n      revert NotOwnerOrApproved();\n    }\n\n    address assetTokenAddress;\n    uint256 assetTokenId;\n    for (uint i; i < packBundles.length; i++) {\n      address bundlerAddress = IWeb3PacksState(_web3state).getBundlerById(packBundles[i]);\n      if (bundlerAddress == address(0)) {\n        // skip unregistered bundlers to prevent breaking unbundle\n        continue;\n      }\n      bundler = IWeb3PacksBundler(bundlerAddress);\n\n      // Pull Assets from NFT and send to Bundler for Unbundling\n      (assetTokenAddress, assetTokenId) = bundler.getLiquidityToken(packTokenId);\n      if (assetTokenId == 0) {\n        _release(bundlerAddress, packTokenId, assetTokenAddress);\n      } else {\n        _breakBond(bundlerAddress, packTokenId, assetTokenAddress, assetTokenId);\n      }\n\n      // Unbundle current asset\n      ethAmount += bundler.unbundle(receiver, packTokenId, sellAll);\n    }\n  }\n\n  function _getPackBalances(address tokenAddress, uint256 tokenId) internal returns (TokenAmount[] memory) {\n    IWeb3PacksBundler bundler;\n\n    // Ensure Pack has Bundles\n    bytes32[] memory bundles = IWeb3PacksState(_web3state).getBundlesByPackId(tokenId);\n    uint256 bundleCount = bundles.length;\n    if (bundleCount == 0) {\n      revert NoBundlesInPack();\n    }\n\n    TokenAmount[] memory tokenBalances = new TokenAmount[](bundleCount);\n    for (uint i; i < bundleCount; i++) {\n      bytes32 bundlerId = bundles[i];\n      address bundlerAddress = IWeb3PacksState(_web3state).getBundlerById(bundlerId);\n      if (bundlerAddress == address(0)) {\n        // skip unregistered bundlers\n        continue;\n      }\n\n      // Get Liquidity Token from Bundler\n      bundler = IWeb3PacksBundler(bundlerAddress);\n      (address assetTokenAddress, uint256 assetTokenId) = bundler.getLiquidityToken(tokenId);\n      bool isNft = (assetTokenId > 0);\n\n      // Get Balance of NFT from Charged Particles\n      uint256 assetBalance = isNft ? 1 : _getMass(tokenAddress, tokenId, assetTokenAddress);\n\n      // Track Token Balances\n      tokenBalances[i] = TokenAmount({\n        tokenAddress: assetTokenAddress,\n        balance: assetBalance,\n        nftTokenId: assetTokenId\n      });\n    }\n    return tokenBalances;\n  }\n\n  /***********************************|\n  |     Private Charged Functions     |\n  |__________________________________*/\n\n  function _createBasicProton(\n    string memory tokenMetadataUri\n  )\n    internal\n    returns (uint256 mintedTokenId)\n  {\n    // Mint Web3Packs NFT (Charged-Particles ProtonC)\n    mintedTokenId = IBaseProton(_proton).createBasicProton(\n      address(this),\n      address(this),\n      tokenMetadataUri\n    );\n  }\n\n  function _energize(\n    uint256 packTokenId,\n    address assetTokenAddress,\n    uint256 assetTokenAmount\n  )\n    internal\n  {\n    if (assetTokenAmount == 0) {\n      assetTokenAmount = IERC20(assetTokenAddress).balanceOf(address(this));\n    }\n\n    TransferHelper.safeApprove(\n      assetTokenAddress,\n      address(_chargedParticles),\n      assetTokenAmount\n    );\n\n    IChargedParticles(_chargedParticles).energizeParticle(\n      _proton,\n      packTokenId,\n      _cpWalletManager,\n      assetTokenAddress,\n      assetTokenAmount,\n      address(this)\n    );\n  }\n\n  function _release(\n    address receiver,\n    uint256 packTokenId,\n    address assetTokenAddress\n  )\n    internal\n  {\n    IChargedParticles(_chargedParticles).releaseParticle(\n      receiver,\n      _proton,\n      packTokenId,\n      _cpWalletManager,\n      assetTokenAddress\n    );\n  }\n\n  function _bond(\n    uint256 packTokenId,\n    address nftTokenAddress,\n    uint256 nftTokenId\n  )\n    internal\n  {\n    IERC721(nftTokenAddress).setApprovalForAll(_chargedParticles, true);\n\n    IChargedParticles(_chargedParticles).covalentBond(\n      _proton,\n      packTokenId,\n      _cpBasketManager,\n      nftTokenAddress,\n      nftTokenId,\n      1\n    );\n  }\n\n  function _breakBond(\n    address receiver,\n    uint256 packTokenId,\n    address nftTokenAddress,\n    uint256 nftTokenId\n  )\n    internal\n  {\n    IChargedParticles(_chargedParticles).breakCovalentBond(\n      receiver,\n      _proton,\n      packTokenId,\n      _cpBasketManager,\n      nftTokenAddress,\n      nftTokenId,\n      1\n    );\n  }\n\n  function _lock(LockState calldata lockState, uint256 tokenId) internal {\n    if(lockState.ERC20Timelock > 0) {\n      IChargedState(_chargedState).setReleaseTimelock(\n        _proton,\n        tokenId,\n        lockState.ERC20Timelock\n      );\n    }\n\n    if(lockState.ERC721Timelock > 0) {\n      IChargedState(_chargedState).setBreakBondTimelock(\n        _proton,\n        tokenId,\n        lockState.ERC721Timelock\n      );\n    }\n  }\n\n  function _getMass(address tokenAddress, uint256 tokenId, address assetTokenAddress) internal returns (uint256 assetMass) {\n    /// @dev \"baseParticleMass\" is not a \"view\" function; call via \"callStatic\"\n    assetMass = IChargedParticles(_chargedParticles)\n      .baseParticleMass(tokenAddress, tokenId, _cpWalletManager, assetTokenAddress);\n  }\n\n  function _collectFees(uint256 excludedAmount) internal {\n    // Track Collected Fees\n    if (_protocolFee > 0 && msg.value < (_protocolFee + excludedAmount)) {\n      revert InsufficientForFee(msg.value, excludedAmount, _protocolFee);\n    }\n    uint256 fees = msg.value - excludedAmount;\n    _treasury.sendValue(fees);\n  }\n\n  function _calculateReferralRewards(\n    uint256 ethPackPrice,\n    address[] memory referrals\n  ) internal returns (uint256 fee) {\n    uint256 referralAmountTotal = ((ethPackPrice * 330) / BASIS_POINTS);  // 3.3%\n    IWeb3PacksState _state = IWeb3PacksState(_web3state);\n\n    // Calculate Referral Amounts and Distribute\n    if (referrals.length > 0 && referrals[0] != address(0)) {\n      // Remove Referral Value from Funding Value\n      fee = referralAmountTotal;\n\n      if (referrals.length > 1 && referrals[1] != address(0)) {\n        if (referrals.length > 2 && referrals[2] != address(0)) {\n          _state.addToReferrerBalance(referrals[0], (ethPackPrice * 30) / BASIS_POINTS);    // 0.3%\n          _state.addToReferrerBalance(referrals[1], (ethPackPrice * 30) / BASIS_POINTS);    // 0.3%\n          _state.addToReferrerBalance(referrals[2], (ethPackPrice * 270) / BASIS_POINTS);   // 2.7%\n        } else {\n          _state.addToReferrerBalance(referrals[0], (ethPackPrice * 30) / BASIS_POINTS);    // 0.3%\n          _state.addToReferrerBalance(referrals[1], (ethPackPrice * 300) / BASIS_POINTS);   // 3.0%\n        }\n      } else {\n        _state.addToReferrerBalance(referrals[0], referralAmountTotal);   // 3.3%\n      }\n\n      // Transfer Rewards to State Contract\n      payable(_web3state).sendValue(fee);\n    }\n  }\n\n  /***********************************|\n  |          Only Admin/DAO           |\n  |__________________________________*/\n\n  /**\n    * @dev Setup the ChargedParticles Interface\n  */\n  function setChargedParticles(address chargedParticles) external onlyOwner {\n    require(chargedParticles != address(0), \"Invalid address for chargedParticles\");\n    _chargedParticles = chargedParticles;\n    emit ChargedParticlesSet(chargedParticles);\n  }\n\n  function setChargedState(address chargedState) external onlyOwner {\n    require(chargedState != address(0), \"Invalid address for chargedState\");\n    _chargedState = chargedState;\n    emit ChargedStateSet(chargedState);\n  }\n\n  function setProton(address proton) external onlyOwner {\n    require(proton != address(0), \"Invalid address for proton\");\n    _proton = proton;\n    emit ProtonSet(proton);\n  }\n\n  function setWeb3PacksState(address web3state) external onlyOwner {\n    require(web3state != address(0), \"Invalid address for web3state\");\n    _web3state = web3state;\n    emit Web3PacksStateSet(web3state);\n  }\n\n  function setTreasury(address payable treasury) external onlyOwner {\n    require(treasury != address(0), \"Invalid address for treasury\");\n    _treasury = treasury;\n    emit Web3PacksTreasurySet(treasury);\n  }\n\n  function setProtocolFee(uint256 fee) external onlyOwner {\n    _protocolFee = fee;\n    emit ProtocolFeeSet(fee);\n  }\n\n  function pause() public onlyOwner {\n    _pause();\n  }\n\n  function unpause() public onlyOwner {\n    _unpause();\n  }\n\n\n  /***********************************|\n  |          Only Admin/DAO           |\n  |      (blackhole prevention)       |\n  |__________________________________*/\n\n  function withdrawEther(address payable receiver, uint256 amount) external virtual onlyOwner {\n    _withdrawEther(receiver, amount);\n  }\n\n  function withdrawErc20(address payable receiver, address tokenAddress, uint256 amount) external virtual onlyOwner {\n    _withdrawERC20(receiver, tokenAddress, amount);\n  }\n\n  function withdrawERC721(address payable receiver, address tokenAddress, uint256 tokenId) external virtual onlyOwner {\n    _withdrawERC721(receiver, tokenAddress, tokenId);\n  }\n\n  function withdrawERC1155(address payable receiver, address tokenAddress, uint256 tokenId, uint256 amount) external virtual onlyOwner {\n    _withdrawERC1155(receiver, tokenAddress, tokenId, amount);\n  }\n\n  function onERC721Received(\n    address,\n    address,\n    uint256,\n    bytes calldata\n  ) external pure returns(bytes4) {\n    return this.onERC721Received.selector;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}