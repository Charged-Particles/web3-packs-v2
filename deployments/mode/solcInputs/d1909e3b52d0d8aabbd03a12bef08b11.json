{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IWETH.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nlibrary TransferHelper {\n    /// @notice Transfers tokens from the targeted address to the given destination\n    /// @notice Errors with 'STF' if transfer fails\n    /// @param token The contract address of the token to be transferred\n    /// @param from The originating address from which the tokens will be transferred\n    /// @param to The destination address of the transfer\n    /// @param value The amount to be transferred\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\n    }\n\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Errors with ST if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\n    }\n\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\n    /// @dev Errors with 'SA' if transfer fails\n    /// @param token The contract address of the token to be approved\n    /// @param to The target of the approval\n    /// @param value The amount of the given token the target will be allowed to spend\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\n    }\n\n    /// @notice Transfers ETH to the recipient address\n    /// @dev Fails with `STE`\n    /// @param to The destination of the transfer\n    /// @param value The value to be transferred\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'STE');\n    }\n}\n"
    },
    "contracts/interfaces/bsc/IPancakeUniversalRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\nimport {IERC721Receiver} from '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\nimport {IERC1155Receiver} from '@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol';\n\ninterface IRewardsCollector {\n    /// @notice Fetches users' LooksRare rewards and sends them to the distributor contract\n    /// @param looksRareClaim The data required by LooksRare to claim reward tokens\n    function collectRewards(bytes calldata looksRareClaim) external;\n}\n\ninterface IUniversalRouter is IRewardsCollector, IERC721Receiver, IERC1155Receiver {\n    /// @notice Thrown when a required command has failed\n    error ExecutionFailed(uint256 commandIndex, bytes message);\n\n    /// @notice Thrown when attempting to send ETH directly to the contract\n    error ETHNotAccepted();\n\n    /// @notice Thrown when executing commands with an expired deadline\n    error TransactionDeadlinePassed();\n\n    /// @notice Thrown when attempting to execute commands and an incorrect number of inputs are provided\n    error LengthMismatch();\n\n    /// @notice Executes encoded commands along with provided inputs. Reverts if deadline has expired.\n    /// @param commands A set of concatenated commands, each 1 byte in length\n    /// @param inputs An array of byte strings containing abi encoded inputs for each command\n    /// @param deadline The deadline by which the transaction must be executed\n    function execute(bytes calldata commands, bytes[] calldata inputs, uint256 deadline) external payable;\n}\n"
    },
    "contracts/interfaces/IWeb3Packs.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// IWeb3Packs.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\npragma solidity 0.8.17;\n\nimport \"./IWeb3PacksDefs.sol\";\n\ninterface IWeb3Packs is IWeb3PacksDefs {\n  event BundledERC20(address indexed tokenAddress, uint256 amountOut);\n  event BundledERC721(address indexed tokenAddress, uint256 nftTokenId);\n\n  // BUNDLE\n  function bundle(\n    IWeb3PacksDefs.BundleChunk[] calldata bundleChunks,\n    address[] calldata referrals,\n    string calldata tokenMetaUri,\n    IWeb3PacksDefs.LockState calldata lockState,\n    bytes32 packType,\n    uint256 ethPackPrice\n  ) external\n    payable\n    returns(uint256 tokenId);\n\n  // UNBUNDLE\n  function unbundle(\n    address payable receiver,\n    address tokenAddress,\n    uint256 tokenId,\n    bool sellAll\n  ) external\n    payable;\n\n  function unbundleUnknown(\n    address payable receiver,\n    address tokenAddress,\n    uint256 tokenId,\n    bytes32[] memory packBundles,\n    bool sellAll\n  ) external\n    payable;\n\n  // QUERY\n  function getPackBalances(\n    address tokenAddress,\n    uint256 tokenId\n  ) external\n    returns (TokenAmount[] memory);\n\n  function getPackPriceEth(uint256 tokenId)\n    external\n    returns (uint256 packPriceEth);\n\n  function getReferralRewardsOf(address account)\n    external\n    returns (uint256 balance);\n}\n"
    },
    "contracts/interfaces/IWeb3PacksBundler.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// IWeb3PacksBundler.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\npragma solidity 0.8.17;\n\n\ninterface IWeb3PacksBundler {\n  event BundledTokenSS(address indexed token, uint256 amount);\n  event BundledTokenLP(address indexed token0, address indexed token1, uint256 amount0, uint256 amount1, uint256 liquidity);\n\n  function getLiquidityToken(uint256 packTokenId) external returns (address tokenAddress, uint256 tokenId);\n\n  function bundle(uint256 packTokenId, address sender)\n    payable\n    external\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    );\n\n  function unbundle(address payable receiver, uint256 packTokenId, bool sellAll)\n    external\n    returns(uint256 amountOut);\n}\n"
    },
    "contracts/interfaces/IWeb3PacksDefs.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// IWeb3PacksDefs.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\ninterface IWeb3PacksDefs {\n  // Custom Errors\n  error NotOwnerOrApproved();\n  error FundingFailed();\n  error SwapFailed();\n  error NullReceiver();\n  error ContractNotAllowed();\n  error NativeAssetTransferFailed();\n  error MismatchedTokens();\n  error NoBundlesInPack();\n  error FailedToExitWeth();\n  error BundlerNotRegistered(bytes32 bundlerId);\n  error MissingLiquidityUUID(address tokenAddress);\n  error UnsucessfulSwap(address tokenOut, uint256 amountIn, address router);\n  error InsufficientForFee(uint256 value, uint256 ethPackPrice, uint256 protocolFee);\n\n  struct RouterConfig {\n    address weth;\n    address token0;\n    address token1;\n    address manager;\n    address swapRouter;\n    address liquidityRouter;\n    bytes32 poolId;\n    bytes32 bundlerId;\n    uint256 slippage;\n    int24 tickLower;\n    int24 tickUpper;\n  }\n\n  struct BundleChunk {\n    bytes32 bundlerId;\n    uint256 percentBasisPoints;\n  }\n\n  struct Token {\n    address tokenAddress;\n    uint256 tokenDecimals;\n    string tokenSymbol;\n  }\n\n  struct TokenAmount {\n    address tokenAddress;\n    uint256 balance;\n    uint256 nftTokenId;\n  }\n\n  struct Route {\n    address token0;\n    address token1;\n    bool stable;\n  }\n\n  struct LiquidityPosition {\n    uint256 lpTokenId;\n    uint256 liquidity;\n    bool stable;\n  }\n\n  struct LockState {\n    uint256 ERC20Timelock;\n    uint256 ERC721Timelock;\n  }\n}\n"
    },
    "contracts/interfaces/IWeb3PacksOld.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// IWeb3PacksOld.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\npragma solidity 0.8.17;\n\ninterface IWeb3PacksOld {\n  /***********************************|\n  |    For Backwards Compatibility    |\n  |__________________________________*/\n\n  enum RouterType {\n    UniswapV2,\n    UniswapV3,\n    Velodrome,\n    Balancer,\n    SwapMode\n  }\n\n  struct LiquidityPosition {\n    uint256 lpTokenId;\n    uint256 liquidity;\n    bool stable;\n    address token0;\n    address token1;\n    int24 tickLower;\n    int24 tickUpper;\n    bytes32 poolId;\n    address router;\n    RouterType routerType;\n  }\n\n  function getLiquidityPositions(uint256 tokenId) external returns (LiquidityPosition[] memory positions);\n}\n"
    },
    "contracts/interfaces/IWeb3PacksRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// IWeb3PacksRouter.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\npragma solidity 0.8.17;\n\nimport \"./IWeb3PacksDefs.sol\";\n\ninterface IWeb3PacksRouter is IWeb3PacksDefs {\n  event EthTransferred(address indexed receiver, uint256 amount);\n  event SwappedTokens(address indexed token0, address indexed token1, uint256 amount0, uint256 amount1);\n\n  function getToken0() external returns (IWeb3PacksDefs.Token calldata token0);\n  function getToken1() external returns (IWeb3PacksDefs.Token calldata token1);\n\n  function getTokenPath(bool reverse) external returns (IWeb3PacksDefs.Route[] memory tokenPath);\n  function getOrderedAssets(bool reverse) external returns (address[] memory assets, uint256[] memory amounts);\n  function getLiquidityAmounts() external returns (uint256 amount0, uint256 amount1, uint256 minAmount0, uint256 minAmount1);\n  function getLiquidityPosition(uint256 tokenId) external returns (IWeb3PacksDefs.LiquidityPosition memory lp);\n\n  function getBalanceToken0() external returns (uint256 balanceToken0);\n  function getBalanceToken1() external returns (uint256 balanceToken1);\n  function getBalanceWeth() external returns (uint256 balanceWeth);\n\n  function swapSingle(uint256 percentOfAmount, bool reverse)\n    external\n    returns (uint256 amountOut);\n\n  function swapCustom(uint256 percentOfAmount, address token0, address token1)\n    external\n    returns (uint256 amountOut);\n\n  function createLiquidityPosition(bool stable)\n    external\n    returns (\n      uint256 lpTokenId,\n      uint256 liquidity,\n      uint256 amount0,\n      uint256 amount1\n    );\n\n  function collectLpFees(IWeb3PacksDefs.LiquidityPosition calldata liquidityPosition)\n    external\n    returns (uint256 amount0, uint256 amount1);\n\n  function removeLiquidityPosition(IWeb3PacksDefs.LiquidityPosition calldata liquidityPosition)\n    external\n    returns (uint amount0, uint amount1);\n}\n"
    },
    "contracts/interfaces/IWeb3PacksState.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// IWeb3PacksState.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\npragma solidity 0.8.17;\n\ninterface IWeb3PacksState {\n  function getBundlerById(bytes32 bundlerId) external view returns (address bundler);\n  function setPackPriceByPackId(uint256 tokenId, uint256 packPrice) external;\n  function getPackPriceByPackId(uint256 tokenId) external view returns (uint256 packPrice);\n  function setBundlesByPackId(uint256 tokenId, bytes32[] memory bundles) external;\n  function getBundlesByPackId(uint256 tokenId) external view returns (bytes32[] memory bundles);\n  function addToReferrerBalance(address referrer, uint256 amount) external;\n  function getReferrerBalance(address referrer) external view returns (uint256 balance);\n  function claimReferralRewards(address payable account) external;\n\n  function setWeb3Packs(address web3packs) external;\n  function registerBundlerId(bytes32 bundlerId, address bundlerAddress) external;\n}\n"
    },
    "contracts/interfaces/mode/IAlgebraQuoter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Quoter Interface\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\n/// Credit to Uniswap Labs under GPL-2.0-or-later license:\n/// https://github.com/Uniswap/v3-periphery\ninterface IAlgebraQuoter {\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair\n    /// @param amountIn The amount of the first token to swap\n    /// @return amountOut The amount of the last token that would be received\n    function quoteExactInput(bytes memory path, uint256 amountIn)\n        external\n        returns (uint256 amountOut, uint16[] memory fees);\n\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\n    /// @param tokenIn The token being swapped in\n    /// @param tokenOut The token being swapped out\n    /// @param amountIn The desired input amount\n    /// @param limitSqrtPrice The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountOut The amount of `tokenOut` that would be received\n    function quoteExactInputSingle(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        uint160 limitSqrtPrice\n    ) external returns (uint256 amountOut, uint16 fee);\n\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair. Path must be provided in reverse order\n    /// @param amountOut The amount of the last token to receive\n    /// @return amountIn The amount of first token required to be paid\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\n        external\n        returns (uint256 amountIn, uint16[] memory fees);\n\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\n    /// @param tokenIn The token being swapped in\n    /// @param tokenOut The token being swapped out\n    /// @param amountOut The desired output amount\n    /// @param limitSqrtPrice The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\n    function quoteExactOutputSingle(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountOut,\n        uint160 limitSqrtPrice\n    ) external returns (uint256 amountIn, uint16 fee);\n}\n"
    },
    "contracts/interfaces/mode/IAlgebraRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport './IAlgebraSwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Algebra\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\n/// https://github.com/Uniswap/v3-periphery\ninterface IAlgebraRouter is IAlgebraSwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 limitSqrtPrice;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 limitSqrtPrice;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @dev If native token is used as input, this function should be accompanied by a `refundNativeToken` in multicall to avoid potential loss of native tokens\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @dev If native token is used as input, this function should be accompanied by a `refundNativeToken` in multicall to avoid potential loss of native tokens\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @dev Unlike standard swaps, handles transferring from user before the actual swap.\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingleSupportingFeeOnTransferTokens(\n        ExactInputSingleParams calldata params\n    ) external payable returns (uint256 amountOut);\n}\n"
    },
    "contracts/interfaces/mode/IAlgebraSwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IAlgebraPoolActions#swap\n/// @notice Any contract that calls IAlgebraPoolActions#swap must implement this interface\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\ninterface IAlgebraSwapCallback {\n  /// @notice Called to `msg.sender` after executing a swap via IAlgebraPool#swap.\n  /// @dev In the implementation you must pay the pool tokens owed for the swap.\n  /// The caller of this method _must_ be checked to be a AlgebraPool deployed by the canonical AlgebraFactory.\n  /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n  /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n  /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n  /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n  /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n  /// @param data Any data passed through by the caller via the IAlgebraPoolActions#swap call\n  function algebraSwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external;\n}\n"
    },
    "contracts/interfaces/mode/IBalancerQueries.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.7.0;\npragma abicoder v2;\n\nimport \"./IBalancerV2Vault.sol\";\n\n/**\n * @dev Provides a way to perform queries on swaps, joins and exits, simulating these operations and returning the exact\n * result they would have if called on the Vault given the current state. Note that the results will be affected by\n * other transactions interacting with the Pools involved.\n *\n * All query functions can be called both on-chain and off-chain.\n *\n * If calling them from a contract, note that all query functions are not `view`. Despite this, these functions produce\n * no net state change, and for all intents and purposes can be thought of as if they were indeed `view`. However,\n * calling them via STATICCALL will fail.\n *\n * If calling them from an off-chain client, make sure to use eth_call: most clients default to eth_sendTransaction for\n * non-view functions.\n *\n * In all cases, the `fromInternalBalance` and `toInternalBalance` fields are entirely ignored: we just use the same\n * structs for simplicity.\n */\ninterface IBalancerQueries {\n    function querySwap(IBalancerV2Vault.SingleSwap memory singleSwap, IBalancerV2Vault.FundManagement memory funds)\n        external\n        returns (uint256);\n\n    function queryBatchSwap(\n        IBalancerV2Vault.SwapKind kind,\n        IBalancerV2Vault.BatchSwapStep[] memory swaps,\n        IAsset[] memory assets,\n        IBalancerV2Vault.FundManagement memory funds\n    ) external returns (int256[] memory assetDeltas);\n\n    function queryJoin(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        IBalancerV2Vault.JoinPoolRequest memory request\n    ) external returns (uint256 bptOut, uint256[] memory amountsIn);\n\n    function queryExit(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        IBalancerV2Vault.ExitPoolRequest memory request\n    ) external returns (uint256 bptIn, uint256[] memory amountsOut);\n}\n"
    },
    "contracts/interfaces/mode/IBalancerV2Vault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IAsset {\n    // solhint-disable-previous-line no-empty-blocks\n}\n\ninterface IBalancerV2Vault {\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\n\n    /**\n     * @dev Returns a Pool's contract address and specialization setting.\n     */\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\n\n    // Swaps\n    //\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\n    //\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\n    // individual swaps.\n    //\n    // There are two swap kinds:\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\n    //\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\n    // the final intended token.\n    //\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\n    // much less gas than they would otherwise.\n    //\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\n    // updating the Pool's internal accounting).\n    //\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\n    //\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\n    //\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\n    //\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\n\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\n\n    /**\n     * @dev Performs a swap with a single Pool.\n     *\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\n     * taken from the Pool, which must be greater than or equal to `limit`.\n     *\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\n     * sent to the Pool, which must be less than or equal to `limit`.\n     *\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\n     *\n     * Emits a `Swap` event.\n     */\n    function swap(\n        SingleSwap memory singleSwap,\n        FundManagement memory funds,\n        uint256 limit,\n        uint256 deadline\n    ) external payable returns (uint256);\n\n    /**\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\n     * the `kind` value.\n     *\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\n     *\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\n     * used to extend swap behavior.\n     */\n    struct SingleSwap {\n        bytes32 poolId;\n        SwapKind kind;\n        IAsset assetIn;\n        IAsset assetOut;\n        uint256 amount;\n        bytes userData;\n    }\n\n\n    /**\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\n     * Pool shares.\n     *\n     * If the caller is not `sender`, it must be an authorized relayer for them.\n     *\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\n     * these maximums.\n     *\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\n     * back to the caller (not the sender, which is important for relayers).\n     *\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\n     *\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\n     *\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\n     * directly to the Pool's contract, as is `recipient`.\n     *\n     * Emits a `PoolBalanceChanged` event.\n     */\n    function joinPool(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        JoinPoolRequest memory request\n    ) external payable;\n\n    struct JoinPoolRequest {\n        IAsset[] assets;\n        uint256[] maxAmountsIn;\n        bytes userData;\n        bool fromInternalBalance;\n    }\n\n    enum JoinKind {\n        INIT,\n        EXACT_TOKENS_IN_FOR_BPT_OUT,\n        TOKEN_IN_FOR_EXACT_BPT_OUT,\n        ALL_TOKENS_IN_FOR_EXACT_BPT_OUT\n    }\n\n    /**\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\n     * `getPoolTokenInfo`).\n     *\n     * If the caller is not `sender`, it must be an authorized relayer for them.\n     *\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\n     * it just enforces these minimums.\n     *\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\n     *\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\n     *\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\n     * do so will trigger a revert.\n     *\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\n     * `tokens` array. This array must match the Pool's registered tokens.\n     *\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\n     * passed directly to the Pool's contract.\n     *\n     * Emits a `PoolBalanceChanged` event.\n     */\n    function exitPool(\n        bytes32 poolId,\n        address sender,\n        address payable recipient,\n        ExitPoolRequest memory request\n    ) external;\n\n    struct ExitPoolRequest {\n        IAsset[] assets;\n        uint256[] minAmountsOut;\n        bytes userData;\n        bool toInternalBalance;\n    }\n\n    enum ExitKind {\n        EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\n        EXACT_BPT_IN_FOR_TOKENS_OUT,\n        BPT_IN_FOR_EXACT_TOKENS_OUT,\n        MANAGEMENT_FEE_TOKENS_OUT // for InvestmentPool\n    }\n\n    /**\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\n     * `recipient` account.\n     *\n     * If the caller is not `sender`, it must be an authorized relayer for them.\n     *\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\n     * `joinPool`.\n     *\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\n     * transferred. This matches the behavior of `exitPool`.\n     *\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\n     * revert.\n     */\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n\n    /**\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\n     *\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\n     * from the previous swap, depending on the swap kind.\n     *\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\n     * used to extend swap behavior.\n     */\n    struct BatchSwapStep {\n        bytes32 poolId;\n        uint256 assetInIndex;\n        uint256 assetOutIndex;\n        uint256 amount;\n        bytes userData;\n    }\n\n    /**\n     * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\n     */\n    event Swap(\n        bytes32 indexed poolId,\n        IERC20 indexed tokenIn,\n        IERC20 indexed tokenOut,\n        uint256 amountIn,\n        uint256 amountOut\n    );\n\n    /**\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\n     *\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\n     * receives are the same that an equivalent `batchSwap` call would receive.\n     *\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\n     * approve them for the Vault, or even know a user's address.\n     *\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\n     * eth_call instead of eth_sendTransaction.\n     */\n    function queryBatchSwap(\n        SwapKind kind,\n        BatchSwapStep[] memory swaps,\n        IAsset[] memory assets,\n        FundManagement memory funds\n    ) external returns (int256[] memory assetDeltas);\n\n}\n"
    },
    "contracts/interfaces/mode/INonfungiblePositionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.17;\ninterface INonfungiblePositionManager {\n\n    /// @notice Returns the position information associated with a given token ID.\n    /// @dev Throws if the token ID is not valid.\n    /// @param tokenId The ID of the token that represents the position\n    /// @return nonce The nonce for permits\n    /// @return operator The address that is approved for spending\n    /// @return token0 The address of the token0 for a specific pool\n    /// @return token1 The address of the token1 for a specific pool\n    /// @return fee The fee associated with the pool\n    /// @return tickLower The lower end of the tick range for the position\n    /// @return tickUpper The higher end of the tick range for the position\n    /// @return liquidity The liquidity of the position\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\n    function positions(uint256 tokenId)\n        external\n        view\n        returns (\n            uint96 nonce,\n            address operator,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    struct MintParams {\n        address token0;\n        address token1;\n        // uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        address recipient;\n        uint256 deadline;\n    }\n\n    /// @notice Creates a new position wrapped in a NFT\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n    /// @return tokenId The ID of the token that represents the minted position\n    /// @return liquidity The amount of liquidity for this position\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function mint(MintParams calldata params)\n        external\n        payable\n        returns (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct IncreaseLiquidityParams {\n        uint256 tokenId;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\n    /// amount0Desired The desired amount of token0 to be spent,\n    /// amount1Desired The desired amount of token1 to be spent,\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return liquidity The new liquidity amount as a result of the increase\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct DecreaseLiquidityParams {\n        uint256 tokenId;\n        uint128 liquidity;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\n    /// amount The amount by which liquidity will be decreased,\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (uint256 amount0, uint256 amount1);\n\n    struct CollectParams {\n        uint256 tokenId;\n        address recipient;\n        uint128 amount0Max;\n        uint128 amount1Max;\n    }\n\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\n    /// recipient The account that should receive the tokens,\n    /// amount0Max The maximum amount of token0 to collect,\n    /// amount1Max The maximum amount of token1 to collect\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n    /// must be collected first.\n    /// @param tokenId The ID of the token that is being burned\n    function burn(uint256 tokenId) external payable;\n}\n"
    },
    "contracts/interfaces/mode/IPancakeFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IFeeSharing {\n    function assign(uint256 _tokenId) external returns (uint256);\n}\n\ninterface IProtocolToken {\n    function feeShareContract() external view returns (IFeeSharing);\n\n    function feeShareTokenId() external view returns (uint256);\n}\n\ninterface IPancakeFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\n\n    function protocolToken() external view returns (IProtocolToken);\n}\n"
    },
    "contracts/interfaces/mode/IPancakeRouter02.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IPancakeRouter01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n}\n\ninterface IPancakeRouter02 is IPancakeRouter01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n"
    },
    "contracts/interfaces/mode/IVelodrome.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IVelodrome {\n    struct Route {\n        address from;\n        address to;\n        bool stable;\n    }\n\n    error ETHTransferFailed();\n    error Expired();\n    error InsufficientAmount();\n    error InsufficientAmountA();\n    error InsufficientAmountB();\n    error InsufficientAmountADesired();\n    error InsufficientAmountBDesired();\n    error InsufficientLiquidity();\n    error InsufficientOutputAmount();\n    error InvalidPath();\n    error OnlyWETH();\n    error SameAddresses();\n    error ZeroAddress();\n\n    /// @notice Address of Velodrome v2 pool factory\n    function factory() external view returns (address);\n\n    /// @notice Address of Velodrome v2 pool implementation\n    function poolImplementation() external view returns (address);\n\n    /// @notice Sort two tokens by which address value is less than the other\n    /// @param tokenA   Address of token to sort\n    /// @param tokenB   Address of token to sort\n    /// @return token0  Lower address value between tokenA and tokenB\n    /// @return token1  Higher address value between tokenA and tokenB\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\n\n    /// @notice Calculate the address of a pool by its' factory.\n    /// @dev Returns a randomly generated address for a nonexistent pool\n    /// @param tokenA   Address of token to query\n    /// @param tokenB   Address of token to query\n    /// @param stable   True if pool is stable, false if volatile\n    function poolFor(address tokenA, address tokenB, bool stable) external view returns (address pool);\n\n    /// @notice Fetch and sort the reserves for a pool\n    /// @param tokenA       .\n    /// @param tokenB       .\n    /// @param stable       True if pool is stable, false if volatile\n    /// @return reserveA    Amount of reserves of the sorted token A\n    /// @return reserveB    Amount of reserves of the sorted token B\n    function getReserves(address tokenA, address tokenB, bool stable)\n        external\n        view\n        returns (uint256 reserveA, uint256 reserveB);\n\n    /// @notice Perform chained getAmountOut calculations on any number of pools\n    function getAmountsOut(uint256 amountIn, Route[] memory routes) external view returns (uint256[] memory amounts);\n\n    // **** ADD LIQUIDITY ****\n\n    /// @notice Quote the amount deposited into a Pool\n    /// @param tokenA           .\n    /// @param tokenB           .\n    /// @param stable           True if pool is stable, false if volatile\n    /// @param amountADesired   Amount of tokenA desired to deposit\n    /// @param amountBDesired   Amount of tokenB desired to deposit\n    /// @return amountA         Amount of tokenA to actually deposit\n    /// @return amountB         Amount of tokenB to actually deposit\n    /// @return liquidity       Amount of liquidity token returned from deposit\n    function quoteAddLiquidity(\n        address tokenA,\n        address tokenB,\n        bool stable,\n        uint256 amountADesired,\n        uint256 amountBDesired\n    ) external view returns (uint256 amountA, uint256 amountB, uint256 liquidity);\n\n    /// @notice Quote the amount of liquidity removed from a Pool\n    /// @param tokenA       .\n    /// @param tokenB       .\n    /// @param stable       True if pool is stable, false if volatile\n    /// @param liquidity    Amount of liquidity to remove\n    /// @return amountA     Amount of tokenA received\n    /// @return amountB     Amount of tokenB received\n    function quoteRemoveLiquidity(address tokenA, address tokenB, bool stable, uint256 liquidity)\n        external\n        view\n        returns (uint256 amountA, uint256 amountB);\n\n    /// @notice Add liquidity of two tokens to a Pool\n    /// @param tokenA           .\n    /// @param tokenB           .\n    /// @param stable           True if pool is stable, false if volatile\n    /// @param amountADesired   Amount of tokenA desired to deposit\n    /// @param amountBDesired   Amount of tokenB desired to deposit\n    /// @param amountAMin       Minimum amount of tokenA to deposit\n    /// @param amountBMin       Minimum amount of tokenB to deposit\n    /// @param to               Recipient of liquidity token\n    /// @param deadline         Deadline to receive liquidity\n    /// @return amountA         Amount of tokenA to actually deposit\n    /// @return amountB         Amount of tokenB to actually deposit\n    /// @return liquidity       Amount of liquidity token returned from deposit\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        bool stable,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\n\n    /// @notice Add liquidity of a token and WETH (transferred as ETH) to a Pool\n    /// @param token                .\n    /// @param stable               True if pool is stable, false if volatile\n    /// @param amountTokenDesired   Amount of token desired to deposit\n    /// @param amountTokenMin       Minimum amount of token to deposit\n    /// @param amountETHMin         Minimum amount of ETH to deposit\n    /// @param to                   Recipient of liquidity token\n    /// @param deadline             Deadline to add liquidity\n    /// @return amountToken         Amount of token to actually deposit\n    /// @return amountETH           Amount of tokenETH to actually deposit\n    /// @return liquidity           Amount of liquidity token returned from deposit\n    function addLiquidityETH(\n        address token,\n        bool stable,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n\n    // **** REMOVE LIQUIDITY ****\n\n    /// @notice Remove liquidity of two tokens from a Pool\n    /// @param tokenA       .\n    /// @param tokenB       .\n    /// @param stable       True if pool is stable, false if volatile\n    /// @param liquidity    Amount of liquidity to remove\n    /// @param amountAMin   Minimum amount of tokenA to receive\n    /// @param amountBMin   Minimum amount of tokenB to receive\n    /// @param to           Recipient of tokens received\n    /// @param deadline     Deadline to remove liquidity\n    /// @return amountA     Amount of tokenA received\n    /// @return amountB     Amount of tokenB received\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        bool stable,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    /// @notice Remove liquidity of a token and WETH (returned as ETH) from a Pool\n    /// @param token            .\n    /// @param stable           True if pool is stable, false if volatile\n    /// @param liquidity        Amount of liquidity to remove\n    /// @param amountTokenMin   Minimum amount of token to receive\n    /// @param amountETHMin     Minimum amount of ETH to receive\n    /// @param to               Recipient of liquidity token\n    /// @param deadline         Deadline to receive liquidity\n    /// @return amountToken     Amount of token received\n    /// @return amountETH       Amount of ETH received\n    function removeLiquidityETH(\n        address token,\n        bool stable,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    /// @notice Remove liquidity of a fee-on-transfer token and WETH (returned as ETH) from a Pool\n    /// @param token            .\n    /// @param stable           True if pool is stable, false if volatile\n    /// @param liquidity        Amount of liquidity to remove\n    /// @param amountTokenMin   Minimum amount of token to receive\n    /// @param amountETHMin     Minimum amount of ETH to receive\n    /// @param to               Recipient of liquidity token\n    /// @param deadline         Deadline to receive liquidity\n    /// @return amountETH       Amount of ETH received\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        bool stable,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    /// @notice Swap one token for another\n    /// @param amountIn     Amount of token in\n    /// @param amountOutMin Minimum amount of desired token received\n    /// @param routes       Array of trade routes used in the swap\n    /// @param to           Recipient of the tokens received\n    /// @param deadline     Deadline to receive tokens\n    /// @return amounts     Array of amounts returned per route\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        Route[] calldata routes,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    /// @notice Swap ETH for a token\n    /// @param amountOutMin Minimum amount of desired token received\n    /// @param routes       Array of trade routes used in the swap\n    /// @param to           Recipient of the tokens received\n    /// @param deadline     Deadline to receive tokens\n    /// @return amounts     Array of amounts returned per route\n    function swapExactETHForTokens(uint256 amountOutMin, Route[] calldata routes, address to, uint256 deadline)\n        external\n        payable\n        returns (uint256[] memory amounts);\n\n    /// @notice Swap a token for WETH (returned as ETH)\n    /// @param amountIn     Amount of token in\n    /// @param amountOutMin Minimum amount of desired ETH\n    /// @param routes       Array of trade routes used in the swap\n    /// @param to           Recipient of the tokens received\n    /// @param deadline     Deadline to receive tokens\n    /// @return amounts     Array of amounts returned per route\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        Route[] calldata routes,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n}\n"
    },
    "contracts/interfaces/mode/IVelodromeUniversalRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\nimport {IERC721Receiver} from '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\nimport {IERC1155Receiver} from '@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol';\n\ninterface IRewardsCollector {\n    /// @notice Fetches users' LooksRare rewards and sends them to the distributor contract\n    /// @param looksRareClaim The data required by LooksRare to claim reward tokens\n    function collectRewards(bytes calldata looksRareClaim) external;\n}\n\ninterface IUniversalRouter is IRewardsCollector, IERC721Receiver, IERC1155Receiver {\n    /// @notice Thrown when a required command has failed\n    error ExecutionFailed(uint256 commandIndex, bytes message);\n\n    /// @notice Thrown when attempting to send ETH directly to the contract\n    error ETHNotAccepted();\n\n    /// @notice Thrown when executing commands with an expired deadline\n    error TransactionDeadlinePassed();\n\n    /// @notice Thrown when attempting to execute commands and an incorrect number of inputs are provided\n    error LengthMismatch();\n\n    /// @notice Executes encoded commands along with provided inputs. Reverts if deadline has expired.\n    /// @param commands A set of concatenated commands, each 1 byte in length\n    /// @param inputs An array of byte strings containing abi encoded inputs for each command\n    /// @param deadline The deadline by which the transaction must be executed\n    function execute(bytes calldata commands, bytes[] calldata inputs, uint256 deadline) external payable;\n}\n"
    },
    "contracts/interfaces/mode/IVelodromeV1Quoter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title MixedRouteQuoterV1 Interface\n/// @notice Supports quoting the calculated amounts for exact input swaps. Is specialized for routes containing a mix of V2 and V3 liquidity.\n/// @notice For each pool also tells you the number of initialized ticks crossed and the sqrt price of the pool after the swap.\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\ninterface IVelodromeV1Quoter {\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\n    /// @param amountIn The amount of the first token to swap\n    /// @return amountOut The amount of the last token that would be received\n    /// @return v3SqrtPriceX96AfterList List of the sqrt price after the swap for each v3 pool in the path, 0 for v2 pools\n    /// @return v3InitializedTicksCrossedList List of the initialized ticks that the swap crossed for each v3 pool in the path, 0 for v2 pools\n    /// @return v3SwapGasEstimate The estimate of the gas that the v3 swaps in the path consume\n    function quoteExactInput(bytes memory path, uint256 amountIn)\n        external\n        returns (\n            uint256 amountOut,\n            uint160[] memory v3SqrtPriceX96AfterList,\n            uint32[] memory v3InitializedTicksCrossedList,\n            uint256 v3SwapGasEstimate\n        );\n\n    struct QuoteExactInputSingleV3Params {\n        address tokenIn;\n        address tokenOut;\n        uint256 amountIn;\n        int24 tickSpacing;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    struct QuoteExactInputSingleV2Params {\n        address tokenIn;\n        address tokenOut;\n        bool stable;\n        uint256 amountIn;\n    }\n\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\n    /// @param params The params for the quote, encoded as `QuoteExactInputSingleParams`\n    /// tokenIn The token being swapped in\n    /// tokenOut The token being swapped out\n    /// tickSpacing The tickSpacing of the token pool to consider for the pair\n    /// amountIn The desired input amount\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountOut The amount of `tokenOut` that would be received\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\n    /// @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactInputSingleV3(QuoteExactInputSingleV3Params memory params)\n        external\n        returns (uint256 amountOut, uint160 sqrtPriceX96After, uint32 initializedTicksCrossed, uint256 gasEstimate);\n\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single V2 pool\n    /// @param params The params for the quote, encoded as `QuoteExactInputSingleV2Params`\n    /// tokenIn The token being swapped in\n    /// tokenOut The token being swapped out\n    /// stable The boolean representing volatile (false) or stable (true)\n    /// amountIn The desired input amount\n    /// @return amountOut The amount of `tokenOut` that would be received\n    function quoteExactInputSingleV2(QuoteExactInputSingleV2Params memory params)\n        external\n        returns (uint256 amountOut);\n\n    /// @dev ExactOutput swaps are not supported by this new Quoter which is specialized for supporting routes\n    ///      crossing both V2 liquidity pairs and V3 pools.\n    /// @deprecated quoteExactOutputSingle and exactOutput. Use QuoterV2 instead.\n}\n"
    },
    "contracts/lib/BlackholePrevention.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// BlackholePrevention.sol -- Part of the Charged Particles Protocol\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\n\n/**\n * @notice Prevents ETH or Tokens from getting stuck in a contract by allowing\n *  the Owner/DAO to pull them out on behalf of a user\n * This is only meant to contracts that are not expected to hold tokens, but do handle transferring them.\n */\ncontract BlackholePrevention {\n    using Address for address payable;\n    using SafeERC20 for IERC20;\n\n    event WithdrawStuckEther(address indexed receiver, uint256 amount);\n    event WithdrawStuckERC20(\n        address indexed receiver,\n        address indexed tokenAddress,\n        uint256 amount\n    );\n    event WithdrawStuckERC721(\n        address indexed receiver,\n        address indexed tokenAddress,\n        uint256 indexed tokenId\n    );\n    event WithdrawStuckERC1155(\n        address indexed receiver,\n        address indexed tokenAddress,\n        uint256 indexed tokenId,\n        uint256 amount\n    );\n\n    function _withdrawEther(address payable receiver, uint256 amount)\n        internal\n        virtual\n    {\n        require(receiver != address(0x0), \"BHP:E-403\");\n        if (address(this).balance >= amount) {\n            receiver.sendValue(amount);\n            emit WithdrawStuckEther(receiver, amount);\n        }\n    }\n\n    function _withdrawERC20(\n        address payable receiver,\n        address tokenAddress,\n        uint256 amount\n    ) internal virtual {\n        require(receiver != address(0x0), \"BHP:E-403\");\n        if (IERC20(tokenAddress).balanceOf(address(this)) >= amount) {\n            IERC20(tokenAddress).safeTransfer(receiver, amount);\n            emit WithdrawStuckERC20(receiver, tokenAddress, amount);\n        }\n    }\n\n    function _withdrawERC721(\n        address payable receiver,\n        address tokenAddress,\n        uint256 tokenId\n    ) internal virtual {\n        require(receiver != address(0x0), \"BHP:E-403\");\n        if (IERC721(tokenAddress).ownerOf(tokenId) == address(this)) {\n            IERC721(tokenAddress).transferFrom(\n                address(this),\n                receiver,\n                tokenId\n            );\n            emit WithdrawStuckERC721(receiver, tokenAddress, tokenId);\n        }\n    }\n\n    function _withdrawERC1155(\n        address payable receiver,\n        address tokenAddress,\n        uint256 tokenId,\n        uint256 amount\n    ) internal virtual {\n        require(receiver != address(0x0), \"BHP:E-403\");\n        if (\n            IERC1155(tokenAddress).balanceOf(address(this), tokenId) >= amount\n        ) {\n            IERC1155(tokenAddress).safeTransferFrom(\n                address(this),\n                receiver,\n                tokenId,\n                amount,\n                \"\"\n            );\n            emit WithdrawStuckERC1155(receiver, tokenAddress, tokenId, amount);\n        }\n    }\n}\n"
    },
    "contracts/lib/bsc/bundlers/SSBscWethBusd.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// SSBscWethBusd.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/PancakeUniversalRouter.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\n\n/*\n  Performs a Single-Sided Swap using the Pancake Universal Router\n  Token 0 = WETH (WBNB)\n  Token 1 = BUSD\n */\ncontract SSBscWethBusd is IWeb3PacksBundler, PancakeUniversalRouter {\n  address public _busd;\n\n  // Inherit from the Algebra Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config, address busd) PancakeUniversalRouter(config) {\n    _busd = busd;\n  }\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 1 = BUSD on BSC\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 18,\n      tokenSymbol: \"BUSD\"\n    });\n    return token;\n  }\n\n  function getTokenPath(bool reverse) public override view returns (IWeb3PacksDefs.Route[] memory tokenPath) {\n    IWeb3PacksDefs.Route[] memory tokens = new IWeb3PacksDefs.Route[](2);\n    if (reverse) {\n      tokens[0] = IWeb3PacksDefs.Route({token0: getToken1().tokenAddress, token1: _busd, stable: false});\n      tokens[1] = IWeb3PacksDefs.Route({token0: _busd, token1: getToken0().tokenAddress, stable: false});\n    } else {\n      tokens[0] = IWeb3PacksDefs.Route({token0: getToken0().tokenAddress, token1: _busd, stable: false});\n      tokens[1] = IWeb3PacksDefs.Route({token0: _busd, token1: getToken1().tokenAddress, stable: false});\n    }\n    return tokens;\n  }\n\n  /// @dev This can be overridden to specify custom liquidity tokens\n  function getLiquidityToken(uint256) public virtual view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = getToken1().tokenAddress;\n    tokenId = 0;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    amountOut = swapSingle(10000, false); // 100% token0 -> token1\n\n    // Transfer back to Manager\n    tokenAddress = getToken1().tokenAddress;\n    nftTokenId = 0;\n    TransferHelper.safeTransfer(tokenAddress, _manager, amountOut);\n\n    // Refund Unused Amounts\n    refundUnusedTokens(sender);\n    emit BundledTokenSS(tokenAddress, amountOut);\n  }\n\n  function unbundle(address payable receiver, uint256, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    if (sellAll) {\n      // Perform Swap\n      swapSingle(10000, true); // 100% token1 -> token0\n\n      // Send ETH to Receiver\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Send Token to Receiver\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n  }\n}\n"
    },
    "contracts/lib/bsc/routers/lib/PancakeUniversalCommands.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\n/// @title Commands\n/// @notice Command Flags used to decode commands\nlibrary Commands {\n    // Masks to extract certain bits of commands\n    bytes1 internal constant FLAG_ALLOW_REVERT = 0x80;\n    bytes1 internal constant COMMAND_TYPE_MASK = 0x3f;\n\n    // Command Types. Maximum supported command at this moment is 0x3f.\n\n    // Command Types where value<0x08, executed in the first nested-if block\n    uint256 constant V3_SWAP_EXACT_IN = 0x00;\n    uint256 constant V3_SWAP_EXACT_OUT = 0x01;\n    uint256 constant PERMIT2_TRANSFER_FROM = 0x02;\n    uint256 constant PERMIT2_PERMIT_BATCH = 0x03;\n    uint256 constant SWEEP = 0x04;\n    uint256 constant TRANSFER = 0x05;\n    uint256 constant PAY_PORTION = 0x06;\n    // COMMAND_PLACEHOLDER = 0x07;\n\n    // The commands are executed in nested if blocks to minimise gas consumption\n    // The following constant defines one of the boundaries where the if blocks split commands\n    uint256 constant FIRST_IF_BOUNDARY = 0x08;\n\n    // Command Types where 0x08<=value<0x10, executed in the second nested-if block\n    uint256 constant V2_SWAP_EXACT_IN = 0x08;\n    uint256 constant V2_SWAP_EXACT_OUT = 0x09;\n    uint256 constant PERMIT2_PERMIT = 0x0a;\n    uint256 constant WRAP_ETH = 0x0b;\n    uint256 constant UNWRAP_WETH = 0x0c;\n    uint256 constant PERMIT2_TRANSFER_FROM_BATCH = 0x0d;\n    uint256 constant BALANCE_CHECK_ERC20 = 0x0e;\n    // COMMAND_PLACEHOLDER = 0x0f;\n\n    // The commands are executed in nested if blocks to minimise gas consumption\n    // The following constant defines one of the boundaries where the if blocks split commands\n    uint256 constant SECOND_IF_BOUNDARY = 0x10;\n\n    // Command Types where 0x10<=value<0x18, executed in the third nested-if block\n    uint256 constant OWNER_CHECK_721 = 0x10;\n    uint256 constant OWNER_CHECK_1155 = 0x11;\n    uint256 constant SWEEP_ERC721 = 0x12;\n    uint256 constant SWEEP_ERC1155 = 0x13;\n    // COMMAND_PLACEHOLDER for 0x14-0x17 (all unused)\n\n    // The commands are executed in nested if blocks to minimise gas consumption\n    // The following constant defines one of the boundaries where the if blocks split commands\n    uint256 constant THIRD_IF_BOUNDARY = 0x18;\n\n    // Command Types where 0x18<=value<=0x1f, executed in the final nested-if block\n    uint256 constant SEAPORT_V1_5 = 0x18;\n    uint256 constant SEAPORT_V1_4 = 0x19;\n    uint256 constant LOOKS_RARE_V2 = 0x1a;\n    uint256 constant X2Y2_721 = 0x1b;\n    uint256 constant X2Y2_1155 = 0x1c;\n    // COMMAND_PLACEHOLDER for 0x1d-0x1f (all unused)\n\n    // The commands are executed in nested if blocks to minimise gas consumption\n    // The following constant defines one of the boundaries where the if blocks split commands\n    uint256 constant FOURTH_IF_BOUNDARY = 0x20;\n\n    // Command Types where 0x20<=value\n    uint256 constant EXECUTE_SUB_PLAN = 0x20;\n    uint256 constant APPROVE_ERC20 = 0x21;\n    uint256 constant STABLE_SWAP_EXACT_IN = 0x22;\n    uint256 constant STABLE_SWAP_EXACT_OUT = 0x23;\n    uint256 constant PANCAKE_NFT_BNB = 0x24;\n    uint256 constant PANCAKE_NFT_WBNB = 0x25;\n    // COMMAND_PLACEHOLDER for 0x26-0x3f (all unused)\n}\n"
    },
    "contracts/lib/bsc/routers/lib/PancakeUniversalConstants.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\n/// @title Constant state\n/// @notice Constant state used by the Universal Router\nlibrary Constants {\n    /// @dev Used for identifying cases when this contract's balance of a token is to be used as an input\n    /// This value is equivalent to 1<<255, i.e. a singular 1 in the most significant bit.\n    uint256 internal constant CONTRACT_BALANCE = 0x8000000000000000000000000000000000000000000000000000000000000000;\n\n    /// @dev Used for identifying cases when a v2 pair has already received input tokens\n    uint256 internal constant ALREADY_PAID = 0;\n\n    /// @dev Used as a flag for identifying the transfer of ETH instead of a token\n    address internal constant ETH = address(0);\n\n    /// @dev Used as a flag for identifying that msg.sender should be used, saves gas by sending more 0 bytes\n    address internal constant MSG_SENDER = address(1);\n\n    /// @dev Used as a flag for identifying address(this) should be used, saves gas by sending more 0 bytes\n    address internal constant ADDRESS_THIS = address(2);\n\n    /// @dev The length of the bytes encoded address\n    uint256 internal constant ADDR_SIZE = 20;\n\n    /// @dev The length of the bytes encoded fee\n    uint256 internal constant V3_FEE_SIZE = 3;\n\n    /// @dev The offset of a single token address (20) and pool fee (3)\n    uint256 internal constant NEXT_V3_POOL_OFFSET = ADDR_SIZE + V3_FEE_SIZE;\n\n    /// @dev The offset of an encoded pool key\n    /// Token (20) + Fee (3) + Token (20) = 43\n    uint256 internal constant V3_POP_OFFSET = NEXT_V3_POOL_OFFSET + ADDR_SIZE;\n\n    /// @dev The minimum length of an encoding that contains 2 or more pools\n    uint256 internal constant MULTIPLE_V3_POOLS_MIN_LENGTH = V3_POP_OFFSET + NEXT_V3_POOL_OFFSET;\n}\n"
    },
    "contracts/lib/bsc/routers/PancakeUniversalRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// PancakeUniversalRouter.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../../Web3PacksRouterBase.sol\";\nimport \"../../../interfaces/IWeb3PacksDefs.sol\";\nimport {IUniversalRouter} from \"../../../interfaces/bsc/IPancakeUniversalRouter.sol\";\nimport {Commands} from \"./lib/PancakeUniversalCommands.sol\";\nimport {Constants} from \"./lib/PancakeUniversalConstants.sol\";\n\n// REF: https://developer.pancakeswap.finance/contracts/universal-router/addresses\n\n// Pancake Universal Router\nabstract contract PancakeUniversalRouter is Web3PacksRouterBase {\n  struct PRoute {\n    address from;\n    address to;\n    bool stable;\n  }\n\n  // Pass constructor data\n  constructor(IWeb3PacksDefs.RouterConfig memory config) Web3PacksRouterBase(config) {}\n\n  function swapSingle(uint256 percentOfAmount, bool reverse)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amountOut)\n  {\n    IWeb3PacksDefs.Token memory token0 = reverse ? getToken1() : getToken0();\n    IWeb3PacksDefs.Token memory token1 = reverse ? getToken0() : getToken1();\n    IWeb3PacksDefs.Route[] memory tokens = getTokenPath(reverse);\n    PRoute[] memory routes = new PRoute[](tokens.length);\n    for (uint i; i < tokens.length; i++) {\n      routes[i] = PRoute({from: tokens[i].token0, to: tokens[i].token1, stable: tokens[i].stable});\n    }\n    amountOut = _performSwapV2(percentOfAmount, token0.tokenAddress, token1.tokenAddress, routes);\n  }\n\n  function swapCustom(uint256 percentOfAmount, address token0, address token1)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amountOut)\n  {\n    PRoute[] memory routes = new PRoute[](1);\n    routes[0] = PRoute({from: token0, to: token1, stable: false});\n    amountOut = _performSwapV2(percentOfAmount, token0, token1, routes);\n  }\n\n  function createLiquidityPosition(bool)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (\n      uint256 lpTokenId,\n      uint256 liquidity,\n      uint256 amount0,\n      uint256 amount1\n    )\n  {\n    lpTokenId = 0;\n    liquidity = 0;\n    amount0 = 0;\n    amount1 = 0;\n  }\n\n  function collectLpFees(IWeb3PacksDefs.LiquidityPosition memory)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amount0, uint256 amount1)\n  {\n    amount0 = 0;\n    amount1 = 0;\n  }\n\n  function removeLiquidityPosition(IWeb3PacksDefs.LiquidityPosition memory)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint amount0, uint amount1)\n  {\n    amount0 = 0;\n    amount1 = 0;\n  }\n\n\n  function _performSwapV2(uint256 percentOfAmount, address token0, address token1, PRoute[] memory routes)\n    internal\n    returns (uint256 amountOut)\n  {\n    uint256 balance = IERC20(token0).balanceOf(address(this));\n    uint256 swapAmount = (balance * percentOfAmount) / 10000;\n\n    if (swapAmount > 0) {\n      TransferHelper.safeApprove(token0, _swapRouter, swapAmount);\n      bytes memory commands = abi.encodePacked(bytes1(uint8(Commands.V2_SWAP_EXACT_IN)));\n      bytes[] memory inputs = new bytes[](1);\n      inputs[0] = abi.encode(Constants.MSG_SENDER, swapAmount, 0, routes, true);\n      IUniversalRouter(_swapRouter).execute(commands, inputs, block.timestamp);\n      amountOut = IERC20(token1).balanceOf(address(this));\n      if (amountOut == 0) { revert SwapFailed(); }\n      emit SwappedTokens(token0, token1, swapAmount, amountOut);\n    }\n  }\n\n  function _performSwapV3(uint256 percentOfAmount, address token0, address token1, bytes memory path)\n    internal\n    returns (uint256 amountOut)\n  {\n    uint256 balance = IERC20(token0).balanceOf(address(this));\n    uint256 swapAmount = (balance * percentOfAmount) / 10000;\n\n    if (swapAmount > 0) {\n      TransferHelper.safeApprove(token0, _swapRouter, swapAmount);\n      bytes memory commands = abi.encodePacked(bytes1(uint8(Commands.V3_SWAP_EXACT_IN)));\n      bytes[] memory inputs = new bytes[](1);\n      inputs[0] = abi.encode(Constants.MSG_SENDER, swapAmount, 0, path, true);\n      IUniversalRouter(_swapRouter).execute(commands, inputs, block.timestamp);\n      amountOut = IERC20(token1).balanceOf(address(this));\n      if (amountOut == 0) { revert SwapFailed(); }\n      emit SwappedTokens(token0, token1, swapAmount, amountOut);\n    }\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/LPIusdUsdc.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// LPIusdUsdc.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/AlgebraRouter.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\n\n/*\n  Creates a Liquidity Position on Kim Exchange using the Algebra Router\n  Token 0 = iUSD 50%\n  Token 1 = USDC 50%\n */\ncontract LPIusdUsdc is IWeb3PacksBundler, AlgebraRouter {\n  // Inherit from the Algebra Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config) AlgebraRouter(config) {}\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 0 = iUSD on Mode (Kim Exchange)\n  function getToken0() public view override returns (IWeb3PacksDefs.Token memory token0) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token0,\n      tokenDecimals: 18,\n      tokenSymbol: \"iUSD\"\n    });\n    return token;\n  }\n\n  // Token 1 = USDC on Mode (Kim Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 6,\n      tokenSymbol: \"USDC\"\n    });\n    return token;\n  }\n\n  function getLiquidityToken(uint256 packTokenId) public override view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = _liquidityRouter;\n    tokenId = _liquidityPositionsByTokenId[packTokenId].lpTokenId;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256 packTokenId, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swaps\n    swapCustom(5000, _weth, getToken0().tokenAddress); // 50% WETH -> token0\n    swapCustom(10000, _weth, getToken1().tokenAddress); // Remaining WETH -> token1\n\n    // Deposit Liquidity\n    (uint256 amount0, uint256 amount1, , ) = getLiquidityAmounts();\n    (uint256 lpTokenId, uint256 liquidity, , ) = createLiquidityPosition(false);\n    nftTokenId = lpTokenId;\n    amountOut = liquidity;\n    tokenAddress = _liquidityRouter;\n\n    // Transfer back to Manager\n    IERC721(tokenAddress).safeTransferFrom(address(this), _manager, nftTokenId);\n\n    // Track Liquidity Position by Pack Token ID\n    _liquidityPositionsByTokenId[packTokenId] = IWeb3PacksDefs.LiquidityPosition({\n      lpTokenId: lpTokenId,\n      liquidity: liquidity,\n      stable: false\n    });\n\n    // Refund Unused Amounts\n    (uint256 unusedAmount0, uint256 unusedAmount1) = refundUnusedTokens(sender);\n    emit BundledTokenLP(\n      getToken0().tokenAddress,\n      getToken1().tokenAddress,\n      amount0 - unusedAmount0,\n      amount1 - unusedAmount1,\n      liquidity\n    );\n  }\n\n  function unbundle(address payable receiver, uint256 packTokenId, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    // Remove Liquidity\n    IWeb3PacksDefs.LiquidityPosition memory liquidityPosition = _liquidityPositionsByTokenId[packTokenId];\n    removeLiquidityPosition(liquidityPosition);\n    collectLpFees(liquidityPosition);\n\n    // Perform Swap\n    if (sellAll) {\n      // Swap Assets back to WETH\n      swapCustom(10000, getToken0().tokenAddress, _weth); // 100% token0 -> WETH\n      swapCustom(10000, getToken1().tokenAddress, _weth); // 100% token1 -> WETH\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Transfer Assets to Receiver\n      TransferHelper.safeTransfer(getToken0().tokenAddress, receiver, getBalanceToken0());\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n\n    // Clear Liquidity Position\n    delete _liquidityPositionsByTokenId[packTokenId];\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/LPWethIonx.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// LPWethIonx.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/AlgebraRouter.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\n\n/*\n  Creates a Liquidity Position on Kim Exchange using the Algebra Router\n  Token 0 = WETH 50%\n  Token 1 = IONX 50%\n */\ncontract LPWethIonx is IWeb3PacksBundler, AlgebraRouter {\n  // Inherit from the Algebra Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config) AlgebraRouter(config) {}\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 0 = WETH\n  // Token 1 = IONX on Mode (Kim Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 18,\n      tokenSymbol: \"IONX\"\n    });\n    return token;\n  }\n\n  function getLiquidityToken(uint256 packTokenId) public override view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = _liquidityRouter;\n    tokenId = _liquidityPositionsByTokenId[packTokenId].lpTokenId;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256 packTokenId, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    swapSingle(5000, false); // 50% token0 -> token1\n\n    // Deposit Liquidity\n    (uint256 amount0, uint256 amount1, , ) = getLiquidityAmounts();\n    (uint256 lpTokenId, uint256 liquidity, , ) = createLiquidityPosition(false);\n    nftTokenId = lpTokenId;\n    amountOut = liquidity;\n    tokenAddress = _liquidityRouter;\n\n    // Transfer back to Manager\n    IERC721(tokenAddress).safeTransferFrom(address(this), _manager, nftTokenId);\n\n    // Track Liquidity Position by Pack Token ID\n    _liquidityPositionsByTokenId[packTokenId] = IWeb3PacksDefs.LiquidityPosition({\n      lpTokenId: lpTokenId,\n      liquidity: liquidity,\n      stable: false\n    });\n\n    // Refund Unused Amounts\n    (uint256 unusedAmount0, uint256 unusedAmount1) = refundUnusedTokens(sender);\n    emit BundledTokenLP(\n      getToken0().tokenAddress,\n      getToken1().tokenAddress,\n      amount0 - unusedAmount0,\n      amount1 - unusedAmount1,\n      liquidity\n    );\n  }\n\n  function unbundle(address payable receiver, uint256 packTokenId, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    // Remove Liquidity\n    IWeb3PacksDefs.LiquidityPosition memory liquidityPosition = _liquidityPositionsByTokenId[packTokenId];\n    removeLiquidityPosition(liquidityPosition);\n    collectLpFees(liquidityPosition);\n\n    // Perform Swap\n    if (sellAll) {\n      // Swap Assets back to WETH\n      swapSingle(10000, true); // 100% token1 -> token0\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Transfer Assets to Receiver\n      TransferHelper.safeTransfer(getToken0().tokenAddress, receiver, getBalanceToken0());\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n\n    // Clear Liquidity Position\n    delete _liquidityPositionsByTokenId[packTokenId];\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/LPWethKim.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// LPWethKim.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/AlgebraRouter.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\n\n/*\n  Creates a Liquidity Position on Kim Exchange using the Algebra Router\n  Token 0 = WETH 50%\n  Token 1 = KIM 50%\n */\ncontract LPWethKim is IWeb3PacksBundler, AlgebraRouter {\n  // Inherit from the Algebra Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config) AlgebraRouter(config) {}\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 0 = WETH\n  // Token 1 = KIM on Mode (Kim Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 18,\n      tokenSymbol: \"KIM\"\n    });\n    return token;\n  }\n\n  function getLiquidityToken(uint256 packTokenId) public override view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = _liquidityRouter;\n    tokenId = _liquidityPositionsByTokenId[packTokenId].lpTokenId;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256 packTokenId, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    swapSingle(5000, false); // 50% token0 -> token1\n\n    // Deposit Liquidity\n    (uint256 amount0, uint256 amount1, , ) = getLiquidityAmounts();\n    (uint256 lpTokenId, uint256 liquidity, , ) = createLiquidityPosition(false);\n    nftTokenId = lpTokenId;\n    amountOut = liquidity;\n    tokenAddress = _liquidityRouter;\n\n    // Transfer back to Manager\n    IERC721(tokenAddress).safeTransferFrom(address(this), _manager, nftTokenId);\n\n    // Track Liquidity Position by Pack Token ID\n    _liquidityPositionsByTokenId[packTokenId] = IWeb3PacksDefs.LiquidityPosition({\n      lpTokenId: lpTokenId,\n      liquidity: liquidity,\n      stable: false\n    });\n\n    // Refund Unused Amounts\n    (uint256 unusedAmount0, uint256 unusedAmount1) = refundUnusedTokens(sender);\n    emit BundledTokenLP(\n      getToken0().tokenAddress,\n      getToken1().tokenAddress,\n      amount0 - unusedAmount0,\n      amount1 - unusedAmount1,\n      liquidity\n    );\n  }\n\n  function unbundle(address payable receiver, uint256 packTokenId, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    // Remove Liquidity\n    IWeb3PacksDefs.LiquidityPosition memory liquidityPosition = _liquidityPositionsByTokenId[packTokenId];\n    removeLiquidityPosition(liquidityPosition);\n    collectLpFees(liquidityPosition);\n\n    // Perform Swap\n    if (sellAll) {\n      // Swap Assets back to WETH\n      swapSingle(10000, true); // 100% token1 -> token0\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Transfer Assets to Receiver\n      TransferHelper.safeTransfer(getToken0().tokenAddress, receiver, getBalanceToken0());\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n\n    // Clear Liquidity Position\n    delete _liquidityPositionsByTokenId[packTokenId];\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/LPWethMode.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// LPWethMode.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/AlgebraRouter.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\n\n/*\n  Creates a Liquidity Position on Kim Exchange using the Algebra Router\n  Token 0 = WETH 50%\n  Token 1 = MODE 50%\n */\ncontract LPWethMode is IWeb3PacksBundler, AlgebraRouter {\n  // Inherit from the Algebra Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config) AlgebraRouter(config) {}\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 0 = WETH\n  // Token 1 = Mode on Mode (Kim Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 18,\n      tokenSymbol: \"MODE\"\n    });\n    return token;\n  }\n\n  function getLiquidityToken(uint256 packTokenId) public override view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = _liquidityRouter;\n    tokenId = _liquidityPositionsByTokenId[packTokenId].lpTokenId;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256 packTokenId, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    swapSingle(5000, false); // 50% token0 -> token1\n\n    // Deposit Liquidity\n    (uint256 amount0, uint256 amount1, , ) = getLiquidityAmounts();\n    (uint256 lpTokenId, uint256 liquidity, , ) = createLiquidityPosition(false);\n    nftTokenId = lpTokenId;\n    amountOut = liquidity;\n    tokenAddress = _liquidityRouter;\n\n    // Transfer back to Manager\n    IERC721(tokenAddress).safeTransferFrom(address(this), _manager, nftTokenId);\n\n    // Track Liquidity Position by Pack Token ID\n    _liquidityPositionsByTokenId[packTokenId] = IWeb3PacksDefs.LiquidityPosition({\n      lpTokenId: lpTokenId,\n      liquidity: liquidity,\n      stable: false\n    });\n\n    // Refund Unused Amounts\n    (uint256 unusedAmount0, uint256 unusedAmount1) = refundUnusedTokens(sender);\n    emit BundledTokenLP(\n      getToken0().tokenAddress,\n      getToken1().tokenAddress,\n      amount0 - unusedAmount0,\n      amount1 - unusedAmount1,\n      liquidity\n    );\n  }\n\n  function unbundle(address payable receiver, uint256 packTokenId, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    // Remove Liquidity\n    IWeb3PacksDefs.LiquidityPosition memory liquidityPosition = _liquidityPositionsByTokenId[packTokenId];\n    removeLiquidityPosition(liquidityPosition);\n    collectLpFees(liquidityPosition);\n\n    // Perform Swap\n    if (sellAll) {\n      // Swap Assets back to WETH\n      swapSingle(10000, true); // 100% token1 -> token0\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Transfer Assets to Receiver\n      TransferHelper.safeTransfer(getToken0().tokenAddress, receiver, getBalanceToken0());\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n\n    // Clear Liquidity Position\n    delete _liquidityPositionsByTokenId[packTokenId];\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/LPWethMode8020.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// LPWethMode8020.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/BalancerRouter.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\n\n/*\n  Creates a Liquidity Position on Balancer Exchange using the Balancer Router\n  Token 0 = WETH 20%\n  Token 1 = MODE 80%\n */\ncontract LPWethMode8020 is IWeb3PacksBundler, BalancerRouter {\n  // Inherit from the Balancer Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config) BalancerRouter(config) {}\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 0 = WETH\n  // Token 1 = Mode on Mode (Kim Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 18,\n      tokenSymbol: \"MODE\"\n    });\n    return token;\n  }\n\n  function getLiquidityToken(uint256) public override view returns (address tokenAddress, uint256 tokenId) {\n    (address poolAddress, ) = IBalancerV2Vault(_liquidityRouter).getPool(_poolId);\n    tokenAddress = poolAddress;\n    tokenId = 0;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256 packTokenId, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    swapSingle(8000, false); // 80% token0 -> token1\n\n    // Deposit Liquidity\n    (uint256 amount0, uint256 amount1, , ) = getLiquidityAmounts();\n    (uint256 lpTokenId, uint256 liquidity, , ) = createLiquidityPosition(false);\n    address poolAddress = address(uint160(lpTokenId));\n    nftTokenId = 0;\n    amountOut = liquidity;\n    tokenAddress = poolAddress;\n\n    // Transfer back to Manager\n    TransferHelper.safeTransfer(poolAddress, _manager, amountOut);\n\n    // Track Liquidity Position by Pack Token ID\n    _liquidityPositionsByTokenId[packTokenId] = IWeb3PacksDefs.LiquidityPosition({\n      lpTokenId: lpTokenId,\n      liquidity: liquidity,\n      stable: false\n    });\n\n    // Refund Unused Amounts\n    (uint256 unusedAmount0, uint256 unusedAmount1) = refundUnusedTokens(sender);\n    emit BundledTokenLP(\n      getToken0().tokenAddress,\n      getToken1().tokenAddress,\n      amount0 - unusedAmount0,\n      amount1 - unusedAmount1,\n      liquidity\n    );\n  }\n\n  function unbundle(address payable receiver, uint256 packTokenId, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    IWeb3PacksDefs.LiquidityPosition memory liquidityPosition = _liquidityPositionsByTokenId[packTokenId];\n\n    // Perform Swap\n    if (sellAll) {\n      // Remove Liquidity\n      removeLiquidityPosition(liquidityPosition);\n      collectLpFees(liquidityPosition);\n\n      // Swap Assets back to WETH\n      swapSingle(10000, true); // 100% token1 -> token0\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // NOTE: For this Bundle, we want users to be able to Unbundle and receive the actual Liquidity for Voting Purposes\n      (address lpTokenAddress, ) = getLiquidityToken(packTokenId);\n\n      // Transfer Assets to Receiver\n      TransferHelper.safeTransfer(lpTokenAddress, receiver, liquidityPosition.liquidity);\n    }\n\n    // Clear Liquidity Position\n    delete _liquidityPositionsByTokenId[packTokenId];\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/LPWethStone.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// LPWethStone.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/AlgebraRouter.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\n\n/*\n  Creates a Liquidity Position on Kim Exchange using the Algebra Router\n  Token 0 = WETH 50%\n  Token 1 = STONE 50%\n */\ncontract LPWethStone is IWeb3PacksBundler, AlgebraRouter {\n  // Inherit from the Algebra Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config) AlgebraRouter(config) {}\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 0 = WETH\n  // Token 1 = STONE on Mode (Kim Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 6,\n      tokenSymbol: \"STONE\"\n    });\n    return token;\n  }\n\n  function getLiquidityToken(uint256 packTokenId) public override view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = _liquidityRouter;\n    tokenId = _liquidityPositionsByTokenId[packTokenId].lpTokenId;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256 packTokenId, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    swapSingle(5000, false); // 50% token0 -> token1\n\n    // Deposit Liquidity\n    (uint256 amount0, uint256 amount1, , ) = getLiquidityAmounts();\n    (uint256 lpTokenId, uint256 liquidity, , ) = createLiquidityPosition(false);\n    nftTokenId = lpTokenId;\n    amountOut = liquidity;\n    tokenAddress = _liquidityRouter;\n\n    // Transfer back to Manager\n    IERC721(tokenAddress).safeTransferFrom(address(this), _manager, nftTokenId);\n\n    // Track Liquidity Position by Pack Token ID\n    _liquidityPositionsByTokenId[packTokenId] = IWeb3PacksDefs.LiquidityPosition({\n      lpTokenId: lpTokenId,\n      liquidity: liquidity,\n      stable: false\n    });\n\n    // Refund Unused Amounts\n    (uint256 unusedAmount0, uint256 unusedAmount1) = refundUnusedTokens(sender);\n    emit BundledTokenLP(\n      getToken0().tokenAddress,\n      getToken1().tokenAddress,\n      amount0 - unusedAmount0,\n      amount1 - unusedAmount1,\n      liquidity\n    );\n  }\n\n  function unbundle(address payable receiver, uint256 packTokenId, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    // Remove Liquidity\n    IWeb3PacksDefs.LiquidityPosition memory liquidityPosition = _liquidityPositionsByTokenId[packTokenId];\n    removeLiquidityPosition(liquidityPosition);\n    collectLpFees(liquidityPosition);\n\n    // Perform Swap\n    if (sellAll) {\n      // Swap Assets back to WETH\n      swapSingle(10000, true); // 100% token1 -> token0\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Transfer Assets to Receiver\n      TransferHelper.safeTransfer(getToken0().tokenAddress, receiver, getBalanceToken0());\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n\n    // Clear Liquidity Position\n    delete _liquidityPositionsByTokenId[packTokenId];\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/LPWethUsdc.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// LPWethUsdc.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/AlgebraRouter.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\n\n/*\n  Creates a Liquidity Position on Kim Exchange using the Algebra Router\n  Token 0 = WETH 50%\n  Token 1 = USDC 50%\n */\ncontract LPWethUsdc is IWeb3PacksBundler, AlgebraRouter {\n  // Inherit from the Algebra Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config) AlgebraRouter(config) {}\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 0 = WETH\n  // Token 1 = USDC on Mode (Kim Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 6,\n      tokenSymbol: \"USDC\"\n    });\n    return token;\n  }\n\n  function getLiquidityToken(uint256 packTokenId) public override view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = _liquidityRouter;\n    tokenId = _liquidityPositionsByTokenId[packTokenId].lpTokenId;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256 packTokenId, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    swapSingle(5000, false); // 50% token0 -> token1\n\n    // Deposit Liquidity\n    (uint256 amount0, uint256 amount1, , ) = getLiquidityAmounts();\n    (uint256 lpTokenId, uint256 liquidity, , ) = createLiquidityPosition(false);\n    nftTokenId = lpTokenId;\n    amountOut = liquidity;\n    tokenAddress = _liquidityRouter;\n\n    // Transfer back to Manager\n    IERC721(tokenAddress).safeTransferFrom(address(this), _manager, nftTokenId);\n\n    // Track Liquidity Position by Pack Token ID\n    _liquidityPositionsByTokenId[packTokenId] = IWeb3PacksDefs.LiquidityPosition({\n      lpTokenId: lpTokenId,\n      liquidity: liquidity,\n      stable: false\n    });\n\n    // Refund Unused Amounts\n    (uint256 unusedAmount0, uint256 unusedAmount1) = refundUnusedTokens(sender);\n    emit BundledTokenLP(\n      getToken0().tokenAddress,\n      getToken1().tokenAddress,\n      amount0 - unusedAmount0,\n      amount1 - unusedAmount1,\n      liquidity\n    );\n  }\n\n  function unbundle(address payable receiver, uint256 packTokenId, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    // Remove Liquidity\n    IWeb3PacksDefs.LiquidityPosition memory liquidityPosition = _liquidityPositionsByTokenId[packTokenId];\n    removeLiquidityPosition(liquidityPosition);\n    collectLpFees(liquidityPosition);\n\n    // Perform Swap\n    if (sellAll) {\n      // Swap Assets back to WETH\n      swapSingle(10000, true); // 100% token1 -> token0\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Transfer Assets to Receiver\n      TransferHelper.safeTransfer(getToken0().tokenAddress, receiver, getBalanceToken0());\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n\n    // Clear Liquidity Position\n    delete _liquidityPositionsByTokenId[packTokenId];\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/LPWethWbtc.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// LPWethWbtc.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/AlgebraRouter.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\n\n/*\n  Creates a Liquidity Position on Kim Exchange using the Algebra Router\n  Token 0 = WETH 50%\n  Token 1 = WBTC 50%\n */\ncontract LPWethWbtc is IWeb3PacksBundler, AlgebraRouter {\n  // Inherit from the Algebra Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config) AlgebraRouter(config) {}\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 0 = WETH\n  // Token 1 = WBTC on Mode (Kim Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 8,\n      tokenSymbol: \"WBTC\"\n    });\n    return token;\n  }\n\n  function getLiquidityToken(uint256 packTokenId) public override view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = _liquidityRouter;\n    tokenId = _liquidityPositionsByTokenId[packTokenId].lpTokenId;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256 packTokenId, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    swapSingle(5000, false); // 50% token0 -> token1\n\n    // Deposit Liquidity\n    (uint256 amount0, uint256 amount1, , ) = getLiquidityAmounts();\n    (uint256 lpTokenId, uint256 liquidity, , ) = createLiquidityPosition(false);\n    nftTokenId = lpTokenId;\n    amountOut = liquidity;\n    tokenAddress = _liquidityRouter;\n\n    // Transfer back to Manager\n    IERC721(tokenAddress).safeTransferFrom(address(this), _manager, nftTokenId);\n\n    // Track Liquidity Position by Pack Token ID\n    _liquidityPositionsByTokenId[packTokenId] = IWeb3PacksDefs.LiquidityPosition({\n      lpTokenId: lpTokenId,\n      liquidity: liquidity,\n      stable: false\n    });\n\n    // Refund Unused Amounts\n    (uint256 unusedAmount0, uint256 unusedAmount1) = refundUnusedTokens(sender);\n    emit BundledTokenLP(\n      getToken0().tokenAddress,\n      getToken1().tokenAddress,\n      amount0 - unusedAmount0,\n      amount1 - unusedAmount1,\n      liquidity\n    );\n  }\n\n  function unbundle(address payable receiver, uint256 packTokenId, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    // Remove Liquidity\n    IWeb3PacksDefs.LiquidityPosition memory liquidityPosition = _liquidityPositionsByTokenId[packTokenId];\n    removeLiquidityPosition(liquidityPosition);\n    collectLpFees(liquidityPosition);\n\n    // Perform Swap\n    if (sellAll) {\n      // Swap Assets back to WETH\n      swapSingle(10000, true); // 100% token1 -> token0\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Transfer Assets to Receiver\n      TransferHelper.safeTransfer(getToken0().tokenAddress, receiver, getBalanceToken0());\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n\n    // Clear Liquidity Position\n    delete _liquidityPositionsByTokenId[packTokenId];\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/SSWethBmx.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// SSWethBmx.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/VelodromeV1Router.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\nimport \"../../../interfaces/mode/IVelodrome.sol\";\nimport \"../../../interfaces/mode/IVelodromeV1Quoter.sol\";\n\n/*\n  Performs a Single-Sided Swap on Velodrome Exchange using the Velodrome V1 Router\n  Token 0 = WETH\n  Token 1 = BMX\n */\ncontract SSWethBmx is IWeb3PacksBundler, VelodromeV1Router {\n  address public _usdc;\n  address public _wmlt;\n\n  // Inherit from the Velodrome V1 Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config, address usdc, address wmlt) VelodromeV1Router(config) {\n    _usdc = usdc;\n    _wmlt = wmlt;\n  }\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 1 = BMX on Mode (Velodrome Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 18,\n      tokenSymbol: \"BMX\"\n    });\n    return token;\n  }\n\n  /// @dev This can be overridden to specify custom liquidity tokens\n  function getLiquidityToken(uint256) public virtual view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = getToken1().tokenAddress;\n    tokenId = 0;\n  }\n\n  function getTokenPath(bool reverse) public override view returns (IWeb3PacksDefs.Route[] memory tokenPath) {\n    IWeb3PacksDefs.Route[] memory tokens = new IWeb3PacksDefs.Route[](3);\n    if (reverse) {\n      tokens[0] = IWeb3PacksDefs.Route({token0: getToken1().tokenAddress, token1: _wmlt, stable: false});\n      tokens[1] = IWeb3PacksDefs.Route({token0: _wmlt, token1: _usdc, stable: false});\n      tokens[2] = IWeb3PacksDefs.Route({token0: _usdc, token1: getToken0().tokenAddress, stable: false});\n    } else {\n      tokens[0] = IWeb3PacksDefs.Route({token0: getToken0().tokenAddress, token1: _usdc, stable: false});\n      tokens[1] = IWeb3PacksDefs.Route({token0: _usdc, token1: _wmlt, stable: false});\n      tokens[2] = IWeb3PacksDefs.Route({token0: _wmlt, token1: getToken1().tokenAddress, stable: false});\n    }\n    return tokens;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    amountOut = swapSingle(10000, false); // 100% token0 -> token1\n\n    // Transfer back to Manager\n    tokenAddress = getToken1().tokenAddress;\n    nftTokenId = 0;\n    TransferHelper.safeTransfer(tokenAddress, _manager, amountOut);\n\n    // Refund Unused Amounts\n    refundUnusedTokens(sender);\n    emit BundledTokenSS(tokenAddress, amountOut);\n  }\n\n  function unbundle(address payable receiver, uint256, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    if (sellAll) {\n      // Perform Swap\n      swapSingle(10000, true); // 100% token1 -> token0\n\n      // Send ETH to Receiver\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Send Tokens to Receiver\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/SSWethCartel.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// SSWethCartel.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/VelodromeV2Router.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\n\n/*\n  Performs a Single-Sided Swap on Velodrome Exchange using the Velodrome Universal Router\n  Token 0 = WETH\n  Token 1 = CARTEL\n */\ncontract SSWethCartel is IWeb3PacksBundler, VelodromeV2Router {\n  address public _mode;\n\n  // Inherit from the Velodrome Universal Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config, address mode) VelodromeV2Router(config) {\n    _mode = mode;\n  }\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 1 = CARTEL on Mode (Velodrome Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 18,\n      tokenSymbol: \"CARTEL\"\n    });\n    return token;\n  }\n\n  /// @dev This can be overridden to specify custom liquidity tokens\n  function getLiquidityToken(uint256) public virtual view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = getToken1().tokenAddress;\n    tokenId = 0;\n  }\n\n  function swapSingle(uint256 percentOfAmount, bool reverse)\n    public\n    override\n    onlyManagerOrSelf\n    returns (uint256 amountOut)\n  {\n    IWeb3PacksDefs.Token memory token0 = reverse ? getToken1() : getToken0();\n    IWeb3PacksDefs.Token memory token1 = reverse ? getToken0() : getToken1();\n    int24 token0Tick = reverse ? _tickLower : _tickUpper;\n    int24 token1Tick = reverse ? _tickUpper: _tickLower;\n\n    uint256 balance = IERC20(token0.tokenAddress).balanceOf(address(this));\n    uint256 swapAmount = (balance * percentOfAmount) / 10000;\n    bytes memory path;\n\n    if (swapAmount > 0) {\n      TransferHelper.safeApprove(token0.tokenAddress, _swapRouter, swapAmount);\n      path = abi.encodePacked(token0.tokenAddress, token0Tick, _mode, token1Tick, token1.tokenAddress);\n      amountOut = _performSwapV3(percentOfAmount, token0.tokenAddress, token1.tokenAddress, path);\n    }\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    amountOut = swapSingle(10000, false); // 100% token0 -> token1\n\n    // Transfer back to Manager\n    tokenAddress = getToken1().tokenAddress;\n    nftTokenId = 0;\n    TransferHelper.safeTransfer(tokenAddress, _manager, amountOut);\n\n    // Refund Unused Amounts\n    refundUnusedTokens(sender);\n    emit BundledTokenSS(tokenAddress, amountOut);\n  }\n\n  function unbundle(address payable receiver, uint256, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    if (sellAll) {\n      // Perform Swap\n      swapSingle(10000, true); // 100% token1 -> token0\n\n      // Send ETH to Receiver\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Send Token to Receiver\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/SSWethGambl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// SSWethGambl.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/VelodromeV2Router.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\n\n/*\n  Performs a Single-Sided Swap on Velodrome Exchange using the Velodrome Universal Router\n  Token 0 = WETH\n  Token 1 = GAMBL\n */\ncontract SSWethGambl is IWeb3PacksBundler, VelodromeV2Router {\n  address public _mode;\n\n  // Inherit from the Velodrome Universal Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config, address mode) VelodromeV2Router(config) {\n    _mode = mode;\n  }\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 1 = GAMBL on Mode (Velodrome Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 18,\n      tokenSymbol: \"GAMBL\"\n    });\n    return token;\n  }\n\n  /// @dev This can be overridden to specify custom liquidity tokens\n  function getLiquidityToken(uint256) public virtual view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = getToken1().tokenAddress;\n    tokenId = 0;\n  }\n\n  function getTokenPath(bool reverse) public override view returns (IWeb3PacksDefs.Route[] memory tokenPath) {\n    IWeb3PacksDefs.Route[] memory tokens = new IWeb3PacksDefs.Route[](2);\n    if (reverse) {\n      tokens[0] = IWeb3PacksDefs.Route({token0: getToken1().tokenAddress, token1: _mode, stable: false});\n      tokens[1] = IWeb3PacksDefs.Route({token0: _mode, token1: getToken0().tokenAddress, stable: false});\n    } else {\n      tokens[0] = IWeb3PacksDefs.Route({token0: getToken0().tokenAddress, token1: _mode, stable: false});\n      tokens[1] = IWeb3PacksDefs.Route({token0: _mode, token1: getToken1().tokenAddress, stable: false});\n    }\n    return tokens;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    amountOut = swapSingle(10000, false); // 100% token0 -> token1\n\n    // Transfer back to Manager\n    tokenAddress = getToken1().tokenAddress;\n    nftTokenId = 0;\n    TransferHelper.safeTransfer(tokenAddress, _manager, amountOut);\n\n    // Refund Unused Amounts\n    refundUnusedTokens(sender);\n    emit BundledTokenSS(tokenAddress, amountOut);\n  }\n\n  function unbundle(address payable receiver, uint256, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    if (sellAll) {\n      // Perform Swap\n      swapSingle(10000, true); // 100% token1 -> token0\n\n      // Send ETH to Receiver\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Send Token to Receiver\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/SSWethIcl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// SSWethIcl.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/VelodromeV1Router.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\nimport \"../../../interfaces/mode/IVelodrome.sol\";\n\n/*\n  Performs a Single-Sided Swap on Velodrome Exchange using the Velodrome V1 Router\n  Token 0 = WETH\n  Token 1 = ICL\n */\ncontract SSWethIcl is IWeb3PacksBundler, VelodromeV1Router {\n  address public _mode;\n\n  // Inherit from the Velodrome V1 Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config, address mode) VelodromeV1Router(config) {\n    _mode = mode;\n  }\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 1 = ICL on Mode (Velodrome Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 18,\n      tokenSymbol: \"ICL\"\n    });\n    return token;\n  }\n\n  /// @dev This can be overridden to specify custom liquidity tokens\n  function getLiquidityToken(uint256) public virtual view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = getToken1().tokenAddress;\n    tokenId = 0;\n  }\n\n  function getTokenPath(bool reverse) public override view returns (IWeb3PacksDefs.Route[] memory tokenPath) {\n    IWeb3PacksDefs.Route[] memory tokens = new IWeb3PacksDefs.Route[](2);\n    if (reverse) {\n      tokens[0] = IWeb3PacksDefs.Route({token0: getToken1().tokenAddress, token1: _mode, stable: false});\n      tokens[1] = IWeb3PacksDefs.Route({token0: _mode, token1: getToken0().tokenAddress, stable: false});\n    } else {\n      tokens[0] = IWeb3PacksDefs.Route({token0: getToken0().tokenAddress, token1: _mode, stable: false});\n      tokens[1] = IWeb3PacksDefs.Route({token0: _mode, token1: getToken1().tokenAddress, stable: false});\n    }\n    return tokens;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    amountOut = swapSingle(10000, false); // 100% token0 -> token1\n\n    // Transfer back to Manager\n    tokenAddress = getToken1().tokenAddress;\n    nftTokenId = 0;\n    TransferHelper.safeTransfer(tokenAddress, _manager, amountOut);\n\n    // Refund Unused Amounts\n    refundUnusedTokens(sender);\n    emit BundledTokenSS(tokenAddress, amountOut);\n  }\n\n  function unbundle(address payable receiver, uint256, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    if (sellAll) {\n      // Perform Swap\n      swapSingle(10000, true); // 100% token1 -> token0\n\n      // Send ETH to Receiver\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Send Token to Receiver\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/SSWethIonx.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// SSWethIonx.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/AlgebraRouter.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\n\n/*\n  Performs a Single-Sided Swap on Kim Exchange using the Algebra Router\n  Token 0 = WETH\n  Token 1 = IONX\n */\ncontract SSWethIonx is IWeb3PacksBundler, AlgebraRouter {\n  // Inherit from the Algebra Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config) AlgebraRouter(config) {}\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 1 = IONX on Mode (Kim Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 18,\n      tokenSymbol: \"IONX\"\n    });\n    return token;\n  }\n\n  /// @dev This can be overridden to specify custom liquidity tokens\n  function getLiquidityToken(uint256) public virtual view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = getToken1().tokenAddress;\n    tokenId = 0;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    amountOut = swapSingle(10000, false); // 100% token0 -> token1\n\n    // Transfer back to Manager\n    tokenAddress = getToken1().tokenAddress;\n    nftTokenId = 0;\n    TransferHelper.safeTransfer(tokenAddress, _manager, amountOut);\n\n    // Refund Unused Amounts\n    refundUnusedTokens(sender);\n    emit BundledTokenSS(tokenAddress, amountOut);\n  }\n\n  function unbundle(address payable receiver, uint256, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    if (sellAll) {\n      // Perform Swap\n      swapSingle(10000, true); // 100% token1 -> token0\n\n      // Send ETH to Receiver\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Send Token to Receiver\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/SSWethKim.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// SSWethKim.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/AlgebraRouter.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\n\n/*\n  Performs a Single-Sided Swap on Kim Exchange using the Algebra Router\n  Token 0 = WETH\n  Token 1 = KIM\n */\ncontract SSWethKim is IWeb3PacksBundler, AlgebraRouter {\n  // Inherit from the Algebra Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config) AlgebraRouter(config) {}\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 1 = KIM on Mode (Kim Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 18,\n      tokenSymbol: \"KIM\"\n    });\n    return token;\n  }\n\n  /// @dev This can be overridden to specify custom liquidity tokens\n  function getLiquidityToken(uint256) public virtual view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = getToken1().tokenAddress;\n    tokenId = 0;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    amountOut = swapSingle(10000, false); // 100% token0 -> token1\n\n    // Transfer back to Manager\n    tokenAddress = getToken1().tokenAddress;\n    nftTokenId = 0;\n    TransferHelper.safeTransfer(tokenAddress, _manager, amountOut);\n\n    // Refund Unused Amounts\n    refundUnusedTokens(sender);\n    emit BundledTokenSS(tokenAddress, amountOut);\n  }\n\n  function unbundle(address payable receiver, uint256, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    if (sellAll) {\n      // Perform Swap\n      swapSingle(10000, true); // 100% token1 -> token0\n\n      // Send ETH to Receiver\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Send Token to Receiver\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/SSWethMode.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// SSWethMode.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/AlgebraRouter.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\n\n/*\n  Performs a Single-Sided Swap on Kim Exchange using the Algebra Router\n  Token 0 = WETH\n  Token 1 = MODE\n */\ncontract SSWethMode is IWeb3PacksBundler, AlgebraRouter {\n  // Inherit from the Algebra Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config) AlgebraRouter(config) {}\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 1 = MODE on Mode (Kim Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 18,\n      tokenSymbol: \"MODE\"\n    });\n    return token;\n  }\n\n  /// @dev This can be overridden to specify custom liquidity tokens\n  function getLiquidityToken(uint256) public virtual view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = getToken1().tokenAddress;\n    tokenId = 0;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    amountOut = swapSingle(10000, false); // 100% token0 -> token1\n\n    // Transfer back to Manager\n    tokenAddress = getToken1().tokenAddress;\n    nftTokenId = 0;\n    TransferHelper.safeTransfer(tokenAddress, _manager, amountOut);\n\n    // Refund Unused Amounts\n    refundUnusedTokens(sender);\n    emit BundledTokenSS(tokenAddress, amountOut);\n  }\n\n  function unbundle(address payable receiver, uint256, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    if (sellAll) {\n      // Perform Swap\n      swapSingle(10000, true); // 100% token1 -> token0\n\n      // Send ETH to Receiver\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Send Token to Receiver\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/SSWethPacky.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// SSWethPacky.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/VelodromeV2Router.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\n\n/*\n  Performs a Single-Sided Swap on Velodrome Exchange using the Velodrome Universal Router\n  Token 0 = WETH\n  Token 1 = PACKY\n */\ncontract SSWethPacky is IWeb3PacksBundler, VelodromeV2Router {\n  address public _mode;\n\n  // Inherit from the Algebra Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config, address mode) VelodromeV2Router(config) {\n    _mode = mode;\n  }\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 1 = PACKY on Mode (Velodrome Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 18,\n      tokenSymbol: \"PACKY\"\n    });\n    return token;\n  }\n\n  function getTokenPath(bool reverse) public override view returns (IWeb3PacksDefs.Route[] memory tokenPath) {\n    IWeb3PacksDefs.Route[] memory tokens = new IWeb3PacksDefs.Route[](2);\n    if (reverse) {\n      tokens[0] = IWeb3PacksDefs.Route({token0: getToken1().tokenAddress, token1: _mode, stable: false});\n      tokens[1] = IWeb3PacksDefs.Route({token0: _mode, token1: getToken0().tokenAddress, stable: false});\n    } else {\n      tokens[0] = IWeb3PacksDefs.Route({token0: getToken0().tokenAddress, token1: _mode, stable: false});\n      tokens[1] = IWeb3PacksDefs.Route({token0: _mode, token1: getToken1().tokenAddress, stable: false});\n    }\n    return tokens;\n  }\n\n  /// @dev This can be overridden to specify custom liquidity tokens\n  function getLiquidityToken(uint256) public virtual view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = getToken1().tokenAddress;\n    tokenId = 0;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    amountOut = swapSingle(10000, false); // 100% token0 -> token1\n\n    // Transfer back to Manager\n    tokenAddress = getToken1().tokenAddress;\n    nftTokenId = 0;\n    TransferHelper.safeTransfer(tokenAddress, _manager, amountOut);\n\n    // Refund Unused Amounts\n    refundUnusedTokens(sender);\n    emit BundledTokenSS(tokenAddress, amountOut);\n  }\n\n  function unbundle(address payable receiver, uint256, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    if (sellAll) {\n      // Perform Swap\n      swapSingle(10000, true); // 100% token1 -> token0\n\n      // Send ETH to Receiver\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Send Token to Receiver\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/SSWethSmd.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// SSWethSmd.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/PancakeRouter.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\n\n/*\n  Performs a Single-Sided Swap on SwapMode Exchange using the Pancake Router\n  Token 0 = WETH\n  Token 1 = SMD\n */\ncontract SSWethSmd is IWeb3PacksBundler, PancakeRouter {\n  // Inherit from the Pancake Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config) PancakeRouter(config) {}\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 1 = SMD on Mode (SwapMode Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 18,\n      tokenSymbol: \"SMD\"\n    });\n    return token;\n  }\n\n  /// @dev This can be overridden to specify custom liquidity tokens\n  function getLiquidityToken(uint256) public virtual view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = getToken1().tokenAddress;\n    tokenId = 0;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    amountOut = swapSingle(10000, false); // 100% token0 -> token1\n\n    // Transfer back to Manager\n    tokenAddress = getToken1().tokenAddress;\n    nftTokenId = 0;\n    TransferHelper.safeTransfer(tokenAddress, _manager, amountOut);\n\n    // Refund Unused Amounts\n    refundUnusedTokens(sender);\n    emit BundledTokenSS(tokenAddress, amountOut);\n  }\n\n  function unbundle(address payable receiver, uint256, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    if (sellAll) {\n      // Perform Swap\n      swapSingle(10000, true); // 100% token1 -> token0\n\n      // Send ETH to Receiver\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Send Token to Receiver\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n  }\n}\n"
    },
    "contracts/lib/mode/bundlers/SSWethWmlt.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// SSWethWmlt.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../routers/VelodromeV1Router.sol\";\nimport \"../../../interfaces/IWeb3PacksBundler.sol\";\nimport \"../../../interfaces/mode/IVelodrome.sol\";\n\n/*\n  Performs a Single-Sided Swap on Velodrome Exchange using the Velodrome V1 Router\n  Token 0 = WETH\n  Token 1 = wMLT\n */\ncontract SSWethWmlt is IWeb3PacksBundler, VelodromeV1Router {\n  address public _usdc;\n\n  // Inherit from the Velodrome V1 Router\n  constructor(IWeb3PacksDefs.RouterConfig memory config, address usdc) VelodromeV1Router(config) {\n    _usdc = usdc;\n  }\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  // Token 1 = wMLT on Mode (Velodrome Exchange)\n  function getToken1() public view override returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _token1,\n      tokenDecimals: 18,\n      tokenSymbol: \"wMLT\"\n    });\n    return token;\n  }\n\n  function getTokenPath(bool reverse) public override view returns (IWeb3PacksDefs.Route[] memory tokenPath) {\n    IWeb3PacksDefs.Route[] memory tokens = new IWeb3PacksDefs.Route[](2);\n    if (reverse) {\n      tokens[0] = IWeb3PacksDefs.Route({token0: getToken1().tokenAddress, token1: _usdc, stable: false});\n      tokens[1] = IWeb3PacksDefs.Route({token0: _usdc, token1: getToken0().tokenAddress, stable: false});\n    } else {\n      tokens[0] = IWeb3PacksDefs.Route({token0: getToken0().tokenAddress, token1: _usdc, stable: false});\n      tokens[1] = IWeb3PacksDefs.Route({token0: _usdc, token1: getToken1().tokenAddress, stable: false});\n    }\n    return tokens;\n  }\n\n  /// @dev This can be overridden to specify custom liquidity tokens\n  function getLiquidityToken(uint256) public virtual view returns (address tokenAddress, uint256 tokenId) {\n    tokenAddress = getToken1().tokenAddress;\n    tokenId = 0;\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function bundle(uint256, address sender)\n    payable\n    external\n    override\n    onlyManagerOrSelf\n    returns(\n      address tokenAddress,\n      uint256 amountOut,\n      uint256 nftTokenId\n    )\n  {\n    // Perform Swap\n    amountOut = swapSingle(10000, false); // 100% token0 -> token1\n\n    // Transfer back to Manager\n    tokenAddress = getToken1().tokenAddress;\n    nftTokenId = 0;\n    TransferHelper.safeTransfer(tokenAddress, _manager, amountOut);\n\n    // Refund Unused Amounts\n    refundUnusedTokens(sender);\n    emit BundledTokenSS(tokenAddress, amountOut);\n  }\n\n  function unbundle(address payable receiver, uint256, bool sellAll)\n    external\n    override\n    onlyManagerOrSelf\n    returns(uint256 ethAmountOut)\n  {\n    if (sellAll) {\n      // Perform Swap\n      swapSingle(10000, true); // 100% token1 -> token0\n\n      // Send ETH to Receiver\n      ethAmountOut = exitWethAndTransfer(receiver);\n    } else {\n      // Send Token to Receiver\n      TransferHelper.safeTransfer(getToken1().tokenAddress, receiver, getBalanceToken1());\n    }\n  }\n}\n"
    },
    "contracts/lib/mode/routers/AlgebraRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// AlgebraRouter.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../../Web3PacksRouterBase.sol\";\nimport \"../../../interfaces/IWeb3PacksDefs.sol\";\nimport \"../../../interfaces/mode/IAlgebraRouter.sol\";\nimport \"../../../interfaces/mode/IAlgebraQuoter.sol\";\nimport \"../../../interfaces/mode/INonfungiblePositionManager.sol\";\n\n\n// UniswapV3-like Router\nabstract contract AlgebraRouter is Web3PacksRouterBase {\n  // Pass constructor data\n  constructor(IWeb3PacksDefs.RouterConfig memory config) Web3PacksRouterBase(config) {}\n\n  function swapSingle(uint256 percentOfAmount, bool reverse)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amountOut)\n  {\n    IWeb3PacksDefs.Token memory token0 = reverse ? getToken1() : getToken0();\n    IWeb3PacksDefs.Token memory token1 = reverse ? getToken0() : getToken1();\n    amountOut = _performSwap(percentOfAmount, token0.tokenAddress, token1.tokenAddress);\n  }\n\n  function swapCustom(uint256 percentOfAmount, address token0, address token1)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amountOut)\n  {\n    amountOut = _performSwap(percentOfAmount, token0, token1);\n  }\n\n  function createLiquidityPosition(bool)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (\n      uint256 lpTokenId,\n      uint256 liquidity,\n      uint256 amount0,\n      uint256 amount1\n    )\n  {\n    IWeb3PacksDefs.Token memory token0 = getToken0();\n    IWeb3PacksDefs.Token memory token1 = getToken1();\n    (\n      uint256 balanceAmount0,\n      uint256 balanceAmount1,\n      uint256 minAmount0,\n      uint256 minAmount1\n    ) = getLiquidityAmounts();\n\n    TransferHelper.safeApprove(token0.tokenAddress, _liquidityRouter, balanceAmount0);\n    TransferHelper.safeApprove(token1.tokenAddress, _liquidityRouter, balanceAmount1);\n\n    // Add Liquidity\n    INonfungiblePositionManager.MintParams memory params =\n      INonfungiblePositionManager.MintParams({\n        token0: token0.tokenAddress,\n        token1: token1.tokenAddress,\n        tickLower: _tickLower,\n        tickUpper: _tickUpper,\n        amount0Desired: balanceAmount0,\n        amount1Desired: balanceAmount1,\n        amount0Min: minAmount0,\n        amount1Min: minAmount1,\n        recipient: address(this),\n        deadline: block.timestamp\n      });\n    (lpTokenId, liquidity, amount0, amount1) = INonfungiblePositionManager(_liquidityRouter).mint(params);\n  }\n\n  function collectLpFees(IWeb3PacksDefs.LiquidityPosition memory liquidityPosition)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amount0, uint256 amount1)\n  {\n    INonfungiblePositionManager.CollectParams memory params =\n      INonfungiblePositionManager.CollectParams({\n        tokenId: liquidityPosition.lpTokenId,\n        recipient: address(this),\n        amount0Max: type(uint128).max,\n        amount1Max: type(uint128).max\n      });\n\n    (amount0, amount1) = INonfungiblePositionManager(_liquidityRouter).collect(params);\n  }\n\n  function removeLiquidityPosition(IWeb3PacksDefs.LiquidityPosition memory liquidityPosition)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint amount0, uint amount1)\n  {\n    // Release Liquidity\n    INonfungiblePositionManager.DecreaseLiquidityParams memory params =\n      INonfungiblePositionManager.DecreaseLiquidityParams({\n        tokenId: liquidityPosition.lpTokenId,\n        liquidity: uint128(liquidityPosition.liquidity),\n        amount0Min: 0, // liquidityPairs.token0.amount,\n        amount1Min: 0, // liquidityPairs.token1.amount,\n        deadline: block.timestamp\n      });\n    (amount0, amount1) = INonfungiblePositionManager(_liquidityRouter).decreaseLiquidity(params);\n  }\n\n\n  function _performSwap(uint256 percentOfAmount, address token0, address token1)\n    internal\n    returns (uint256 amountOut)\n  {\n    IAlgebraRouter.ExactInputSingleParams memory params;\n    uint256 balance = IERC20(token0).balanceOf(address(this));\n    uint256 swapAmount = (balance * percentOfAmount) / 10000;\n\n    if (swapAmount > 0) {\n      TransferHelper.safeApprove(token0, _swapRouter, swapAmount);\n      params = IAlgebraRouter.ExactInputSingleParams(token0, token1, address(this), block.timestamp, swapAmount, 0, 0);\n      IAlgebraRouter(_swapRouter).exactInputSingle(params);\n      amountOut = IERC20(token1).balanceOf(address(this));\n      if (amountOut == 0) { revert SwapFailed(); }\n      emit SwappedTokens(token0, token1, swapAmount, amountOut);\n    }\n  }\n}\n"
    },
    "contracts/lib/mode/routers/BalancerRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// BalancerRouter.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../../Web3PacksRouterBase.sol\";\nimport \"../../../interfaces/IWeb3PacksDefs.sol\";\nimport {IAsset, IBalancerV2Vault} from \"../../../interfaces/mode/IBalancerV2Vault.sol\";\nimport {IBalancerQueries} from \"../../../interfaces/mode/IBalancerQueries.sol\";\n\nabstract contract BalancerRouter is Web3PacksRouterBase {\n  // Pass constructor data\n  constructor(IWeb3PacksDefs.RouterConfig memory config) Web3PacksRouterBase(config) {}\n\n  function swapSingle(uint256 percentOfAmount, bool reverse)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amountOut)\n  {\n    IWeb3PacksDefs.Token memory token0 = reverse ? getToken1() : getToken0();\n    IWeb3PacksDefs.Token memory token1 = reverse ? getToken0() : getToken1();\n    amountOut = _performSwap(percentOfAmount, token0.tokenAddress, token1.tokenAddress);\n  }\n\n  function swapCustom(uint256 percentOfAmount, address token0, address token1)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amountOut)\n  {\n    amountOut = _performSwap(percentOfAmount, token0, token1);\n  }\n\n  function createLiquidityPosition(bool)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (\n      uint256 lpTokenId,\n      uint256 liquidity,\n      uint256 amount0,\n      uint256 amount1\n    )\n  {\n    (address poolAddress, ) = IBalancerV2Vault(_liquidityRouter).getPool(_poolId);\n    (uint256 balanceAmount0, uint256 balanceAmount1, , ) = getLiquidityAmounts();\n\n    (address[] memory addresses, uint256[] memory amounts) = getOrderedAssets(false);\n    IAsset[] memory assets = new IAsset[](addresses.length);\n    for (uint i; i < addresses.length; i++) {\n      assets[i] = IAsset(addresses[i]);\n      TransferHelper.safeApprove(addresses[i], _liquidityRouter, amounts[i]);\n    }\n\n    // Add Liquidity\n    bytes memory userData = abi.encode(IBalancerV2Vault.JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, amounts, 0);\n    IBalancerV2Vault.JoinPoolRequest memory joinData = IBalancerV2Vault.JoinPoolRequest({\n      assets: assets,\n      maxAmountsIn: amounts,\n      userData: userData,\n      fromInternalBalance: false\n    });\n    IBalancerV2Vault(_liquidityRouter).joinPool(_poolId, address(this), address(this), joinData);\n\n    lpTokenId = uint256(uint160(poolAddress));\n    liquidity = IERC20(poolAddress).balanceOf(address(this));\n    (amount0, amount1) = _getRemainders(balanceAmount0, balanceAmount1);\n  }\n\n  function collectLpFees(IWeb3PacksDefs.LiquidityPosition memory)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amount0, uint256 amount1)\n  {\n    amount0 = 0;\n    amount1 = 0;\n  }\n\n  function removeLiquidityPosition(IWeb3PacksDefs.LiquidityPosition memory liquidityPosition)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint amount0, uint amount1)\n  {\n    (address poolAddress, ) = IBalancerV2Vault(_liquidityRouter).getPool(_poolId);\n\n    (address[] memory addresses, uint256[] memory amounts) = getOrderedAssets(false);\n    IAsset[] memory assets = new IAsset[](addresses.length);\n    for (uint i; i < addresses.length; i++) { assets[i] = IAsset(addresses[i]); }\n\n    TransferHelper.safeApprove(\n      poolAddress,\n      _liquidityRouter,\n      liquidityPosition.liquidity\n    );\n\n    // Remove Liquidity\n    bytes memory userData = abi.encode(IBalancerV2Vault.ExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT, liquidityPosition.liquidity);\n    IBalancerV2Vault.ExitPoolRequest memory exitData = IBalancerV2Vault.ExitPoolRequest({\n      assets: assets,\n      minAmountsOut: amounts,\n      userData: userData,\n      toInternalBalance: false\n    });\n    IBalancerV2Vault(_liquidityRouter).exitPool(_poolId, address(this), payable(address(this)), exitData);\n\n    (amount0, amount1) = _getRemainders(0, 0);\n  }\n\n\n  function _performSwap(uint256 percentOfAmount, address token0, address token1)\n    internal\n    returns (uint256 amountOut)\n  {\n    uint256 balance = IERC20(token0).balanceOf(address(this));\n    uint256 swapAmount = (balance * percentOfAmount) / 10000;\n\n    TransferHelper.safeApprove(token0, _swapRouter, swapAmount);\n\n    if (swapAmount > 0) {\n      IBalancerV2Vault.SingleSwap memory swapData = IBalancerV2Vault.SingleSwap({\n        poolId: _poolId,\n        kind: IBalancerV2Vault.SwapKind.GIVEN_IN,\n        assetIn: IAsset(token0),\n        assetOut: IAsset(token1),\n        amount: swapAmount,\n        userData: bytes(\"\")\n      });\n\n      IBalancerV2Vault.FundManagement memory fundData = IBalancerV2Vault.FundManagement({\n        sender: address(this),\n        fromInternalBalance: false,\n        recipient: payable(address(this)),\n        toInternalBalance: false\n      });\n      IBalancerV2Vault(_swapRouter).swap(swapData, fundData, 0, block.timestamp);\n\n      amountOut = IERC20(token1).balanceOf(address(this));\n      if (amountOut == 0) { revert SwapFailed(); }\n      emit SwappedTokens(token0, token1, swapAmount, amountOut);\n    }\n  }\n\n  function _getRemainders(uint256 balanceAmount0, uint256 balanceAmount1) internal view returns (uint256 amount0, uint256 amount1) {\n    amount0 = getBalanceToken0();\n    amount1 = getBalanceToken1();\n    if (balanceAmount0 > 0) { amount0 = balanceAmount0 - amount0; }\n    if (balanceAmount1 > 0) { amount1 = balanceAmount1 - amount1; }\n  }\n}\n"
    },
    "contracts/lib/mode/routers/lib/VelodromeV2Commands.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\n/// @title Commands\n/// @notice Command Flags used to decode commands\nlibrary Commands {\n    // Masks to extract certain bits of commands\n    bytes1 internal constant FLAG_ALLOW_REVERT = 0x80;\n    bytes1 internal constant COMMAND_TYPE_MASK = 0x3f;\n\n    // Command Types. Maximum supported command at this moment is 0x3f.\n\n    // Command Types where value<0x08, executed in the first nested-if block\n    uint256 constant V3_SWAP_EXACT_IN = 0x00;\n    uint256 constant V3_SWAP_EXACT_OUT = 0x01;\n    uint256 constant PERMIT2_TRANSFER_FROM = 0x02;\n    uint256 constant PERMIT2_PERMIT_BATCH = 0x03;\n    uint256 constant SWEEP = 0x04;\n    uint256 constant TRANSFER = 0x05;\n    uint256 constant PAY_PORTION = 0x06;\n    // COMMAND_PLACEHOLDER = 0x07;\n\n    // The commands are executed in nested if blocks to minimise gas consumption\n    // The following constant defines one of the boundaries where the if blocks split commands\n    uint256 constant FIRST_IF_BOUNDARY = 0x08;\n\n    // Command Types where 0x08<=value<=0x0f, executed in the second nested-if block\n    uint256 constant V2_SWAP_EXACT_IN = 0x08;\n    uint256 constant V2_SWAP_EXACT_OUT = 0x09;\n    uint256 constant PERMIT2_PERMIT = 0x0a;\n    uint256 constant WRAP_ETH = 0x0b;\n    uint256 constant UNWRAP_WETH = 0x0c;\n    uint256 constant PERMIT2_TRANSFER_FROM_BATCH = 0x0d;\n    uint256 constant BALANCE_CHECK_ERC20 = 0x0e;\n    // COMMAND_PLACEHOLDER = 0x0f;\n\n    // The commands are executed in nested if blocks to minimise gas consumption\n    // The following constant defines one of the boundaries where the if blocks split commands\n    uint256 constant SECOND_IF_BOUNDARY = 0x10;\n\n    // Command Types where 0x10<=value<0x18, executed in the third nested-if block\n    uint256 constant SEAPORT_V1_5 = 0x10;\n    uint256 constant LOOKS_RARE_V2 = 0x11;\n    uint256 constant NFTX = 0x12;\n    uint256 constant CRYPTOPUNKS = 0x13;\n    // 0x14;\n    uint256 constant OWNER_CHECK_721 = 0x15;\n    uint256 constant OWNER_CHECK_1155 = 0x16;\n    uint256 constant SWEEP_ERC721 = 0x17;\n\n    // The commands are executed in nested if blocks to minimise gas consumption\n    // The following constant defines one of the boundaries where the if blocks split commands\n    uint256 constant THIRD_IF_BOUNDARY = 0x18;\n\n    // Command Types where 0x18<=value<=0x1f, executed in the final nested-if block\n    uint256 constant X2Y2_721 = 0x18;\n    uint256 constant SUDOSWAP = 0x19;\n    uint256 constant NFT20 = 0x1a;\n    uint256 constant X2Y2_1155 = 0x1b;\n    uint256 constant FOUNDATION = 0x1c;\n    uint256 constant SWEEP_ERC1155 = 0x1d;\n    uint256 constant ELEMENT_MARKET = 0x1e;\n    // COMMAND_PLACEHOLDER = 0x1f;\n\n    // The commands are executed in nested if blocks to minimise gas consumption\n    // The following constant defines one of the boundaries where the if blocks split commands\n    uint256 constant FOURTH_IF_BOUNDARY = 0x20;\n\n    // Command Types where 0x20<=value\n    uint256 constant SEAPORT_V1_4 = 0x20;\n    uint256 constant EXECUTE_SUB_PLAN = 0x21;\n    uint256 constant APPROVE_ERC20 = 0x22;\n    // COMMAND_PLACEHOLDER for 0x23 to 0x3f (all unused)\n}\n"
    },
    "contracts/lib/mode/routers/lib/VelodromeV2Constants.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\n/// @title Constant state\n/// @notice Constant state used by the Universal Router\nlibrary Constants {\n    /// @dev Used for identifying cases when this contract's balance of a token is to be used as an input\n    /// This value is equivalent to 1<<255, i.e. a singular 1 in the most significant bit.\n    uint256 internal constant CONTRACT_BALANCE = 0x8000000000000000000000000000000000000000000000000000000000000000;\n\n    /// @dev Used for identifying cases when a v2 pair has already received input tokens\n    uint256 internal constant ALREADY_PAID = 0;\n\n    /// @dev Used as a flag for identifying the transfer of ETH instead of a token\n    address internal constant ETH = address(0);\n\n    /// @dev Used as a flag for identifying that msg.sender should be used, saves gas by sending more 0 bytes\n    address internal constant MSG_SENDER = address(1);\n\n    /// @dev Used as a flag for identifying address(this) should be used, saves gas by sending more 0 bytes\n    address internal constant ADDRESS_THIS = address(2);\n\n    /// @dev The length of the bytes encoded address\n    uint256 internal constant ADDR_SIZE = 20;\n\n    /// @dev The length of the bytes encoded fee\n    uint256 internal constant V3_FEE_SIZE = 3;\n\n    /// @dev The offset of a single token address (20) and pool fee (3)\n    uint256 internal constant NEXT_V3_POOL_OFFSET = ADDR_SIZE + V3_FEE_SIZE;\n\n    /// @dev The offset of an encoded pool key\n    /// Token (20) + Fee (3) + Token (20) = 43\n    uint256 internal constant V3_POP_OFFSET = NEXT_V3_POOL_OFFSET + ADDR_SIZE;\n\n    /// @dev The minimum length of an encoding that contains 2 or more pools\n    uint256 internal constant MULTIPLE_V3_POOLS_MIN_LENGTH = V3_POP_OFFSET + NEXT_V3_POOL_OFFSET;\n}"
    },
    "contracts/lib/mode/routers/PancakeRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// PancakeRouter.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../../Web3PacksRouterBase.sol\";\nimport \"../../../interfaces/IWeb3PacksDefs.sol\";\nimport \"../../../interfaces/mode/IPancakeRouter02.sol\";\nimport \"../../../interfaces/mode/IPancakeFactory.sol\";\n\n\n// UniswapV2-like Router\nabstract contract PancakeRouter is Web3PacksRouterBase {\n  // Pass constructor data\n  constructor(IWeb3PacksDefs.RouterConfig memory config) Web3PacksRouterBase(config) {}\n\n  function swapSingle(uint256 percentOfAmount, bool reverse)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amountOut)\n  {\n    IWeb3PacksDefs.Token memory token0 = reverse ? getToken1() : getToken0();\n    IWeb3PacksDefs.Token memory token1 = reverse ? getToken0() : getToken1();\n    amountOut = _performSwap(percentOfAmount, token0.tokenAddress, token1.tokenAddress);\n  }\n\n  function swapCustom(uint256 percentOfAmount, address token0, address token1)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amountOut)\n  {\n    amountOut = _performSwap(percentOfAmount, token0, token1);\n  }\n\n  function createLiquidityPosition(bool)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (\n      uint256 lpTokenId,\n      uint256 liquidity,\n      uint256 amount0,\n      uint256 amount1\n    )\n  {\n    IWeb3PacksDefs.Token memory token0 = getToken0();\n    IWeb3PacksDefs.Token memory token1 = getToken1();\n    (\n      uint256 balanceAmount0,\n      uint256 balanceAmount1,\n      uint256 minAmount0,\n      uint256 minAmount1\n    ) = getLiquidityAmounts();\n\n    TransferHelper.safeApprove(token0.tokenAddress, _liquidityRouter, balanceAmount0);\n    TransferHelper.safeApprove(token1.tokenAddress, _liquidityRouter, balanceAmount1);\n\n    // Add Liquidity\n    (amount0, amount1, liquidity) = IPancakeRouter02(_liquidityRouter).addLiquidity(\n      token0.tokenAddress,\n      token1.tokenAddress,\n      balanceAmount0,\n      balanceAmount1,\n      minAmount0,\n      minAmount1,\n      address(this),\n      block.timestamp\n    );\n\n    // Deposit the LP tokens into the Web3Packs NFT\n    address lpTokenAddress = _getPancakePairAddress();\n    lpTokenId = uint256(uint160(lpTokenAddress));\n  }\n\n  function collectLpFees(IWeb3PacksDefs.LiquidityPosition memory)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amount0, uint256 amount1)\n  {\n    amount0 = 0;\n    amount1 = 0;\n  }\n\n  function removeLiquidityPosition(IWeb3PacksDefs.LiquidityPosition memory liquidityPosition)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint amount0, uint amount1)\n  {\n    IWeb3PacksDefs.Token memory token0 = getToken0();\n    IWeb3PacksDefs.Token memory token1 = getToken1();\n    address lpTokenAddress = _getPancakePairAddress();\n\n    TransferHelper.safeApprove(\n      lpTokenAddress,\n      _liquidityRouter,\n      liquidityPosition.liquidity\n    );\n\n    (amount0, amount1) = IPancakeRouter02(_liquidityRouter).removeLiquidity(\n      token0.tokenAddress,\n      token1.tokenAddress,\n      liquidityPosition.liquidity,\n      0,\n      0,\n      address(this),\n      block.timestamp\n    );\n  }\n\n\n  function _performSwap(uint256 percentOfAmount, address token0, address token1)\n    internal\n    returns (uint256 amountOut)\n  {\n    address[] memory routes = new address[](2);\n    routes[0] = token0;\n    routes[1] = token1;\n\n    uint256 balance = IERC20(token0).balanceOf(address(this));\n    uint256 swapAmount = (balance * percentOfAmount) / 10000;\n\n    if (swapAmount > 0) {\n      TransferHelper.safeApprove(token0, _swapRouter, swapAmount);\n      IPancakeRouter02(_swapRouter).swapExactTokensForTokens(\n        swapAmount,\n        0,\n        routes,\n        address(this),\n        block.timestamp\n      );\n      amountOut = IERC20(token1).balanceOf(address(this));\n      if (amountOut == 0) { revert SwapFailed(); }\n      emit SwappedTokens(token0, token1, swapAmount, amountOut);\n    }\n  }\n\n  function _getPancakeFactory() internal view returns (address) {\n    return IPancakeRouter02(_liquidityRouter).factory();\n  }\n\n  function _getPancakePairAddress() internal view returns (address) {\n    IWeb3PacksDefs.Token memory token0 = getToken0();\n    IWeb3PacksDefs.Token memory token1 = getToken1();\n    IPancakeFactory _factory = IPancakeFactory(_getPancakeFactory());\n    return _factory.getPair(token0.tokenAddress, token1.tokenAddress);\n  }\n}\n"
    },
    "contracts/lib/mode/routers/UniswapV2Router.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// UniswapV2Router.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../../Web3PacksRouterBase.sol\";\nimport \"../../../interfaces/IWeb3PacksDefs.sol\";\n\n\nabstract contract UniswapV2Router is Web3PacksRouterBase {\n  // Pass constructor data\n  constructor(IWeb3PacksDefs.RouterConfig memory config) Web3PacksRouterBase(config) {}\n\n  function swapSingle(uint256 percentOfAmount, bool reverse)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amountOut)\n  {\n    IWeb3PacksDefs.Token memory token0 = reverse ? getToken1() : getToken0();\n    IWeb3PacksDefs.Token memory token1 = reverse ? getToken0() : getToken1();\n    amountOut = _performSwap(percentOfAmount, token0.tokenAddress, token1.tokenAddress);\n  }\n\n  function swapCustom(uint256 percentOfAmount, address token0, address token1)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amountOut)\n  {\n    amountOut = _performSwap(percentOfAmount, token0, token1);\n  }\n\n  function createLiquidityPosition(bool)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (\n      uint256 lpTokenId,\n      uint256 liquidity,\n      uint256 amount0,\n      uint256 amount1\n    )\n  {\n    IWeb3PacksDefs.Token memory token0 = getToken0();\n    IWeb3PacksDefs.Token memory token1 = getToken1();\n    (\n      uint256 balanceAmount0,\n      uint256 balanceAmount1,\n      uint256 minAmount0,\n      uint256 minAmount1\n    ) = getLiquidityAmounts();\n\n    TransferHelper.safeApprove(token0.tokenAddress, _liquidityRouter, balanceAmount0);\n    TransferHelper.safeApprove(token1.tokenAddress, _liquidityRouter, balanceAmount1);\n\n    // Add Liquidity\n    (amount0, amount1, liquidity) = IUniswapV2Router02(_liquidityRouter).addLiquidity(\n      token0.tokenAddress,\n      token1.tokenAddress,\n      balanceAmount0,\n      balanceAmount1,\n      minAmount0,\n      minAmount1,\n      address(this),\n      block.timestamp\n    );\n\n    // Deposit the LP tokens into the Web3Packs NFT\n    address lpTokenAddress = _getUniswapV2PairAddress();\n    lpTokenId = uint256(uint160(lpTokenAddress));\n  }\n\n  function collectLpFees(IWeb3PacksDefs.LiquidityPosition memory)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amount0, uint256 amount1)\n  {\n    amount0 = 0;\n    amount1 = 0;\n  }\n\n  function removeLiquidityPosition(IWeb3PacksDefs.LiquidityPosition memory liquidityPosition)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint amount0, uint amount1)\n  {\n    IWeb3PacksDefs.Token memory token0 = getToken0();\n    IWeb3PacksDefs.Token memory token1 = getToken1();\n\n    address lpTokenAddress = _getUniswapV2PairAddress();\n    TransferHelper.safeApprove(\n      lpTokenAddress,\n      _liquidityRouter,\n      liquidityPosition.liquidity\n    );\n\n    // Release Liquidity\n    (amount0, amount1) = IUniswapV2Router02(_liquidityRouter).removeLiquidity(\n      token0.tokenAddress,\n      token1.tokenAddress,\n      liquidityPosition.liquidity,\n      0,\n      0,\n      address(this),\n      block.timestamp\n    );\n  }\n\n\n  function _performSwap(uint256 percentOfAmount, address token0, address token1)\n    internal\n    returns (uint256 amountOut)\n  {\n    uint256 balance = IERC20(token0).balanceOf(address(this));\n    uint256 swapAmount = (balance * percentOfAmount) / 10000;\n    address[] memory path;\n    path[0] = token0;\n    path[1] = token1;\n\n    if (swapAmount > 0) {\n      TransferHelper.safeApprove(token0, _swapRouter, swapAmount);\n      IUniswapV2Router02(_swapRouter).swapExactTokensForETHSupportingFeeOnTransferTokens(\n        swapAmount,\n        0,\n        path,\n        address(this),\n        block.timestamp\n      );\n      amountOut = IERC20(token1).balanceOf(address(this));\n      if (amountOut == 0) { revert SwapFailed(); }\n      emit SwappedTokens(token0, token1, swapAmount, amountOut);\n    }\n  }\n\n  function _getUniswapV2Factory() internal view returns (address) {\n    return IUniswapV2Router02(_liquidityRouter).factory();\n  }\n\n  function _getUniswapV2PairAddress() internal view returns (address) {\n    IWeb3PacksDefs.Token memory token0 = getToken0();\n    IWeb3PacksDefs.Token memory token1 = getToken1();\n    IUniswapV2Factory _factory = IUniswapV2Factory(_getUniswapV2Factory());\n    return _factory.getPair(token0.tokenAddress, token1.tokenAddress);\n  }\n}\n"
    },
    "contracts/lib/mode/routers/VelodromeV1Router.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// VelodromeV1Router.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../../Web3PacksRouterBase.sol\";\nimport \"../../../interfaces/IWeb3PacksDefs.sol\";\nimport \"../../../interfaces/mode/IVelodrome.sol\";\n\n\n// UniswapV2-like Router\nabstract contract VelodromeV1Router is Web3PacksRouterBase {\n  // Pass constructor data\n  constructor(IWeb3PacksDefs.RouterConfig memory config) Web3PacksRouterBase(config) {}\n\n  function swapSingle(uint256 percentOfAmount, bool reverse)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amountOut)\n  {\n    IWeb3PacksDefs.Token memory token0 = reverse ? getToken1() : getToken0();\n    IWeb3PacksDefs.Token memory token1 = reverse ? getToken0() : getToken1();\n    IWeb3PacksDefs.Route[] memory tokens = getTokenPath(reverse);\n    IVelodrome.Route[] memory routes = new IVelodrome.Route[](tokens.length);\n    for (uint i; i < tokens.length; i++) {\n      routes[i] = IVelodrome.Route({from: tokens[i].token0, to: tokens[i].token1, stable: tokens[i].stable});\n    }\n    amountOut = _performSwap(percentOfAmount, token0.tokenAddress, token1.tokenAddress, routes);\n  }\n\n  function swapCustom(uint256 percentOfAmount, address token0, address token1)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amountOut)\n  {\n    IWeb3PacksDefs.Route[] memory tokens = getTokenPath(false);\n    IVelodrome.Route[] memory routes = new IVelodrome.Route[](tokens.length);\n    for (uint i; i < tokens.length; i++) {\n      routes[i] = IVelodrome.Route({from: tokens[i].token0, to: tokens[i].token1, stable: tokens[i].stable});\n    }\n    amountOut = _performSwap(percentOfAmount, token0, token1, routes);\n  }\n\n  function createLiquidityPosition(bool stable)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (\n      uint256 lpTokenId,\n      uint256 liquidity,\n      uint256 amount0,\n      uint256 amount1\n    )\n  {\n    IWeb3PacksDefs.Token memory token0 = getToken0();\n    IWeb3PacksDefs.Token memory token1 = getToken1();\n    (\n      uint256 balanceAmount0,\n      uint256 balanceAmount1,\n      uint256 minAmount0,\n      uint256 minAmount1\n    ) = getLiquidityAmounts();\n\n    TransferHelper.safeApprove(token0.tokenAddress, _liquidityRouter, balanceAmount0);\n    TransferHelper.safeApprove(token1.tokenAddress, _liquidityRouter, balanceAmount1);\n\n    // Add Liquidity\n    (amount0, amount1, liquidity) = IVelodrome(_liquidityRouter).addLiquidity(\n      token0.tokenAddress,\n      token1.tokenAddress,\n      stable,\n      balanceAmount0,\n      balanceAmount1,\n      minAmount0,\n      minAmount1,\n      address(this),\n      block.timestamp\n    );\n\n    // Deposit the LP tokens into the Web3Packs NFT\n    address lpTokenAddress = _getVelodromePairAddress();\n    lpTokenId = uint256(uint160(lpTokenAddress));\n  }\n\n  function collectLpFees(IWeb3PacksDefs.LiquidityPosition memory)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amount0, uint256 amount1)\n  {\n    amount0 = 0;\n    amount1 = 0;\n  }\n\n  function removeLiquidityPosition(IWeb3PacksDefs.LiquidityPosition memory liquidityPosition)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint amount0, uint amount1)\n  {\n    IWeb3PacksDefs.Token memory token0 = getToken0();\n    IWeb3PacksDefs.Token memory token1 = getToken1();\n    address lpTokenAddress = _getVelodromePairAddress();\n\n    TransferHelper.safeApprove(\n      lpTokenAddress,\n      _liquidityRouter,\n      liquidityPosition.liquidity\n    );\n\n    (amount0, amount1) = IVelodrome(_liquidityRouter).removeLiquidity(\n      token0.tokenAddress,\n      token1.tokenAddress,\n      liquidityPosition.stable,\n      liquidityPosition.liquidity,\n      0,\n      0,\n      address(this),\n      block.timestamp\n    );\n  }\n\n\n  function _performSwap(uint256 percentOfAmount, address token0, address token1, IVelodrome.Route[] memory routes)\n    internal\n    returns (uint256 amountOut)\n  {\n    uint256 balance = IERC20(token0).balanceOf(address(this));\n    uint256 swapAmount = (balance * percentOfAmount) / 10000;\n\n    if (swapAmount > 0) {\n      TransferHelper.safeApprove(token0, _swapRouter, swapAmount);\n      IVelodrome(_swapRouter).swapExactTokensForTokens(\n        swapAmount,\n        0,\n        routes,\n        address(this),\n        block.timestamp\n      );\n      amountOut = IERC20(token1).balanceOf(address(this));\n      if (amountOut == 0) { revert SwapFailed(); }\n      emit SwappedTokens(token0, token1, swapAmount, amountOut);\n    }\n  }\n\n  function _getVelodromePairAddress() internal view returns (address) {\n    IWeb3PacksDefs.Token memory token0 = getToken0();\n    IWeb3PacksDefs.Token memory token1 = getToken1();\n    return IVelodrome(_liquidityRouter).poolFor(token0.tokenAddress, token1.tokenAddress, false);\n  }\n}\n"
    },
    "contracts/lib/mode/routers/VelodromeV2Router.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// VelodromeV2Router.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"../../Web3PacksRouterBase.sol\";\nimport \"../../../interfaces/IWeb3PacksDefs.sol\";\nimport \"../../../interfaces/mode/IVelodrome.sol\";\nimport {IUniversalRouter} from \"../../../interfaces/mode/IVelodromeUniversalRouter.sol\";\nimport {Commands} from \"./lib/VelodromeV2Commands.sol\";\nimport {Constants} from \"./lib/VelodromeV2Constants.sol\";\n\n// REF: https://github.com/velodrome-finance/universal-router/blob/main/test/foundry-tests/v2/UniswapV2MultiHop.t.sol#L68\n\n// Velodrome Universal Router\nabstract contract VelodromeV2Router is Web3PacksRouterBase {\n  struct VRoute {\n    address from;\n    address to;\n    bool stable;\n  }\n\n  // Pass constructor data\n  constructor(IWeb3PacksDefs.RouterConfig memory config) Web3PacksRouterBase(config) {}\n\n  function swapSingle(uint256 percentOfAmount, bool reverse)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amountOut)\n  {\n    IWeb3PacksDefs.Token memory token0 = reverse ? getToken1() : getToken0();\n    IWeb3PacksDefs.Token memory token1 = reverse ? getToken0() : getToken1();\n    IWeb3PacksDefs.Route[] memory tokens = getTokenPath(reverse);\n    VRoute[] memory routes = new VRoute[](tokens.length);\n    for (uint i; i < tokens.length; i++) {\n      routes[i] = VRoute({from: tokens[i].token0, to: tokens[i].token1, stable: tokens[i].stable});\n    }\n    amountOut = _performSwapV2(percentOfAmount, token0.tokenAddress, token1.tokenAddress, routes);\n  }\n\n  function swapCustom(uint256 percentOfAmount, address token0, address token1)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amountOut)\n  {\n    VRoute[] memory routes = new VRoute[](1);\n    routes[0] = VRoute({from: token0, to: token1, stable: false});\n    amountOut = _performSwapV2(percentOfAmount, token0, token1, routes);\n  }\n\n  function createLiquidityPosition(bool)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (\n      uint256 lpTokenId,\n      uint256 liquidity,\n      uint256 amount0,\n      uint256 amount1\n    )\n  {\n    lpTokenId = 0;\n    liquidity = 0;\n    amount0 = 0;\n    amount1 = 0;\n  }\n\n  function collectLpFees(IWeb3PacksDefs.LiquidityPosition memory)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint256 amount0, uint256 amount1)\n  {\n    amount0 = 0;\n    amount1 = 0;\n  }\n\n  function removeLiquidityPosition(IWeb3PacksDefs.LiquidityPosition memory)\n    public\n    virtual\n    override\n    onlyManagerOrSelf\n    returns (uint amount0, uint amount1)\n  {\n    amount0 = 0;\n    amount1 = 0;\n  }\n\n\n  function _performSwapV2(uint256 percentOfAmount, address token0, address token1, VRoute[] memory routes)\n    internal\n    returns (uint256 amountOut)\n  {\n    uint256 balance = IERC20(token0).balanceOf(address(this));\n    uint256 swapAmount = (balance * percentOfAmount) / 10000;\n\n    if (swapAmount > 0) {\n      TransferHelper.safeApprove(token0, _swapRouter, swapAmount);\n      bytes memory commands = abi.encodePacked(bytes1(uint8(Commands.V2_SWAP_EXACT_IN)));\n      bytes[] memory inputs = new bytes[](1);\n      inputs[0] = abi.encode(Constants.MSG_SENDER, swapAmount, 0, routes, true);\n      IUniversalRouter(_swapRouter).execute(commands, inputs, block.timestamp);\n      amountOut = IERC20(token1).balanceOf(address(this));\n      if (amountOut == 0) { revert SwapFailed(); }\n      emit SwappedTokens(token0, token1, swapAmount, amountOut);\n    }\n  }\n\n  function _performSwapV3(uint256 percentOfAmount, address token0, address token1, bytes memory path)\n    internal\n    returns (uint256 amountOut)\n  {\n    uint256 balance = IERC20(token0).balanceOf(address(this));\n    uint256 swapAmount = (balance * percentOfAmount) / 10000;\n\n    if (swapAmount > 0) {\n      TransferHelper.safeApprove(token0, _swapRouter, swapAmount);\n      bytes memory commands = abi.encodePacked(bytes1(uint8(Commands.V3_SWAP_EXACT_IN)));\n      bytes[] memory inputs = new bytes[](1);\n      inputs[0] = abi.encode(Constants.MSG_SENDER, swapAmount, 0, path, true);\n      IUniversalRouter(_swapRouter).execute(commands, inputs, block.timestamp);\n      amountOut = IERC20(token1).balanceOf(address(this));\n      if (amountOut == 0) { revert SwapFailed(); }\n      emit SwappedTokens(token0, token1, swapAmount, amountOut);\n    }\n  }\n}\n"
    },
    "contracts/lib/Web3PacksRouterBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// Web3PacksRouterBase.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"./BlackholePrevention.sol\";\nimport \"../interfaces/IWeb3PacksRouter.sol\";\nimport \"../interfaces/IWeb3PacksDefs.sol\";\nimport \"../interfaces/IWeb3PacksOld.sol\";\n\nabstract contract Web3PacksRouterBase is\n  IWeb3PacksRouter,\n  Ownable,\n  BlackholePrevention\n{\n  using Address for address payable;\n\n  address public _weth;\n  address public _manager;\n  address public _token0;\n  address public _token1;\n\n  address public _swapRouter;\n  address public _liquidityRouter;\n  bytes32 public _poolId;\n\n  // The ID Associated with this Bundler (must be Registered with Web3Packs)\n  bytes32 public _bundlerId;\n\n  uint256 public _slippage;\n  int24 public _tickLower;\n  int24 public _tickUpper;\n\n  // Store Liquidity Positions by Pack Token ID\n  mapping(uint256 => IWeb3PacksDefs.LiquidityPosition) internal _liquidityPositionsByTokenId;\n\n  constructor(IWeb3PacksDefs.RouterConfig memory config) {\n    _weth = config.weth;\n    _token0 = config.token0;\n    _token1 = config.token1;\n    _manager = config.manager;\n    _swapRouter = config.swapRouter;\n    _liquidityRouter = config.liquidityRouter;\n    _poolId = config.poolId;\n    _bundlerId = config.bundlerId;\n    _slippage = config.slippage;\n    _tickLower = config.tickLower;\n    _tickUpper = config.tickUpper;\n  }\n\n  receive() external payable {}\n\n  /***********************************|\n  |          Configuration            |\n  |__________________________________*/\n\n  /// @dev This should be overridden if Token0 is not WETH\n  function getToken0() public virtual view returns (IWeb3PacksDefs.Token memory token0) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _weth,\n      tokenDecimals: 18,\n      tokenSymbol: \"WETH\"\n    });\n    return token;\n  }\n\n  /// @dev This should be overridden if Token1 is not WETH\n  function getToken1() public virtual view returns (IWeb3PacksDefs.Token memory token1) {\n    IWeb3PacksDefs.Token memory token = IWeb3PacksDefs.Token({\n      tokenAddress: _weth,\n      tokenDecimals: 18,\n      tokenSymbol: \"WETH\"\n    });\n    return token;\n  }\n\n  /// @dev This can be overridden to specify custom routes/paths for swapping\n  function getTokenPath(bool reverse) public virtual view returns (IWeb3PacksDefs.Route[] memory tokenPath) {\n    IWeb3PacksDefs.Route[] memory tokens = new IWeb3PacksDefs.Route[](1);\n    tokens[0] = reverse\n      ? IWeb3PacksDefs.Route({token0: getToken1().tokenAddress, token1: getToken0().tokenAddress, stable: false})\n      : IWeb3PacksDefs.Route({token0: getToken0().tokenAddress, token1: getToken1().tokenAddress, stable: false});\n    return tokens;\n  }\n\n  /// @dev This can be overridden to specify custom ordering for swapping\n  function getOrderedAssets(bool reverse) public virtual view returns (address[] memory, uint256[] memory) {\n    address[] memory assets = new address[](2);\n    assets[0] = reverse ? getToken1().tokenAddress : getToken0().tokenAddress;\n    assets[1] = reverse ? getToken0().tokenAddress : getToken1().tokenAddress;\n\n    uint256[] memory amounts = new uint256[](2);\n    amounts[0] = reverse ? getBalanceToken1() : getBalanceToken0();\n    amounts[1] = reverse ? getBalanceToken0() : getBalanceToken1();\n\n    return (assets, amounts);\n  }\n\n  /// @dev This can be overridden to specify custom amounts for swapping\n  function getLiquidityAmounts() public virtual view returns (uint256 amount0, uint256 amount1, uint256 minAmount0, uint256 minAmount1) {\n    amount0 = getBalanceToken0();\n    amount1 = getBalanceToken1();\n    minAmount0 = (amount0 * (10000 - _slippage)) / 10000;\n    minAmount1 = (amount1 * (10000 - _slippage)) / 10000;\n  }\n\n  /// @dev This can be overridden to specify custom amounts for swapping\n  function getLiquidityPosition(uint256 tokenId) public virtual view returns (IWeb3PacksDefs.LiquidityPosition memory lp) {\n    lp = _liquidityPositionsByTokenId[tokenId];\n    // if (lp.liquidity == 0) {\n    //   IWeb3PacksOld.LiquidityPosition[] memory oldLps = IWeb3PacksOld(_oldWeb3PacksManager).getLiquidityPositions(tokenId);\n    //   for (uint i = 0; i < oldLps.length; i++) {\n    //     if (oldLps[i].token0 == getToken0().tokenAddress && oldLps[i].token1 == getToken1().tokenAddress) {\n    //       lp = IWeb3PacksDefs.LiquidityPosition({\n    //         lpTokenId: oldLps[i].lpTokenId,\n    //         liquidity: oldLps[i].liquidity,\n    //         stable: oldLps[i].stable\n    //       });\n    //       break;\n    //     }\n    //   }\n    // }\n  }\n\n  /***********************************|\n  |          Standard Code            |\n  |__________________________________*/\n\n  function getBalanceWeth() public virtual view returns (uint256 balanceWeth) {\n    return IERC20(_weth).balanceOf(address(this));\n  }\n\n  function getBalanceToken0() public virtual view returns (uint256 balanceToken0) {\n    return IERC20(getToken0().tokenAddress).balanceOf(address(this));\n  }\n\n  function getBalanceToken1() public virtual view returns (uint256 balanceToken1) {\n    return IERC20(getToken1().tokenAddress).balanceOf(address(this));\n  }\n\n  function enterWeth(uint256 amount) internal virtual {\n    IWETH(_weth).deposit{value: amount}();\n  }\n\n  function exitWethAndTransfer(address payable receiver) internal virtual returns (uint256 ethAmount) {\n    uint256 wethBalance = getBalanceWeth();\n    if (wethBalance > 0) {\n      IWETH(_weth).withdraw(wethBalance);\n    }\n    ethAmount = address(this).balance;\n    if (ethAmount != wethBalance) {\n      revert FailedToExitWeth();\n    }\n    if (ethAmount > 0) {\n      receiver.sendValue(ethAmount);\n      emit EthTransferred(receiver, ethAmount);\n    }\n  }\n\n  function refundUnusedTokens(address sender) internal virtual returns (uint256 unusedAmount0, uint256 unusedAmount1) {\n    // Refund Unused Amounts\n    unusedAmount0 = getBalanceToken0();\n    if (unusedAmount0 > 0) {\n      TransferHelper.safeTransfer(getToken0().tokenAddress, sender, unusedAmount0);\n    }\n    unusedAmount1 = getBalanceToken1();\n    if (unusedAmount1 > 0) {\n      TransferHelper.safeTransfer(getToken1().tokenAddress, sender, unusedAmount1);\n    }\n  }\n\n  function onERC721Received(\n    address,\n    address,\n    uint256,\n    bytes calldata\n  ) external virtual pure returns(bytes4) {\n    return this.onERC721Received.selector;\n  }\n\n  /***********************************|\n  |          Only Admin/DAO           |\n  |      (blackhole prevention)       |\n  |__________________________________*/\n\n  function setWeth(address weth) external virtual onlyOwner {\n    _weth = weth;\n  }\n\n  function setSwapRouter(address router) external virtual onlyOwner {\n    _swapRouter = router;\n  }\n\n  function setLiquidityRouter(address router) external virtual onlyOwner {\n    _liquidityRouter = router;\n  }\n\n  function setManager(address manager) external virtual onlyOwner {\n    _manager = manager;\n  }\n\n  function setSlippage(uint256 slippage) external virtual onlyOwner {\n    _slippage = slippage;\n  }\n\n  function setTickLower(int24 tickLower) external virtual onlyOwner {\n    _tickLower = tickLower;\n  }\n\n  function setTickUpper(int24 tickUpper) external virtual onlyOwner {\n    _tickUpper = tickUpper;\n  }\n\n  function withdrawEther(address payable receiver, uint256 amount) external virtual onlyOwner {\n    _withdrawEther(receiver, amount);\n  }\n\n  function withdrawErc20(address payable receiver, address tokenAddress, uint256 amount) external virtual onlyOwner {\n    _withdrawERC20(receiver, tokenAddress, amount);\n  }\n\n  function withdrawERC721(address payable receiver, address tokenAddress, uint256 tokenId) external virtual onlyOwner {\n    _withdrawERC721(receiver, tokenAddress, tokenId);\n  }\n\n  function withdrawERC1155(address payable receiver, address tokenAddress, uint256 tokenId, uint256 amount) external virtual onlyOwner {\n    _withdrawERC1155(receiver, tokenAddress, tokenId, amount);\n  }\n\n\n  modifier onlyManagerOrSelf() {\n    require(msg.sender == _manager || msg.sender == address(this), \"Web3PacksRouterBase - Invalid Web3Packs Manager\");\n    _;\n  }\n}\n"
    },
    "contracts/Web3PacksState.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// Web3PacksState.sol\n// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"./lib/BlackholePrevention.sol\";\nimport \"./interfaces/IWeb3Packs.sol\";\nimport \"./interfaces/IWeb3PacksState.sol\";\n\ncontract Web3PacksState is\n  IWeb3PacksState,\n  Ownable,\n  ReentrancyGuard,\n  BlackholePrevention\n{\n  using Address for address payable;\n\n  event Web3PacksSet(address indexed web3packs);\n  event BundlerRegistered(address indexed bundlerAddress, bytes32 bundlerId);\n  event BalanceClaimed(address indexed account, uint256 balance);\n  event RewardsMigrated(address indexed newWeb3state, uint256 balance);\n\n  address public _web3packs;\n\n  mapping (bytes32 => address) internal _bundlersById;\n  mapping (uint256 => uint256) internal _packPriceByPackId;\n  mapping (uint256 => bytes32[]) internal _bundlesByPackId;\n  mapping (address => uint256) internal _referrerBalance;\n\n  constructor(address web3packs) {\n    _web3packs = web3packs;\n  }\n\n  receive() external payable {}\n\n  modifier onlyWeb3Packs() {\n    require(msg.sender == _web3packs, \"Web3PacksState - Only Web3Packs\");\n    _;\n  }\n\n  function getBundlerById(bytes32 bundlerId) external view returns (address bundler) {\n    bundler = _bundlersById[bundlerId];\n  }\n\n  function getPackPriceByPackId(uint256 tokenId) external view returns (uint256 packPrice) {\n    packPrice = _packPriceByPackId[tokenId];\n  }\n\n  function getBundlesByPackId(uint256 tokenId) external view returns (bytes32[] memory bundles) {\n    bundles = _bundlesByPackId[tokenId];\n  }\n\n  function getReferrerBalance(address referrer) external view returns (uint256 balance) {\n    balance = _referrerBalance[referrer];\n  }\n\n  function claimReferralRewards(address payable account) external nonReentrant {\n    uint256 balance = _referrerBalance[account];\n    if (address(this).balance >= balance) {\n      account.sendValue(balance);\n      delete _referrerBalance[account];\n      emit BalanceClaimed(account, balance);\n    }\n  }\n\n\n  /***********************************|\n  |         Only Web3 Packs           |\n  |__________________________________*/\n\n  function setPackPriceByPackId(uint256 tokenId, uint256 packPrice) external onlyWeb3Packs {\n    if (packPrice > 0) {\n      _packPriceByPackId[tokenId] = packPrice;\n    } else {\n      delete _packPriceByPackId[tokenId];\n    }\n  }\n\n  function setBundlesByPackId(uint256 tokenId, bytes32[] memory bundles) external onlyWeb3Packs {\n    if (bundles.length > 0) {\n      _bundlesByPackId[tokenId] = bundles;\n    } else {\n      delete _bundlesByPackId[tokenId];\n    }\n  }\n\n  function addToReferrerBalance(address referrer, uint256 amount) external onlyWeb3Packs {\n    _referrerBalance[referrer] += amount;\n  }\n\n\n  /***********************************|\n  |          Only Admin/DAO           |\n  |__________________________________*/\n\n  function setWeb3Packs(address web3packs) external onlyOwner {\n    require(web3packs != address(0), \"Invalid address for treasury\");\n    _web3packs = web3packs;\n    emit Web3PacksSet(web3packs);\n  }\n\n  function registerBundlerId(bytes32 bundlerId, address bundlerAddress) external onlyOwner {\n    _bundlersById[bundlerId] = bundlerAddress;\n    emit BundlerRegistered(bundlerAddress, bundlerId);\n  }\n\n  function migratePackData(address oldWeb3Packs, uint256 tokenId, bytes32[] memory bundleIds) public onlyOwner {\n    uint256 packPriceEth = IWeb3Packs(oldWeb3Packs).getPackPriceEth(tokenId);\n    _packPriceByPackId[tokenId] = packPriceEth;\n    _bundlesByPackId[tokenId] = bundleIds;\n  }\n\n  function migrateRewards(address payable newWeb3state) public onlyOwner {\n    uint256 balance = address(this).balance;\n    if (balance > 0) {\n      newWeb3state.sendValue(balance);\n      emit RewardsMigrated(newWeb3state, balance);\n    }\n  }\n\n  /***********************************|\n  |          Only Admin/DAO           |\n  |      (blackhole prevention)       |\n  |__________________________________*/\n\n  function withdrawEther(address payable receiver, uint256 amount) external virtual onlyOwner {\n    _withdrawEther(receiver, amount);\n  }\n\n  function withdrawErc20(address payable receiver, address tokenAddress, uint256 amount) external virtual onlyOwner {\n    _withdrawERC20(receiver, tokenAddress, amount);\n  }\n\n  function withdrawERC721(address payable receiver, address tokenAddress, uint256 tokenId) external virtual onlyOwner {\n    _withdrawERC721(receiver, tokenAddress, tokenId);\n  }\n\n  function withdrawERC1155(address payable receiver, address tokenAddress, uint256 tokenId, uint256 amount) external virtual onlyOwner {\n    _withdrawERC1155(receiver, tokenAddress, tokenId, amount);\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}