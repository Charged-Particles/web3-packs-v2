// SPDX-License-Identifier: MIT

// Web3PacksReferrals.sol
// Copyright (c) 2025 Firma Lux, Inc. <https://charged.fi>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

pragma solidity 0.8.17;

import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "./interfaces/IWeb3Packs.sol";
import "./lib/BlackholePrevention.sol";


// Charged Particles - Web3 Packs with Referrals
contract Web3PacksReferrals is
  Ownable,
  ReentrancyGuard,
  BlackholePrevention
{
  using Address for address payable;

  event Web3PacksSet(address indexed web3packs);
  event BalanceClaimed(address indexed account, uint256 balance);

  address internal _web3packs;
  mapping (address => uint256) internal _referrerBalance;

  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  // Initialization

  constructor () {}


  /***********************************|
  |               Public              |
  |__________________________________*/

  function balanceOf(address account) public view returns (uint256 balance) {
    balance = _referrerBalance[account];
  }

  function claimBalance(address payable account) public nonReentrant {
    uint256 balance = _referrerBalance[account];

    if (address(this).balance >= balance) {
      account.sendValue(balance);
      emit BalanceClaimed(account, balance);
    }
  }

  function bundleWithReferral(
    address payable receiver,
    string calldata tokenMetaUri,
    IWeb3Packs.ContractCallGeneric[] calldata contractCalls,
    IWeb3Packs.ERC20SwapOrderGeneric[] calldata erc20SwapOrders,
    IWeb3Packs.LiquidityOrderGeneric[] calldata liquidityOrders,
    IWeb3Packs.LockState calldata lockState,
    uint256 ethPackPrice,
    address[] calldata referrals
  ) external payable nonReentrant {
    uint256 fee = _calculateFees(ethPackPrice, referrals);

    // Call "bundle" on Web3Packs
    IWeb3Packs(_web3packs).bundle{value: fee}(
      receiver,
      tokenMetaUri,
      contractCalls,
      erc20SwapOrders,
      liquidityOrders,
      lockState,
      ethPackPrice
    );
  }

  function _calculateFees(
    uint256 ethPackPrice,
    address[] memory referrals
  ) internal returns (uint256 fee) {
    fee = msg.value - ethPackPrice;

    // Calculate Referral Amounts and Distribute
    if (referrals.length > 0) {
      uint256 referralAmountTotal;
      if (referrals[0] != address(0)) {
        referralAmountTotal = ((fee * 33) / 1000);  // 3.3%

        if (referrals.length > 1 && referrals[1] != address(0)) {
          if (referrals.length > 2 && referrals[2] != address(0)) {
            _referrerBalance[referrals[0]] += ((fee * 3) / 1000);  // 0.3%
            _referrerBalance[referrals[1]] += ((fee * 3) / 1000);  // 0.3%
            _referrerBalance[referrals[2]] += ((fee * 27) / 1000); // 2.7%
          } else {
            _referrerBalance[referrals[0]] += ((fee * 3) / 1000);  // 0.3%
            _referrerBalance[referrals[1]] += ((fee * 30) / 1000);  // 3.0%
          }
        } else {
          _referrerBalance[referrals[1]] += referralAmountTotal;
        }

        // Remove Referral Value from Funding Value
        fee -= referralAmountTotal;
      }
    }
  }

  /***********************************|
  |          Only Admin/DAO           |
  |__________________________________*/

  /**
    * @dev Setup the Web3 Packs Interface
  */
  function setWeb3Packs(address web3packs) external onlyOwner {
    _web3packs = web3packs;
    emit Web3PacksSet(_web3packs);
  }


  /***********************************|
  |          Only Admin/DAO           |
  |      (blackhole prevention)       |
  |__________________________________*/

  function withdrawEther(address payable receiver, uint256 amount) external virtual onlyOwner {
    _withdrawEther(receiver, amount);
  }

  function withdrawErc20(address payable receiver, address tokenAddress, uint256 amount) external virtual onlyOwner {
    _withdrawERC20(receiver, tokenAddress, amount);
  }

  function withdrawERC721(address payable receiver, address tokenAddress, uint256 tokenId) external virtual onlyOwner {
    _withdrawERC721(receiver, tokenAddress, tokenId);
  }

  function withdrawERC1155(address payable receiver, address tokenAddress, uint256 tokenId, uint256 amount) external virtual onlyOwner {
    _withdrawERC1155(receiver, tokenAddress, tokenId, amount);
  }
}